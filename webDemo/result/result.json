{"result":[{"Origin":"private void calculateCL(double[] x){\n\tvalue=0.0;\n\tif(derivativeNumerator == null){\n\t\tderivativeNumerator=new double[x.length];\n\t\tfor (int d=0; d < data.length; d++){\n\t\t\tint[] features=data[d];\n\t\t\tfor (int f=0; f < features.length; f++){\n\t\t\t\tint i=indexOf(features[f],labels[d]);\n\t\t\t\tif(dataweights == null){\n\t\t\t\t\tderivativeNumerator[i]-=1;\n\t\t\t\t}else {\n\t\t\t\t\tderivativeNumerator[i]-=dataweights[d];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tcopy(derivative,derivativeNumerator);\n\tdouble[] sums=new double[numClasses];\n\tdouble[] probs=new double[numClasses];\n\tfor (int d=0; d < data.length; d++){\n\t\tint[] features=data[d];\n\t\tArrays.fill(sums,0.0);\n\t\tfor (int c=0; c < numClasses; c++){\n\t\t\tfor (int f=0; f < features.length; f++){\n\t\t\t\tint i=indexOf(features[f],c);\n\t\t\t\tsums[c]+=x[i];\n\t\t\t}\n\t\t}\n\t\tdouble total=ArrayMath.logSum(sums);\n\t\tfor (int c=0; c < numClasses; c++){\n\t\t\tprobs[c]=Math.exp(sums[c] - total);\n\t\t\tif(dataweights != null){\n\t\t\t\tprobs[c]*=dataweights[d];\n\t\t\t}\n\t\t\tfor (int f=0; f < features.length; f++){\n\t\t\t\tint i=indexOf(features[f],c);\n\t\t\t\tderivative[i]+=probs[c];\n\t\t\t}\n\t\t}\n\t\tdouble dV=sums[labels[d]] - total;\n\t\tif(dataweights != null){\n\t\t\tdV*=dataweights[d];\n\t\t}\n\t\tvalue-=dV;\n\t}\n\tdouble[] newX=ArrayMath.pairwiseSubtract(x,weights);\n\tvalue+=prior.compute(newX,derivative);\n}","Original_Lines":46,"Target_Lines":15,"Manual":"private void calculateCL(double[] x){...\n\tcopy(derivative,derivativeNumerator);\n\tdouble[] sums=new double[numClasses];\n\tdouble[] probs=new double[numClasses];\n\tfor (int d=0; d < data.length; d++){\n\t\tint[] features=data[d];\n\t\tArrays.fill(sums,0.0);...\n\t\tdouble total=ArrayMath.logSum(sums);...\n\t\tdouble dV=sums[labels[d]] - total;\n\t\tif(dataweights != null){\n\t\t\tdV*=dataweights[d];\n\t\t}\n\t\tvalue-=dV;\n\t}\n\tdouble[] newX=ArrayMath.pairwiseSubtract(x,weights);\n\tvalue+=prior.compute(newX,derivative);\n}","Distance":0.14285714285714285,"Automatic":"private void calculateCL(double[] x){\n\tvalue=0.0;...\n\tcopy(derivative,derivativeNumerator);\n\tdouble[] sums=new double[numClasses];\n\tdouble[] probs=new double[numClasses];\n\tfor (int d=0; d < data.length; d++){\n\t\tint[] features=data[d];...\n\t\tdouble total=ArrayMath.logSum(sums);...\n\t\tdouble dV=sums[labels[d]] - total;\n\t\tif(dataweights != null){\n\t\t\tdV*=dataweights[d];\n\t\t}\n\t\tvalue-=dV;\n\t}\n\tdouble[] newX=ArrayMath.pairwiseSubtract(x,weights);\n\tvalue+=prior.compute(newX,derivative);\n}"},{"Origin":"@Override protected void calculate(double[] x){\n\tif(derivative == null){\n\t\tderivative=new double[x.length];\n\t}else {\n\t\tArrays.fill(derivative,0.0);\n\t}\n\tvalue=0.0;\n\tdouble[] sums=new double[numClasses];\n\tdouble[] probs=new double[numClasses];\n\tdouble[] weightedProbs=new double[numClasses];\n\tfor (int d=0; d < data.length; d++){\n\t\tint[] features=data[d];\n\t\tint observedLabel=labels[d];\n\t\tArrays.fill(sums,0.0);\n\t\tfor (int c=0; c < numClasses; c++){\n\t\t\tfor (int f=0; f < features.length; f++){\n\t\t\t\tint i=indexOf(features[f],c);\n\t\t\t\tsums[c]+=x[i];\n\t\t\t}\n\t\t}\n\t\tdouble total=ArrayMath.logSum(sums);\n\t\tdouble[] weightedSums=new double[numClasses];\n\t\tfor (int trueLabel=0; trueLabel < numClasses; trueLabel++){\n\t\t\tweightedSums[trueLabel]=Math.log(confusionMatrix[observedLabel][trueLabel]) + sums[trueLabel];\n\t\t}\n\t\tdouble weightedTotal=ArrayMath.logSum(weightedSums);\n\t\tfor (int c=0; c < numClasses; c++){\n\t\t\tprobs[c]=Math.exp(sums[c] - total);\n\t\t\tweightedProbs[c]=Math.exp(weightedSums[c] - weightedTotal);\n\t\t\tfor (int f=0; f < features.length; f++){\n\t\t\t\tint i=indexOf(features[f],c);\n\t\t\t\tderivative[i]+=probs[c] - weightedProbs[c];\n\t\t\t}\n\t\t}\n\t\tdouble tmpValue=0.0;\n\t\tfor (int c=0; c < numClasses; c++){\n\t\t\ttmpValue+=confusionMatrix[observedLabel][c] * Math.exp(sums[c] - total);\n\t\t}\n\t\tvalue-=Math.log(tmpValue);\n\t}\n\tvalue+=prior.compute(x,derivative);\n}","Original_Lines":40,"Target_Lines":18,"Manual":"@Override protected void calculate(double[] x){...\n\tfor (int d=0; d < data.length; d++){\n\t\tint[] features=data[d];\n\t\tint observedLabel=labels[d];\n\t\tArrays.fill(sums,0.0);...\n\t\tdouble total=ArrayMath.logSum(sums);\n\t\tdouble[] weightedSums=new double[numClasses];...\n\t\tdouble weightedTotal=ArrayMath.logSum(weightedSums);\n\t\tfor (int c=0; c < numClasses; c++){\n\t\t\tprobs[c]=Math.exp(sums[c] - total);\n\t\t\tweightedProbs[c]=Math.exp(weightedSums[c] - weightedTotal);...\n\t\t}\n\t\tdouble tmpValue=0.0;\n\t\tfor (int c=0; c < numClasses; c++){\n\t\t\ttmpValue+=confusionMatrix[observedLabel][c] * Math.exp(sums[c] - total);\n\t\t}\n\t\tvalue-=Math.log(tmpValue);\n\t}\n\tvalue+=prior.compute(x,derivative);\n}","Distance":0.3684210526315789,"Automatic":"@Override protected void calculate(double[] x){...\n\tvalue=0.0;\n\tdouble[] sums=new double[numClasses];\n\tdouble[] probs=new double[numClasses];\n\tdouble[] weightedProbs=new double[numClasses];\n\tfor (int d=0; d < data.length; d++){\n\t\tint[] features=data[d];\n\t\tint observedLabel=labels[d];...\n\t\tdouble total=ArrayMath.logSum(sums);\n\t\tdouble[] weightedSums=new double[numClasses];...\n\t\tdouble weightedTotal=ArrayMath.logSum(weightedSums);\n\t\tfor (int c=0; c < numClasses; c++){\n\t\t\tprobs[c]=Math.exp(sums[c] - total);\n\t\t\tweightedProbs[c]=Math.exp(weightedSums[c] - weightedTotal);...\n\t\t}\n\t\tdouble tmpValue=0.0;...\n\t\tvalue-=Math.log(tmpValue);\n\t}\n\tvalue+=prior.compute(x,derivative);\n}"},{"Origin":"@Override public Pair<GeneralDataset<L,F>,GeneralDataset<L,F>> split(double percentDev){\n\tint devSize=(int)(percentDev * size());\n\tint trainSize=size() - devSize;\n\tint[][] devData=new int[devSize][];\n\tint[] devLabels=new int[devSize];\n\tint[][] trainData=new int[trainSize][];\n\tint[] trainLabels=new int[trainSize];\n\tSystem.arraycopy(data,0,devData,0,devSize);\n\tSystem.arraycopy(labels,0,devLabels,0,devSize);\n\tSystem.arraycopy(data,devSize,trainData,0,trainSize);\n\tSystem.arraycopy(labels,devSize,trainLabels,0,trainSize);\n\tif(this instanceof WeightedDataset<?,?>){\n\t\tfloat[] trainWeights=new float[trainSize];\n\t\tfloat[] devWeights=new float[devSize];\n\t\tWeightedDataset<L,F> w=(WeightedDataset<L,F>)this;\n\t\tSystem.arraycopy(w.weights,0,devWeights,0,devSize);\n\t\tSystem.arraycopy(w.weights,devSize,trainWeights,0,trainSize);\n\t\tWeightedDataset<L,F> dev=new WeightedDataset<L,F>(labelIndex,devLabels,featureIndex,devData,devSize,devWeights);\n\t\tWeightedDataset<L,F> train=new WeightedDataset<L,F>(labelIndex,trainLabels,featureIndex,trainData,trainSize,trainWeights);\n\t\treturn new Pair<GeneralDataset<L,F>,GeneralDataset<L,F>>(train,dev);\n\t}\n\tDataset<L,F> dev=new Dataset<L,F>(labelIndex,devLabels,featureIndex,devData,devSize);\n\tDataset<L,F> train=new Dataset<L,F>(labelIndex,trainLabels,featureIndex,trainData,trainSize);\n\treturn new Pair<GeneralDataset<L,F>,GeneralDataset<L,F>>(train,dev);\n}","Original_Lines":23,"Target_Lines":17,"Manual":"@Override public Pair<GeneralDataset<L,F>,GeneralDataset<L,F>> split(double percentDev){\n\tint devSize=(int)(percentDev * size());\n\tint trainSize=size() - devSize;\n\tint[][] devData=new int[devSize][];\n\tint[] devLabels=new int[devSize];\n\tint[][] trainData=new int[trainSize][];\n\tint[] trainLabels=new int[trainSize];...\n\tif(this instanceof WeightedDataset<?,?>){\n\t\tfloat[] trainWeights=new float[trainSize];\n\t\tfloat[] devWeights=new float[devSize];\n\t\tWeightedDataset<L,F> w=(WeightedDataset<L,F>)this;...\n\t\tWeightedDataset<L,F> dev=new WeightedDataset<L,F>(labelIndex,devLabels,featureIndex,devData,devSize,devWeights);\n\t\tWeightedDataset<L,F> train=new WeightedDataset<L,F>(labelIndex,trainLabels,featureIndex,trainData,trainSize,trainWeights);\n\t\treturn new Pair<GeneralDataset<L,F>,GeneralDataset<L,F>>(train,dev);\n\t}\n\tDataset<L,F> dev=new Dataset<L,F>(labelIndex,devLabels,featureIndex,devData,devSize);\n\tDataset<L,F> train=new Dataset<L,F>(labelIndex,trainLabels,featureIndex,trainData,trainSize);\n\treturn new Pair<GeneralDataset<L,F>,GeneralDataset<L,F>>(train,dev);\n}","Distance":0,"Automatic":"@Override public Pair<GeneralDataset<L,F>,GeneralDataset<L,F>> split(double percentDev){\n\tint devSize=(int)(percentDev * size());\n\tint trainSize=size() - devSize;\n\tint[][] devData=new int[devSize][];\n\tint[] devLabels=new int[devSize];\n\tint[][] trainData=new int[trainSize][];\n\tint[] trainLabels=new int[trainSize];...\n\tif(this instanceof WeightedDataset<?,?>){\n\t\tfloat[] trainWeights=new float[trainSize];\n\t\tfloat[] devWeights=new float[devSize];\n\t\tWeightedDataset<L,F> w=(WeightedDataset<L,F>)this;...\n\t\tWeightedDataset<L,F> dev=new WeightedDataset<L,F>(labelIndex,devLabels,featureIndex,devData,devSize,devWeights);\n\t\tWeightedDataset<L,F> train=new WeightedDataset<L,F>(labelIndex,trainLabels,featureIndex,trainData,trainSize,trainWeights);\n\t\treturn new Pair<GeneralDataset<L,F>,GeneralDataset<L,F>>(train,dev);\n\t}\n\tDataset<L,F> dev=new Dataset<L,F>(labelIndex,devLabels,featureIndex,devData,devSize);\n\tDataset<L,F> train=new Dataset<L,F>(labelIndex,trainLabels,featureIndex,trainData,trainSize);\n\treturn new Pair<GeneralDataset<L,F>,GeneralDataset<L,F>>(train,dev);\n}"},{"Origin":"@Override public Pair<GeneralDataset<L,F>,GeneralDataset<L,F>> split(int start,int end){\n\tint devSize=end - start;\n\tint trainSize=size() - devSize;\n\tint[][] devData=new int[devSize][];\n\tint[] devLabels=new int[devSize];\n\tint[][] trainData=new int[trainSize][];\n\tint[] trainLabels=new int[trainSize];\n\tSystem.arraycopy(data,start,devData,0,devSize);\n\tSystem.arraycopy(labels,start,devLabels,0,devSize);\n\tSystem.arraycopy(data,0,trainData,0,start);\n\tSystem.arraycopy(data,end,trainData,start,size() - end);\n\tSystem.arraycopy(labels,0,trainLabels,0,start);\n\tSystem.arraycopy(labels,end,trainLabels,start,size() - end);\n\tif(this instanceof WeightedDataset<?,?>){\n\t\tfloat[] trainWeights=new float[trainSize];\n\t\tfloat[] devWeights=new float[devSize];\n\t\tWeightedDataset<L,F> w=(WeightedDataset<L,F>)this;\n\t\tSystem.arraycopy(w.weights,start,devWeights,0,devSize);\n\t\tSystem.arraycopy(w.weights,0,trainWeights,0,start);\n\t\tSystem.arraycopy(w.weights,end,trainWeights,start,size() - end);\n\t\tWeightedDataset<L,F> dev=new WeightedDataset<L,F>(labelIndex,devLabels,featureIndex,devData,devSize,devWeights);\n\t\tWeightedDataset<L,F> train=new WeightedDataset<L,F>(labelIndex,trainLabels,featureIndex,trainData,trainSize,trainWeights);\n\t\treturn new Pair<GeneralDataset<L,F>,GeneralDataset<L,F>>(train,dev);\n\t}\n\tDataset<L,F> dev=new Dataset<L,F>(labelIndex,devLabels,featureIndex,devData,devSize);\n\tDataset<L,F> train=new Dataset<L,F>(labelIndex,trainLabels,featureIndex,trainData,trainSize);\n\treturn new Pair<GeneralDataset<L,F>,GeneralDataset<L,F>>(train,dev);\n}","Original_Lines":26,"Target_Lines":17,"Manual":"@Override public Pair<GeneralDataset<L,F>,GeneralDataset<L,F>> split(int start,int end){\n\tint devSize=end - start;\n\tint trainSize=size() - devSize;\n\tint[][] devData=new int[devSize][];\n\tint[] devLabels=new int[devSize];\n\tint[][] trainData=new int[trainSize][];\n\tint[] trainLabels=new int[trainSize];...\n\tif(this instanceof WeightedDataset<?,?>){\n\t\tfloat[] trainWeights=new float[trainSize];\n\t\tfloat[] devWeights=new float[devSize];\n\t\tWeightedDataset<L,F> w=(WeightedDataset<L,F>)this;...\n\t\tWeightedDataset<L,F> dev=new WeightedDataset<L,F>(labelIndex,devLabels,featureIndex,devData,devSize,devWeights);\n\t\tWeightedDataset<L,F> train=new WeightedDataset<L,F>(labelIndex,trainLabels,featureIndex,trainData,trainSize,trainWeights);\n\t\treturn new Pair<GeneralDataset<L,F>,GeneralDataset<L,F>>(train,dev);\n\t}\n\tDataset<L,F> dev=new Dataset<L,F>(labelIndex,devLabels,featureIndex,devData,devSize);\n\tDataset<L,F> train=new Dataset<L,F>(labelIndex,trainLabels,featureIndex,trainData,trainSize);\n\treturn new Pair<GeneralDataset<L,F>,GeneralDataset<L,F>>(train,dev);\n}","Distance":0,"Automatic":"@Override public Pair<GeneralDataset<L,F>,GeneralDataset<L,F>> split(int start,int end){\n\tint devSize=end - start;\n\tint trainSize=size() - devSize;\n\tint[][] devData=new int[devSize][];\n\tint[] devLabels=new int[devSize];\n\tint[][] trainData=new int[trainSize][];\n\tint[] trainLabels=new int[trainSize];...\n\tif(this instanceof WeightedDataset<?,?>){\n\t\tfloat[] trainWeights=new float[trainSize];\n\t\tfloat[] devWeights=new float[devSize];\n\t\tWeightedDataset<L,F> w=(WeightedDataset<L,F>)this;...\n\t\tWeightedDataset<L,F> dev=new WeightedDataset<L,F>(labelIndex,devLabels,featureIndex,devData,devSize,devWeights);\n\t\tWeightedDataset<L,F> train=new WeightedDataset<L,F>(labelIndex,trainLabels,featureIndex,trainData,trainSize,trainWeights);\n\t\treturn new Pair<GeneralDataset<L,F>,GeneralDataset<L,F>>(train,dev);\n\t}\n\tDataset<L,F> dev=new Dataset<L,F>(labelIndex,devLabels,featureIndex,devData,devSize);\n\tDataset<L,F> train=new Dataset<L,F>(labelIndex,trainLabels,featureIndex,trainData,trainSize);\n\treturn new Pair<GeneralDataset<L,F>,GeneralDataset<L,F>>(train,dev);\n}"},{"Origin":"public double[] getInformationGains(){\n\tdata=trimToSize(data);\n\tlabels=trimToSize(labels);\n\tClassicCounter<F> featureCounter=new ClassicCounter<F>();\n\tClassicCounter<L> labelCounter=new ClassicCounter<L>();\n\tTwoDimensionalCounter<F,L> condCounter=new TwoDimensionalCounter<F,L>();\n\tfor (int i=0; i < labels.length; i++){\n\t\tlabelCounter.incrementCount(labelIndex.get(labels[i]));\n\t\tboolean[] doc=new boolean[featureIndex.size()];\n\t\tfor (int j=0; j < data[i].length; j++){\n\t\t\tdoc[data[i][j]]=true;\n\t\t}\n\t\tfor (int j=0; j < doc.length; j++){\n\t\t\tif(doc[j]){\n\t\t\t\tfeatureCounter.incrementCount(featureIndex.get(j));\n\t\t\t\tcondCounter.incrementCount(featureIndex.get(j),labelIndex.get(labels[i]),1.0);\n\t\t\t}\n\t\t}\n\t}\n\tdouble entropy=0.0;\n\tfor (int i=0; i < labelIndex.size(); i++){\n\t\tdouble labelCount=labelCounter.getCount(labelIndex.get(i));\n\t\tdouble p=labelCount / size();\n\t\tentropy-=p * (Math.log(p) / Math.log(2));\n\t}\n\tdouble[] ig=new double[featureIndex.size()];\n\tArrays.fill(ig,entropy);\n\tfor (int i=0; i < featureIndex.size(); i++){\n\t\tF feature=featureIndex.get(i);\n\t\tdouble featureCount=featureCounter.getCount(feature);\n\t\tdouble notFeatureCount=size() - featureCount;\n\t\tdouble pFeature=featureCount / size();\n\t\tdouble pNotFeature=(1.0 - pFeature);\n\t\tif(featureCount == 0){\n\t\t\tig[i]=0;\n\t\t\tcontinue;\n\t\t}\n\t\tif(notFeatureCount == 0){\n\t\t\tig[i]=0;\n\t\t\tcontinue;\n\t\t}\n\t\tdouble sumFeature=0.0;\n\t\tdouble sumNotFeature=0.0;\n\t\tfor (int j=0; j < labelIndex.size(); j++){\n\t\t\tL label=labelIndex.get(j);\n\t\t\tdouble featureLabelCount=condCounter.getCount(feature,label);\n\t\t\tdouble notFeatureLabelCount=size() - featureLabelCount;\n\t\t\tdouble p=featureLabelCount / featureCount;\n\t\t\tdouble pNot=notFeatureLabelCount / notFeatureCount;\n\t\t\tif(featureLabelCount != 0){\n\t\t\t\tsumFeature+=p * (Math.log(p) / Math.log(2));\n\t\t\t}\n\t\t\tif(notFeatureLabelCount != 0){\n\t\t\t\tsumNotFeature+=pNot * (Math.log(pNot) / Math.log(2));\n\t\t\t}\n\t\t}\n\t\tig[i]+=pFeature * sumFeature + pNotFeature * sumNotFeature;\n\t}\n\treturn ig;\n}","Original_Lines":58,"Target_Lines":47,"Manual":"public double[] getInformationGains(){\n\tdata=trimToSize(data);\n\tlabels=trimToSize(labels);\n\tClassicCounter<F> featureCounter=new ClassicCounter<F>();\n\tClassicCounter<L> labelCounter=new ClassicCounter<L>();\n\tTwoDimensionalCounter<F,L> condCounter=new TwoDimensionalCounter<F,L>();\n\tfor (int i=0; i < labels.length; i++){\n\t\tlabelCounter.incrementCount(labelIndex.get(labels[i]));\n\t\tboolean[] doc=new boolean[featureIndex.size()];...\n\t\tfor (int j=0; j < doc.length; j++){\n\t\t\tif(doc[j]){\n\t\t\t\tfeatureCounter.incrementCount(featureIndex.get(j));\n\t\t\t\tcondCounter.incrementCount(featureIndex.get(j),labelIndex.get(labels[i]),1.0);\n\t\t\t}\n\t\t}\n\t}\n\tdouble entropy=0.0;\n\tfor (int i=0; i < labelIndex.size(); i++){\n\t\tdouble labelCount=labelCounter.getCount(labelIndex.get(i));\n\t\tdouble p=labelCount / size();\n\t\tentropy-=p * (Math.log(p) / Math.log(2));\n\t}\n\tdouble[] ig=new double[featureIndex.size()];\n\tArrays.fill(ig,entropy);\n\tfor (int i=0; i < featureIndex.size(); i++){\n\t\tF feature=featureIndex.get(i);\n\t\tdouble featureCount=featureCounter.getCount(feature);\n\t\tdouble notFeatureCount=size() - featureCount;\n\t\tdouble pFeature=featureCount / size();\n\t\tdouble pNotFeature=(1.0 - pFeature);...\n\t\tdouble sumFeature=0.0;\n\t\tdouble sumNotFeature=0.0;\n\t\tfor (int j=0; j < labelIndex.size(); j++){\n\t\t\tL label=labelIndex.get(j);\n\t\t\tdouble featureLabelCount=condCounter.getCount(feature,label);\n\t\t\tdouble notFeatureLabelCount=size() - featureLabelCount;\n\t\t\tdouble p=featureLabelCount / featureCount;\n\t\t\tdouble pNot=notFeatureLabelCount / notFeatureCount;\n\t\t\tif(featureLabelCount != 0){\n\t\t\t\tsumFeature+=p * (Math.log(p) / Math.log(2));\n\t\t\t}\n\t\t\tif(notFeatureLabelCount != 0){\n\t\t\t\tsumNotFeature+=pNot * (Math.log(pNot) / Math.log(2));\n\t\t\t}\n\t\t}\n\t\tig[i]+=pFeature * sumFeature + pNotFeature * sumNotFeature;\n\t}\n\treturn ig;\n}","Distance":0.22727272727272727,"Automatic":"public double[] getInformationGains(){\n\tdata=trimToSize(data);\n\tlabels=trimToSize(labels);\n\tClassicCounter<F> featureCounter=new ClassicCounter<F>();\n\tClassicCounter<L> labelCounter=new ClassicCounter<L>();\n\tTwoDimensionalCounter<F,L> condCounter=new TwoDimensionalCounter<F,L>();\n\tfor (int i=0; i < labels.length; i++){\n\t\tlabelCounter.incrementCount(labelIndex.get(labels[i]));\n\t\tboolean[] doc=new boolean[featureIndex.size()];...\n\t}\n\tdouble entropy=0.0;\n\tfor (int i=0; i < labelIndex.size(); i++){\n\t\tdouble labelCount=labelCounter.getCount(labelIndex.get(i));\n\t\tdouble p=labelCount / size();\n\t\tentropy-=p * (Math.log(p) / Math.log(2));\n\t}\n\tdouble[] ig=new double[featureIndex.size()];\n\tArrays.fill(ig,entropy);\n\tfor (int i=0; i < featureIndex.size(); i++){\n\t\tF feature=featureIndex.get(i);\n\t\tdouble featureCount=featureCounter.getCount(feature);\n\t\tdouble notFeatureCount=size() - featureCount;\n\t\tdouble pFeature=featureCount / size();\n\t\tdouble pNotFeature=(1.0 - pFeature);\n\t\tif(featureCount == 0){\n\t\t\tig[i]=0;\n\t\t\tcontinue;\n\t\t}\n\t\tif(notFeatureCount == 0){...\n\t\t\tcontinue;\n\t\t}\n\t\tdouble sumFeature=0.0;\n\t\tdouble sumNotFeature=0.0;\n\t\tfor (int j=0; j < labelIndex.size(); j++){\n\t\t\tL label=labelIndex.get(j);\n\t\t\tdouble featureLabelCount=condCounter.getCount(feature,label);\n\t\t\tdouble notFeatureLabelCount=size() - featureLabelCount;\n\t\t\tdouble p=featureLabelCount / featureCount;\n\t\t\tdouble pNot=notFeatureLabelCount / notFeatureCount;\n\t\t\tif(featureLabelCount != 0){\n\t\t\t\tsumFeature+=p * (Math.log(p) / Math.log(2));\n\t\t\t}\n\t\t\tif(notFeatureLabelCount != 0){\n\t\t\t\tsumNotFeature+=pNot * (Math.log(pNot) / Math.log(2));\n\t\t\t}\n\t\t}...\n\t}\n\treturn ig;\n}"},{"Origin":"public void applyFeatureCountThreshold(int k){\n\tfloat[] counts=getFeatureCounts();\n\tIndex<F> newFeatureIndex=new HashIndex<F>();\n\tint[] featMap=new int[featureIndex.size()];\n\tfor (int i=0; i < featMap.length; i++){\n\t\tF feat=featureIndex.get(i);\n\t\tif(counts[i] >= k){\n\t\t\tint newIndex=newFeatureIndex.size();\n\t\t\tnewFeatureIndex.add(feat);\n\t\t\tfeatMap[i]=newIndex;\n\t\t}else {\n\t\t\tfeatMap[i]=-1;\n\t\t}\n\t}\n\tfeatureIndex=newFeatureIndex;\n\tfor (int i=0; i < size; i++){\n\t\tList<Integer> featList=new ArrayList<Integer>(data[i].length);\n\t\tfor (int j=0; j < data[i].length; j++){\n\t\t\tif(featMap[data[i][j]] >= 0){\n\t\t\t\tfeatList.add(featMap[data[i][j]]);\n\t\t\t}\n\t\t}\n\t\tdata[i]=new int[featList.size()];\n\t\tfor (int j=0; j < data[i].length; j++){\n\t\t\tdata[i][j]=featList.get(j);\n\t\t}\n\t}\n}","Original_Lines":26,"Target_Lines":14,"Manual":"public void applyFeatureCountThreshold(int k){\n\tfloat[] counts=getFeatureCounts();\n\tIndex<F> newFeatureIndex=new HashIndex<F>();\n\tint[] featMap=new int[featureIndex.size()];\n\tfor (int i=0; i < featMap.length; i++){\n\t\tF feat=featureIndex.get(i);\n\t\tif(counts[i] >= k){\n\t\t\tint newIndex=newFeatureIndex.size();\n\t\t\tnewFeatureIndex.add(feat);\n\t\t\tfeatMap[i]=newIndex;\n\t\t}else {\n\t\t\tfeatMap[i]=-1;\n\t\t}\n\t}\n\tfeatureIndex=newFeatureIndex;...\n}","Distance":0,"Automatic":"public void applyFeatureCountThreshold(int k){\n\tfloat[] counts=getFeatureCounts();\n\tIndex<F> newFeatureIndex=new HashIndex<F>();\n\tint[] featMap=new int[featureIndex.size()];\n\tfor (int i=0; i < featMap.length; i++){\n\t\tF feat=featureIndex.get(i);\n\t\tif(counts[i] >= k){\n\t\t\tint newIndex=newFeatureIndex.size();\n\t\t\tnewFeatureIndex.add(feat);\n\t\t\tfeatMap[i]=newIndex;\n\t\t}else {\n\t\t\tfeatMap[i]=-1;\n\t\t}\n\t}\n\tfeatureIndex=newFeatureIndex;...\n}"},{"Origin":"public void applyFeatureMaxCountThreshold(int k){\n\tfloat[] counts=getFeatureCounts();\n\tHashIndex<F> newFeatureIndex=new HashIndex<F>();\n\tint[] featMap=new int[featureIndex.size()];\n\tfor (int i=0; i < featMap.length; i++){\n\t\tF feat=featureIndex.get(i);\n\t\tif(counts[i] <= k){\n\t\t\tint newIndex=newFeatureIndex.size();\n\t\t\tnewFeatureIndex.add(feat);\n\t\t\tfeatMap[i]=newIndex;\n\t\t}else {\n\t\t\tfeatMap[i]=-1;\n\t\t}\n\t}\n\tfeatureIndex=newFeatureIndex;\n\tfor (int i=0; i < size; i++){\n\t\tList<Integer> featList=new ArrayList<Integer>(data[i].length);\n\t\tfor (int j=0; j < data[i].length; j++){\n\t\t\tif(featMap[data[i][j]] >= 0){\n\t\t\t\tfeatList.add(featMap[data[i][j]]);\n\t\t\t}\n\t\t}\n\t\tdata[i]=new int[featList.size()];\n\t\tfor (int j=0; j < data[i].length; j++){\n\t\t\tdata[i][j]=featList.get(j);\n\t\t}\n\t}\n}","Original_Lines":26,"Target_Lines":14,"Manual":"public void applyFeatureMaxCountThreshold(int k){\n\tfloat[] counts=getFeatureCounts();\n\tHashIndex<F> newFeatureIndex=new HashIndex<F>();\n\tint[] featMap=new int[featureIndex.size()];\n\tfor (int i=0; i < featMap.length; i++){\n\t\tF feat=featureIndex.get(i);\n\t\tif(counts[i] <= k){\n\t\t\tint newIndex=newFeatureIndex.size();\n\t\t\tnewFeatureIndex.add(feat);\n\t\t\tfeatMap[i]=newIndex;\n\t\t}else {\n\t\t\tfeatMap[i]=-1;\n\t\t}\n\t}\n\tfeatureIndex=newFeatureIndex;...\n}","Distance":0,"Automatic":"public void applyFeatureMaxCountThreshold(int k){\n\tfloat[] counts=getFeatureCounts();\n\tHashIndex<F> newFeatureIndex=new HashIndex<F>();\n\tint[] featMap=new int[featureIndex.size()];\n\tfor (int i=0; i < featMap.length; i++){\n\t\tF feat=featureIndex.get(i);\n\t\tif(counts[i] <= k){\n\t\t\tint newIndex=newFeatureIndex.size();\n\t\t\tnewFeatureIndex.add(feat);\n\t\t\tfeatMap[i]=newIndex;\n\t\t}else {\n\t\t\tfeatMap[i]=-1;\n\t\t}\n\t}\n\tfeatureIndex=newFeatureIndex;...\n}"},{"Origin":"private void computeEmpiricalStatistics(List<F> geFeatures){\n\tgeFeature2EmpiricalDist=new double[geFeatures.size()][labeledDataset.labelIndex.size()];\n\tgeFeature2DatumList=new ArrayList<List<Integer>>(geFeatures.size());\n\tMap<F,Integer> geFeatureMap=new HashMap<F,Integer>();\n\tSet<Integer> activeUnlabeledExamples=new HashSet<Integer>();\n\tfor (int n=0; n < geFeatures.size(); n++){\n\t\tF geFeature=geFeatures.get(n);\n\t\tgeFeature2DatumList.add(new ArrayList<Integer>());\n\t\tArrays.fill(geFeature2EmpiricalDist[n],0);\n\t\tgeFeatureMap.put(geFeature,n);\n\t}\n\tfor (int i=0; i < labeledDataset.size(); i++){\n\t\tDatum<L,F> datum=labeledDataset.getDatum(i);\n\t\tint labelID=labeledDataset.labelIndex.indexOf(datum.label());\n\t\tfor (F feature : datum.asFeatures()){\n\t\t\tif(geFeatureMap.containsKey(feature)){\n\t\t\t\tint geFnum=geFeatureMap.get(feature);\n\t\t\t\tgeFeature2EmpiricalDist[geFnum][labelID]++;\n\t\t\t}\n\t\t}\n\t}\n\tfor (int n=0; n < geFeatures.size(); n++){\n\t\tArrayMath.normalize(geFeature2EmpiricalDist[n]);\n\t\tsmoothDistribution(geFeature2EmpiricalDist[n]);\n\t}\n\tfor (int i=0; i < unlabeledDataList.size(); i++){\n\t\tDatum<L,F> datum=unlabeledDataList.get(i);\n\t\tfor (F feature : datum.asFeatures()){\n\t\t\tif(geFeatureMap.containsKey(feature)){\n\t\t\t\tint geFnum=geFeatureMap.get(feature);\n\t\t\t\tgeFeature2DatumList.get(geFnum).add(i);\n\t\t\t\tactiveUnlabeledExamples.add(i);\n\t\t\t}\n\t\t}\n\t}\n\tSystem.out.println(\"Number of active unlabeled examples:\" + activeUnlabeledExamples.size());\n}","Original_Lines":35,"Target_Lines":28,"Manual":"private void computeEmpiricalStatistics(List<F> geFeatures){\n\tgeFeature2EmpiricalDist=new double[geFeatures.size()][labeledDataset.labelIndex.size()];\n\tgeFeature2DatumList=new ArrayList<List<Integer>>(geFeatures.size());\n\tMap<F,Integer> geFeatureMap=new HashMap<F,Integer>();\n\tSet<Integer> activeUnlabeledExamples=new HashSet<Integer>();...\n\tfor (int i=0; i < labeledDataset.size(); i++){\n\t\tDatum<L,F> datum=labeledDataset.getDatum(i);\n\t\tint labelID=labeledDataset.labelIndex.indexOf(datum.label());\n\t\tfor (F feature : datum.asFeatures()){\n\t\t\tif(geFeatureMap.containsKey(feature)){\n\t\t\t\tint geFnum=geFeatureMap.get(feature);\n\t\t\t\tgeFeature2EmpiricalDist[geFnum][labelID]++;\n\t\t\t}\n\t\t}\n\t}\n\tfor (int n=0; n < geFeatures.size(); n++){\n\t\tArrayMath.normalize(geFeature2EmpiricalDist[n]);\n\t\tsmoothDistribution(geFeature2EmpiricalDist[n]);\n\t}\n\tfor (int i=0; i < unlabeledDataList.size(); i++){\n\t\tDatum<L,F> datum=unlabeledDataList.get(i);\n\t\tfor (F feature : datum.asFeatures()){\n\t\t\tif(geFeatureMap.containsKey(feature)){\n\t\t\t\tint geFnum=geFeatureMap.get(feature);\n\t\t\t\tgeFeature2DatumList.get(geFnum).add(i);\n\t\t\t\tactiveUnlabeledExamples.add(i);\n\t\t\t}\n\t\t}\n\t}...\n}","Distance":0.32,"Automatic":"private void computeEmpiricalStatistics(List<F> geFeatures){\n\tgeFeature2EmpiricalDist=new double[geFeatures.size()][labeledDataset.labelIndex.size()];\n\tgeFeature2DatumList=new ArrayList<List<Integer>>(geFeatures.size());\n\tMap<F,Integer> geFeatureMap=new HashMap<F,Integer>();\n\tSet<Integer> activeUnlabeledExamples=new HashSet<Integer>();\n\tfor (int n=0; n < geFeatures.size(); n++){\n\t\tF geFeature=geFeatures.get(n);\n\t\tgeFeature2DatumList.add(new ArrayList<Integer>());\n\t\tArrays.fill(geFeature2EmpiricalDist[n],0);...\n\t}\n\tfor (int i=0; i < labeledDataset.size(); i++){\n\t\tDatum<L,F> datum=labeledDataset.getDatum(i);\n\t\tint labelID=labeledDataset.labelIndex.indexOf(datum.label());\n\t\tfor (F feature : datum.asFeatures()){\n\t\t\tif(geFeatureMap.containsKey(feature)){\n\t\t\t\tint geFnum=geFeatureMap.get(feature);\n\t\t\t\tgeFeature2EmpiricalDist[geFnum][labelID]++;\n\t\t\t}\n\t\t}\n\t}...\n\tfor (int i=0; i < unlabeledDataList.size(); i++){\n\t\tDatum<L,F> datum=unlabeledDataList.get(i);\n\t\tfor (F feature : datum.asFeatures()){\n\t\t\tif(geFeatureMap.containsKey(feature)){\n\t\t\t\tint geFnum=geFeatureMap.get(feature);\n\t\t\t\tgeFeature2DatumList.get(geFnum).add(i);...\n\t\t\t}\n\t\t}\n\t}...\n}"},{"Origin":"public Classifier<String,String> loadFromFilename(String file){\n\ttry {\n\t\tFile tgtFile=new File(file);\n\t\tBufferedReader in=new BufferedReader(new FileReader(tgtFile));\n\t\tIndex<String> labelIndex=HashIndex.loadFromReader(in);\n\t\tIndex<String> featureIndex=HashIndex.loadFromReader(in);\n\t\tdouble[][] weights=new double[featureIndex.size()][labelIndex.size()];\n\t\tString line=in.readLine();\n\t\tint currLine=1;\n\t\twhile(line != null && line.length() > 0){\n\t\t\tString[] tuples=line.split(LinearClassifier.TEXT_SERIALIZATION_DELIMITER);\n\t\t\tif(tuples.length != 3){\n\t\t\t\tthrow new Exception(\"Error: incorrect number of tokens in weight specifier, line=\" + currLine + \" in file \"+ tgtFile.getAbsolutePath());\n\t\t\t}\n\t\t\tcurrLine++;\n\t\t\tint feature=Integer.valueOf(tuples[0]);\n\t\t\tint label=Integer.valueOf(tuples[1]);\n\t\t\tdouble value=Double.valueOf(tuples[2]);\n\t\t\tweights[feature][label]=value;\n\t\t\tline=in.readLine();\n\t\t}\n\t\tint numThresholds=Integer.valueOf(in.readLine());\n\t\tdouble[] thresholds=new double[numThresholds];\n\t\tint curr=0;\n\t\twhile((line=in.readLine()) != null){\n\t\t\tdouble tval=Double.valueOf(line.trim());\n\t\t\tthresholds[curr++]=tval;\n\t\t}\n\t\tin.close();\n\t\tLinearClassifier<String,String> classifier=new LinearClassifier<String,String>(weights,featureIndex,labelIndex);\n\t\treturn classifier;\n\t} catch (Exception e){\n\t\tSystem.err.println(\"Error in LinearClassifierFactory, loading from file=\" + file);\n\t\te.printStackTrace();\n\t\treturn null;\n\t} \n}","Original_Lines":35,"Target_Lines":29,"Manual":"public Classifier<String,String> loadFromFilename(String file){\n\ttry {\n\t\tFile tgtFile=new File(file);\n\t\tBufferedReader in=new BufferedReader(new FileReader(tgtFile));\n\t\tIndex<String> labelIndex=HashIndex.loadFromReader(in);\n\t\tIndex<String> featureIndex=HashIndex.loadFromReader(in);\n\t\tdouble[][] weights=new double[featureIndex.size()][labelIndex.size()];\n\t\tString line=in.readLine();\n\t\tint currLine=1;\n\t\twhile(line != null && line.length() > 0){\n\t\t\tString[] tuples=line.split(LinearClassifier.TEXT_SERIALIZATION_DELIMITER);...\n\t\t\tcurrLine++;\n\t\t\tint feature=Integer.valueOf(tuples[0]);\n\t\t\tint label=Integer.valueOf(tuples[1]);\n\t\t\tdouble value=Double.valueOf(tuples[2]);\n\t\t\tweights[feature][label]=value;\n\t\t\tline=in.readLine();\n\t\t}\n\t\tint numThresholds=Integer.valueOf(in.readLine());\n\t\tdouble[] thresholds=new double[numThresholds];\n\t\tint curr=0;\n\t\twhile((line=in.readLine()) != null){\n\t\t\tdouble tval=Double.valueOf(line.trim());\n\t\t\tthresholds[curr++]=tval;\n\t\t}\n\t\tin.close();\n\t\tLinearClassifier<String,String> classifier=new LinearClassifier<String,String>(weights,featureIndex,labelIndex);\n\t\treturn classifier;\n\t} catch (Exception e){...\n\t} \n}","Distance":0.038461538461538464,"Automatic":"public Classifier<String,String> loadFromFilename(String file){\n\ttry {\n\t\tFile tgtFile=new File(file);\n\t\tBufferedReader in=new BufferedReader(new FileReader(tgtFile));\n\t\tIndex<String> labelIndex=HashIndex.loadFromReader(in);\n\t\tIndex<String> featureIndex=HashIndex.loadFromReader(in);\n\t\tdouble[][] weights=new double[featureIndex.size()][labelIndex.size()];\n\t\tString line=in.readLine();\n\t\tint currLine=1;\n\t\twhile(line != null && line.length() > 0){\n\t\t\tString[] tuples=line.split(LinearClassifier.TEXT_SERIALIZATION_DELIMITER);...\n\t\t\tcurrLine++;\n\t\t\tint feature=Integer.valueOf(tuples[0]);\n\t\t\tint label=Integer.valueOf(tuples[1]);\n\t\t\tdouble value=Double.valueOf(tuples[2]);\n\t\t\tweights[feature][label]=value;\n\t\t\tline=in.readLine();\n\t\t}\n\t\tint numThresholds=Integer.valueOf(in.readLine());\n\t\tdouble[] thresholds=new double[numThresholds];\n\t\tint curr=0;\n\t\twhile((line=in.readLine()) != null){\n\t\t\tdouble tval=Double.valueOf(line.trim());\n\t\t\tthresholds[curr++]=tval;\n\t\t}\n\t\tin.close();\n\t\tLinearClassifier<String,String> classifier=new LinearClassifier<String,String>(weights,featureIndex,labelIndex);\n\t\treturn classifier;\n\t} catch (Exception e){...\n\t\treturn null;\n\t} \n}"},{"Origin":"protected void calculateStochasticAlgorithmicDifferentiation(double[] x,double[] v,int[] batch){\n\tSystem.err.print(\"*\");\n\tvalue=0.0;\n\tif(derivativeAD == null){\n\t\tderivativeAD=new DoubleAD[x.length];\n\t\tfor (int i=0; i < x.length; i++){\n\t\t\tderivativeAD[i]=new DoubleAD(0.0,0.0);\n\t\t}\n\t}\n\tif(xAD == null){\n\t\txAD=new DoubleAD[x.length];\n\t\tfor (int i=0; i < x.length; i++){\n\t\t\txAD[i]=new DoubleAD(x[i],v[i]);\n\t\t}\n\t}\n\tif(sums == null){\n\t\tsums=new DoubleAD[numClasses];\n\t\tfor (int c=0; c < numClasses; c++){\n\t\t\tsums[c]=new DoubleAD(0,0);\n\t\t}\n\t}\n\tif(probs == null){\n\t\tprobs=new DoubleAD[numClasses];\n\t\tfor (int c=0; c < numClasses; c++){\n\t\t\tprobs[c]=new DoubleAD(0,0);\n\t\t}\n\t}\n\tfor (int i=0; i < x.length; i++){\n\t\txAD[i].set(x[i],v[i]);\n\t\tderivativeAD[i].set(0.0,0.0);\n\t}\n\tfor (int d=0; d < batch.length; d++){\n\t\tint m=(curElement + d) % data.length;\n\t\tint[] features=data[m];\n\t\tfor (int c=0; c < numClasses; c++){\n\t\t\tsums[c].set(0.0,0.0);\n\t\t}\n\t\tfor (int c=0; c < numClasses; c++){\n\t\t\tfor (int f=0; f < features.length; f++){\n\t\t\t\tint i=indexOf(features[f],c);\n\t\t\t\tsums[c]=ADMath.plus(sums[c],xAD[i]);\n\t\t\t}\n\t\t}\n\t\tDoubleAD total=ADMath.logSum(sums);\n\t\tfor (int c=0; c < numClasses; c++){\n\t\t\tprobs[c]=ADMath.exp(ADMath.minus(sums[c],total));\n\t\t\tif(dataweights != null){\n\t\t\t\tprobs[c]=ADMath.multConst(probs[c],dataweights[d]);\n\t\t\t}\n\t\t\tfor (int f=0; f < features.length; f++){\n\t\t\t\tint i=indexOf(features[f],c);\n\t\t\t\tif(c == labels[m]){\n\t\t\t\t\tderivativeAD[i].plusEqualsConst(-1.0);\n\t\t\t\t}\n\t\t\t\tderivativeAD[i].plusEquals(probs[c]);\n\t\t\t}\n\t\t}\n\t\tdouble dV=sums[labels[m]].getval() - total.getval();\n\t\tif(dataweights != null){\n\t\t\tdV*=dataweights[d];\n\t\t}\n\t\tvalue-=dV;\n\t}\n\tdouble[] tmp=new double[x.length];\n\tfor (int i=0; i < x.length; i++){\n\t\ttmp[i]=derivativeAD[i].getval();\n\t\tderivativeAD[i].plusEquals(ADMath.multConst(xAD[i],batch.length / (data.length * prior.getSigma() * prior.getSigma())));\n\t\tderivative[i]=derivativeAD[i].getval();\n\t\tHdotV[i]=derivativeAD[i].getdot();\n\t}\n\tvalue+=((double)batch.length) / ((double)data.length) * prior.compute(x,tmp);\n}","Original_Lines":70,"Target_Lines":37,"Manual":"protected void calculateStochasticAlgorithmicDifferentiation(double[] x,double[] v,int[] batch){...\n\tfor (int d=0; d < batch.length; d++){\n\t\tint m=(curElement + d) % data.length;\n\t\tint[] features=data[m];...\n\t\tfor (int c=0; c < numClasses; c++){\n\t\t\tfor (int f=0; f < features.length; f++){\n\t\t\t\tint i=indexOf(features[f],c);\n\t\t\t\tsums[c]=ADMath.plus(sums[c],xAD[i]);\n\t\t\t}\n\t\t}\n\t\tDoubleAD total=ADMath.logSum(sums);\n\t\tfor (int c=0; c < numClasses; c++){\n\t\t\tprobs[c]=ADMath.exp(ADMath.minus(sums[c],total));\n\t\t\tif(dataweights != null){\n\t\t\t\tprobs[c]=ADMath.multConst(probs[c],dataweights[d]);\n\t\t\t}\n\t\t\tfor (int f=0; f < features.length; f++){\n\t\t\t\tint i=indexOf(features[f],c);\n\t\t\t\tif(c == labels[m]){\n\t\t\t\t\tderivativeAD[i].plusEqualsConst(-1.0);\n\t\t\t\t}\n\t\t\t\tderivativeAD[i].plusEquals(probs[c]);\n\t\t\t}\n\t\t}\n\t\tdouble dV=sums[labels[m]].getval() - total.getval();\n\t\tif(dataweights != null){\n\t\t\tdV*=dataweights[d];\n\t\t}\n\t\tvalue-=dV;\n\t}\n\tdouble[] tmp=new double[x.length];\n\tfor (int i=0; i < x.length; i++){\n\t\ttmp[i]=derivativeAD[i].getval();\n\t\tderivativeAD[i].plusEquals(ADMath.multConst(xAD[i],batch.length / (data.length * prior.getSigma() * prior.getSigma())));\n\t\tderivative[i]=derivativeAD[i].getval();\n\t\tHdotV[i]=derivativeAD[i].getdot();\n\t}\n\tvalue+=((double)batch.length) / ((double)data.length) * prior.compute(x,tmp);\n}","Distance":0.25,"Automatic":"protected void calculateStochasticAlgorithmicDifferentiation(double[] x,double[] v,int[] batch){...\n\tif(xAD == null){\n\t\txAD=new DoubleAD[x.length];...\n\t}\n\tif(sums == null){\n\t\tsums=new DoubleAD[numClasses];...\n\t}...\n\tfor (int d=0; d < batch.length; d++){\n\t\tint m=(curElement + d) % data.length;\n\t\tint[] features=data[m];...\n\t\tDoubleAD total=ADMath.logSum(sums);\n\t\tfor (int c=0; c < numClasses; c++){\n\t\t\tprobs[c]=ADMath.exp(ADMath.minus(sums[c],total));\n\t\t\tif(dataweights != null){\n\t\t\t\tprobs[c]=ADMath.multConst(probs[c],dataweights[d]);\n\t\t\t}\n\t\t\tfor (int f=0; f < features.length; f++){\n\t\t\t\tint i=indexOf(features[f],c);\n\t\t\t\tif(c == labels[m]){\n\t\t\t\t\tderivativeAD[i].plusEqualsConst(-1.0);\n\t\t\t\t}\n\t\t\t\tderivativeAD[i].plusEquals(probs[c]);\n\t\t\t}\n\t\t}\n\t\tdouble dV=sums[labels[m]].getval() - total.getval();\n\t\tif(dataweights != null){\n\t\t\tdV*=dataweights[d];\n\t\t}\n\t\tvalue-=dV;\n\t}\n\tdouble[] tmp=new double[x.length];\n\tfor (int i=0; i < x.length; i++){\n\t\ttmp[i]=derivativeAD[i].getval();\n\t\tderivativeAD[i].plusEquals(ADMath.multConst(xAD[i],batch.length / (data.length * prior.getSigma() * prior.getSigma())));\n\t\tderivative[i]=derivativeAD[i].getval();\n\t\tHdotV[i]=derivativeAD[i].getdot();\n\t}\n\tvalue+=((double)batch.length) / ((double)data.length) * prior.compute(x,tmp);\n}"},{"Origin":"public double compute(double[] x,double[] grad){\n\tdouble val=0.0;\n\tswitch (type){\n\tcase NULL:\n\t\treturn val;\n\tcase QUADRATIC:\n\t\tfor (int i=0; i < x.length; i++){\n\t\t\tval+=x[i] * x[i] / 2.0 / sigmaSq;\n\t\t\tgrad[i]+=x[i] / sigmaSq;\n\t\t}\n\t\treturn val;\n\tcase HUBER:\n\t\tfor (int i=0; i < x.length; i++){\n\t\t\tif(x[i] < -epsilon){\n\t\t\t\tval+=(-x[i] - epsilon / 2.0) / sigmaSq;\n\t\t\t\tgrad[i]+=-1.0 / sigmaSq;\n\t\t\t}else if(x[i] < epsilon){\n\t\t\t\tval+=x[i] * x[i] / 2.0 / epsilon / sigmaSq;\n\t\t\t\tgrad[i]+=x[i] / epsilon / sigmaSq;\n\t\t\t}else {\n\t\t\t\tval+=(x[i] - epsilon / 2.0) / sigmaSq;\n\t\t\t\tgrad[i]+=1.0 / sigmaSq;\n\t\t\t}\n\t\t}\n\t\treturn val;\n\tcase QUARTIC:\n\t\tfor (int i=0; i < x.length; i++){\n\t\t\tval+=(x[i] * x[i]) * (x[i] * x[i]) / 2.0 / sigmaQu;\n\t\t\tgrad[i]+=x[i] / sigmaQu;\n\t\t}\n\t\treturn val;\n\tcase ADAPT:\n\t\tdouble[] newX=ArrayMath.pairwiseSubtract(x,means);\n\t\tval+=otherPrior.compute(newX,grad);\n\t\treturn val;\n\tcase COSH:\n\t\tdouble norm=ArrayMath.norm_1(x) / sigmaSq;\n\t\tdouble d;\n\t\tif(norm > 30.0){\n\t\t\tval=norm - Math.log(2);\n\t\t\td=1.0 / sigmaSq;\n\t\t}else {\n\t\t\tval=Math.log(Math.cosh(norm));\n\t\t\td=(2 * (1 / (Math.exp(-2.0 * norm) + 1)) - 1.0) / sigmaSq;\n\t\t}\n\t\tfor (int i=0; i < x.length; i++){\n\t\t\tgrad[i]+=Math.signum(x[i]) * d;\n\t\t}\n\t\treturn val;\n\tcase MULTIPLE_QUADRATIC:\n\t\tfor (int i=0; i < x.length; i++){\n\t\t\tval+=x[i] * x[i] / 2.0 / sigmaSqM[i];\n\t\t\tgrad[i]+=x[i] / sigmaSqM[i];\n\t\t}\n\t\treturn val;\n\tdefault :\n\t\tthrow new RuntimeException(\"LogPrior.valueAt is undefined for prior of type \" + this);\n\t}\n}","Original_Lines":57,"Target_Lines":18,"Manual":"public double compute(double[] x,double[] grad){...\n\tswitch (type){\n\tcase NULL:\n\t\treturn val;\n\tcase QUADRATIC:...\n\t\treturn val;\n\tcase HUBER:...\n\t\treturn val;\n\tcase QUARTIC:...\n\t\treturn val;\n\tcase ADAPT:...\n\t\treturn val;\n\tcase COSH:...\n\t\treturn val;\n\tcase MULTIPLE_QUADRATIC:...\n\t\treturn val;\n\tdefault :\n\t\tthrow new RuntimeException(\"LogPrior.valueAt is undefined for prior of type \" + this);\n\t}\n}","Distance":0.21052631578947367,"Automatic":"public double compute(double[] x,double[] grad){\n\tdouble val=0.0;\n\tswitch (type){\n\tcase NULL:\n\t\treturn val;\n\tcase QUADRATIC:...\n\t\treturn val;\n\tcase HUBER:...\n\t\treturn val;\n\tcase QUARTIC:...\n\t\treturn val;\n\tcase ADAPT:...\n\tcase COSH:...\n\t\tdouble d;...\n\t\treturn val;\n\tcase MULTIPLE_QUADRATIC:...\n\tdefault :\n\t\tthrow new RuntimeException(\"LogPrior.valueAt is undefined for prior of type \" + this);\n\t}\n}"},{"Origin":"public void applyFeatureMaxCountThreshold(int k){\n\tfloat[] counts=getFeatureCounts();\n\tHashIndex<F> newFeatureIndex=new HashIndex<F>();\n\tint[] featMap=new int[featureIndex.size()];\n\tfor (int i=0; i < featMap.length; i++){\n\t\tF feat=featureIndex.get(i);\n\t\tif(counts[i] <= k){\n\t\t\tint newIndex=newFeatureIndex.size();\n\t\t\tnewFeatureIndex.add(feat);\n\t\t\tfeatMap[i]=newIndex;\n\t\t}else {\n\t\t\tfeatMap[i]=-1;\n\t\t}\n\t}\n\tfeatureIndex=newFeatureIndex;\n\tfor (int i=0; i < size; i++){\n\t\tList<Integer> featList=new ArrayList<Integer>(data[i].length);\n\t\tList<Double> valueList=new ArrayList<Double>(values[i].length);\n\t\tfor (int j=0; j < data[i].length; j++){\n\t\t\tif(featMap[data[i][j]] >= 0){\n\t\t\t\tfeatList.add(featMap[data[i][j]]);\n\t\t\t\tvalueList.add(values[i][j]);\n\t\t\t}\n\t\t}\n\t\tdata[i]=new int[featList.size()];\n\t\tvalues[i]=new double[valueList.size()];\n\t\tfor (int j=0; j < data[i].length; j++){\n\t\t\tdata[i][j]=featList.get(j);\n\t\t\tvalues[i][j]=valueList.get(j);\n\t\t}\n\t}\n}","Original_Lines":30,"Target_Lines":24,"Manual":"public void applyFeatureMaxCountThreshold(int k){\n\tfloat[] counts=getFeatureCounts();\n\tHashIndex<F> newFeatureIndex=new HashIndex<F>();\n\tint[] featMap=new int[featureIndex.size()];\n\tfor (int i=0; i < featMap.length; i++){\n\t\tF feat=featureIndex.get(i);\n\t\tif(counts[i] <= k){\n\t\t\tint newIndex=newFeatureIndex.size();\n\t\t\tnewFeatureIndex.add(feat);\n\t\t\tfeatMap[i]=newIndex;\n\t\t}else {\n\t\t\tfeatMap[i]=-1;\n\t\t}\n\t}\n\tfeatureIndex=newFeatureIndex;\n\tfor (int i=0; i < size; i++){\n\t\tList<Integer> featList=new ArrayList<Integer>(data[i].length);\n\t\tList<Double> valueList=new ArrayList<Double>(values[i].length);\n\t\tfor (int j=0; j < data[i].length; j++){\n\t\t\tif(featMap[data[i][j]] >= 0){\n\t\t\t\tfeatList.add(featMap[data[i][j]]);\n\t\t\t\tvalueList.add(values[i][j]);\n\t\t\t}\n\t\t}...\n\t}\n}","Distance":0.391304347826087,"Automatic":"public void applyFeatureMaxCountThreshold(int k){\n\tfloat[] counts=getFeatureCounts();\n\tHashIndex<F> newFeatureIndex=new HashIndex<F>();\n\tint[] featMap=new int[featureIndex.size()];\n\tfor (int i=0; i < featMap.length; i++){\n\t\tF feat=featureIndex.get(i);\n\t\tif(counts[i] <= k){\n\t\t\tint newIndex=newFeatureIndex.size();\n\t\t\tnewFeatureIndex.add(feat);\n\t\t\tfeatMap[i]=newIndex;\n\t\t}else {\n\t\t\tfeatMap[i]=-1;\n\t\t}\n\t}\n\tfeatureIndex=newFeatureIndex;\n\tfor (int i=0; i < size; i++){\n\t\tList<Integer> featList=new ArrayList<Integer>(data[i].length);\n\t\tList<Double> valueList=new ArrayList<Double>(values[i].length);...\n\t\tdata[i]=new int[featList.size()];\n\t\tvalues[i]=new double[valueList.size()];\n\t\tfor (int j=0; j < data[i].length; j++){\n\t\t\tdata[i][j]=featList.get(j);\n\t\t\tvalues[i][j]=valueList.get(j);\n\t\t}\n\t}\n}"},{"Origin":"@Override public void init(ServletConfig config) throws ServletException {\n\tsuper.init(config);\n\t_config=config;\n\t_appengine=isGAE(config);\n\t_name=System.getProperty(NAME,\"butterfly\");\n\t_context=config.getServletContext();\n\t_context.setAttribute(NAME,_name);\n\t_context.setAttribute(APPENGINE,_appengine);\n\t_contextDir=new File(_context.getRealPath(\"/\"));\n\t_webInfDir=new File(_contextDir,\"WEB-INF\");\n\t_properties=new ExtendedProperties();\n\t_mounter=new ButterflyMounter();\n\tString props=System.getProperty(\"butterfly.properties\");\n\tFile butterflyProperties=(props == null) ? new File(_webInfDir,\"butterfly.properties\") : new File(props);\n\tBufferedInputStream is=null;\n\ttry {\n\t\tis=new BufferedInputStream(new FileInputStream(butterflyProperties));\n\t\t_properties.load(is);\n\t} catch (FileNotFoundException e){\n\t\tthrow new ServletException(\"Could not find butterfly properties file\",e);\n\t} catch (IOException e){\n\t\tthrow new ServletException(\"Could not read butterfly properties file\",e);\n\t} finally {\n\t\ttry {\n\t\t\tis.close();\n\t\t} catch (Exception e){\n\t\t} \n\t} \n\tString includes=_properties.getString(\"butterfly.includes\");\n\tif(includes != null){\n\t\tfor (String prop : includes.split(\",\")){\n\t\t\tFile prop_file=(prop.startsWith(\"/\")) ? new File(prop) : new File(_webInfDir,prop);\n\t\t\ttry {\n\t\t\t\tis=new BufferedInputStream(new FileInputStream(prop_file));\n\t\t\t\tExtendedProperties p=new ExtendedProperties();\n\t\t\t\tp.load(is);\n\t\t\t\t_properties.combine(p);\n\t\t\t} catch (Exception e){\n\t\t\t} finally {\n\t\t\t\ttry {\n\t\t\t\t\tis.close();\n\t\t\t\t} catch (Exception e){\n\t\t\t\t} \n\t\t\t} \n\t\t}\n\t}\n\tProperties systemProperties=System.getProperties();\n\tfor (Iterator<Object> i=systemProperties.keySet().iterator(); i.hasNext(); ){\n\t\tString key=(String)i.next();\n\t\tString value=systemProperties.getProperty(key);\n\t\t_properties.setProperty(key,value);\n\t}\n\t_default_mountpoint=_properties.getString(DEFAULT_MOUNTPOINT,\"/modules\");\n\t_ignores=_properties.getString(MODULES_IGNORE,\"\").split(\",\");\n\t_autoreload=_properties.getBoolean(AUTORELOAD,false);\n\tif(!_appengine){\n\t\tString log4j=System.getProperty(\"butterfly.log4j\");\n\t\tFile logProperties=(log4j == null) ? new File(_webInfDir,\"log4j.properties\") : new File(log4j);\n\t\tif(logProperties.exists()){\n\t\t\tif(_autoreload){\n\t\t\t\tPropertyConfigurator.configureAndWatch(logProperties.getAbsolutePath(),watcherDelay);\n\t\t\t}else {\n\t\t\t\tPropertyConfigurator.configure(logProperties.getAbsolutePath());\n\t\t\t}\n\t\t}\n\t}\n\t_logger=LoggerFactory.getLogger(_name);\n\t_logger.info(\"Starting {} ...\",_name);\n\t_logger.info(\"Properties loaded from {}\",butterflyProperties);\n\tif(_autoreload)\n\t\t_logger.info(\"Autoreloading is enabled\");\n\tif(_appengine)\n\t\t_logger.info(\"Running in Google App Engine\");\n\t_logger.debug(\"> init\");\n\t_logger.debug(\"> initialize classloader\");\n\ttry {\n\t\t_classLoader=AccessController.doPrivileged(new PrivilegedAction<ButterflyClassLoader>(){\n  public ButterflyClassLoader run(){\n    return new ButterflyClassLoader(this.getClass().getClassLoader());\n  }\n}\n);\n\t\tThread.currentThread().setContextClassLoader(_classLoader);\n\t\t_classLoader.watch(butterflyProperties);\n\t\tcontextFactory=new ButterflyContextFactory();\n\t\tcontextFactory.initApplicationClassLoader(_classLoader);\n\t\tContextFactory.initGlobal(contextFactory);\n\t\tif(_autoreload && !_appengine){\n\t\t\t_timer=new Timer(true);\n\t\t\tTimerTask classloaderWatcher=_classLoader.getClassLoaderWatcher(new Trigger(_contextDir));\n\t\t\t_timer.schedule(classloaderWatcher,watcherDelay,watcherDelay);\n\t\t}\n\t} catch (Exception e){\n\t\tthrow new ServletException(\"Failed to load butterfly classloader\",e);\n\t} \n\t_logger.debug(\"< initialize classloader\");\n\tif(_autoreload && !_appengine){\n\t\t_logger.debug(\"> initialize script watcher\");\n\t\t_scriptWatcher=new ButterflyScriptWatcher();\n\t\t_timer.schedule(_scriptWatcher,watcherDelay,watcherDelay);\n\t\t_logger.debug(\"< initialize script watcher\");\n\t}\n\tthis.configure();\n\t_logger.debug(\"< init\");\n}","Original_Lines":103,"Target_Lines":80,"Manual":"@Override public void init(ServletConfig config) throws ServletException {\n\tsuper.init(config);\n\t_config=config;\n\t_appengine=isGAE(config);\n\t_name=System.getProperty(NAME,\"butterfly\");\n\t_context=config.getServletContext();\n\t_context.setAttribute(NAME,_name);\n\t_context.setAttribute(APPENGINE,_appengine);\n\t_contextDir=new File(_context.getRealPath(\"/\"));\n\t_webInfDir=new File(_contextDir,\"WEB-INF\");\n\t_properties=new ExtendedProperties();\n\t_mounter=new ButterflyMounter();\n\tString props=System.getProperty(\"butterfly.properties\");\n\tFile butterflyProperties=(props == null) ? new File(_webInfDir,\"butterfly.properties\") : new File(props);\n\tBufferedInputStream is=null;\n\ttry {\n\t\tis=new BufferedInputStream(new FileInputStream(butterflyProperties));\n\t\t_properties.load(is);\n\t} catch (FileNotFoundException e){...\n\t} catch (IOException e){...\n\t} finally {...\n\t} \n\tString includes=_properties.getString(\"butterfly.includes\");\n\tif(includes != null){\n\t\tfor (String prop : includes.split(\",\")){\n\t\t\tFile prop_file=(prop.startsWith(\"/\")) ? new File(prop) : new File(_webInfDir,prop);\n\t\t\ttry {\n\t\t\t\tis=new BufferedInputStream(new FileInputStream(prop_file));\n\t\t\t\tExtendedProperties p=new ExtendedProperties();\n\t\t\t\tp.load(is);\n\t\t\t\t_properties.combine(p);\n\t\t\t} catch (Exception e){\n\t\t\t} finally {...\n\t\t\t} \n\t\t}\n\t}\n\tProperties systemProperties=System.getProperties();\n\tfor (Iterator<Object> i=systemProperties.keySet().iterator(); i.hasNext(); ){\n\t\tString key=(String)i.next();\n\t\tString value=systemProperties.getProperty(key);\n\t\t_properties.setProperty(key,value);\n\t}\n\t_default_mountpoint=_properties.getString(DEFAULT_MOUNTPOINT,\"/modules\");\n\t_ignores=_properties.getString(MODULES_IGNORE,\"\").split(\",\");\n\t_autoreload=_properties.getBoolean(AUTORELOAD,false);\n\tif(!_appengine){\n\t\tString log4j=System.getProperty(\"butterfly.log4j\");\n\t\tFile logProperties=(log4j == null) ? new File(_webInfDir,\"log4j.properties\") : new File(log4j);\n\t\tif(logProperties.exists()){\n\t\t\tif(_autoreload){\n\t\t\t\tPropertyConfigurator.configureAndWatch(logProperties.getAbsolutePath(),watcherDelay);\n\t\t\t}else {\n\t\t\t\tPropertyConfigurator.configure(logProperties.getAbsolutePath());\n\t\t\t}\n\t\t}\n\t}\n\t_logger=LoggerFactory.getLogger(_name);...\n\ttry {\n\t\t_classLoader=AccessController.doPrivileged(new PrivilegedAction<ButterflyClassLoader>(){\n  public ButterflyClassLoader run(){\n    return new ButterflyClassLoader(this.getClass().getClassLoader());\n  }\n}\n);\n\t\tThread.currentThread().setContextClassLoader(_classLoader);\n\t\t_classLoader.watch(butterflyProperties);\n\t\tcontextFactory=new ButterflyContextFactory();\n\t\tcontextFactory.initApplicationClassLoader(_classLoader);\n\t\tContextFactory.initGlobal(contextFactory);\n\t\tif(_autoreload && !_appengine){\n\t\t\t_timer=new Timer(true);\n\t\t\tTimerTask classloaderWatcher=_classLoader.getClassLoaderWatcher(new Trigger(_contextDir));\n\t\t\t_timer.schedule(classloaderWatcher,watcherDelay,watcherDelay);\n\t\t}\n\t} catch (Exception e){...\n\t} ...\n\tif(_autoreload && !_appengine){...\n\t\t_scriptWatcher=new ButterflyScriptWatcher();\n\t\t_timer.schedule(_scriptWatcher,watcherDelay,watcherDelay);...\n\t}\n\tthis.configure();...\n}","Distance":0.19402985074626866,"Automatic":"@Override public void init(ServletConfig config) throws ServletException {\n\tsuper.init(config);\n\t_config=config;\n\t_appengine=isGAE(config);\n\t_name=System.getProperty(NAME,\"butterfly\");\n\t_context=config.getServletContext();\n\t_context.setAttribute(NAME,_name);\n\t_context.setAttribute(APPENGINE,_appengine);\n\t_contextDir=new File(_context.getRealPath(\"/\"));\n\t_webInfDir=new File(_contextDir,\"WEB-INF\");\n\t_properties=new ExtendedProperties();\n\t_mounter=new ButterflyMounter();\n\tString props=System.getProperty(\"butterfly.properties\");\n\tFile butterflyProperties=(props == null) ? new File(_webInfDir,\"butterfly.properties\") : new File(props);\n\tBufferedInputStream is=null;\n\ttry {\n\t\tis=new BufferedInputStream(new FileInputStream(butterflyProperties));\n\t\t_properties.load(is);\n\t} catch (FileNotFoundException e){\n\t\tthrow new ServletException(\"Could not find butterfly properties file\",e);\n\t} catch (IOException e){\n\t\tthrow new ServletException(\"Could not read butterfly properties file\",e);\n\t} finally {\n\t\ttry {\n\t\t\tis.close();\n\t\t} catch (Exception e){\n\t\t} \n\t} \n\tString includes=_properties.getString(\"butterfly.includes\");\n\tif(includes != null){\n\t\tfor (String prop : includes.split(\",\")){\n\t\t\tFile prop_file=(prop.startsWith(\"/\")) ? new File(prop) : new File(_webInfDir,prop);\n\t\t\ttry {\n\t\t\t\tis=new BufferedInputStream(new FileInputStream(prop_file));\n\t\t\t\tExtendedProperties p=new ExtendedProperties();\n\t\t\t\tp.load(is);\n\t\t\t\t_properties.combine(p);\n\t\t\t} catch (Exception e){\n\t\t\t} finally {...\n\t\t\t} \n\t\t}\n\t}\n\tProperties systemProperties=System.getProperties();\n\tfor (Iterator<Object> i=systemProperties.keySet().iterator(); i.hasNext(); ){\n\t\tString key=(String)i.next();\n\t\tString value=systemProperties.getProperty(key);\n\t\t_properties.setProperty(key,value);\n\t}\n\t_default_mountpoint=_properties.getString(DEFAULT_MOUNTPOINT,\"/modules\");\n\t_ignores=_properties.getString(MODULES_IGNORE,\"\").split(\",\");\n\t_autoreload=_properties.getBoolean(AUTORELOAD,false);\n\tif(!_appengine){\n\t\tString log4j=System.getProperty(\"butterfly.log4j\");\n\t\tFile logProperties=(log4j == null) ? new File(_webInfDir,\"log4j.properties\") : new File(log4j);\n\t\tif(logProperties.exists()){\n\t\t\tif(_autoreload){\n\t\t\t\tPropertyConfigurator.configureAndWatch(logProperties.getAbsolutePath(),watcherDelay);\n\t\t\t}else {\n\t\t\t\tPropertyConfigurator.configure(logProperties.getAbsolutePath());\n\t\t\t}\n\t\t}\n\t}...\n\tif(_autoreload)\n\t\t_logger.info(\"Autoreloading is enabled\");\n\tif(_appengine)\n\t\t_logger.info(\"Running in Google App Engine\");...\n\ttry {...\n\t\tThread.currentThread().setContextClassLoader(_classLoader);\n\t\t_classLoader.watch(butterflyProperties);\n\t\tcontextFactory=new ButterflyContextFactory();\n\t\tcontextFactory.initApplicationClassLoader(_classLoader);\n\t\tContextFactory.initGlobal(contextFactory);\n\t\tif(_autoreload && !_appengine){\n\t\t\t_timer=new Timer(true);\n\t\t\tTimerTask classloaderWatcher=_classLoader.getClassLoaderWatcher(new Trigger(_contextDir));\n\t\t\t_timer.schedule(classloaderWatcher,watcherDelay,watcherDelay);\n\t\t}\n\t} catch (Exception e){...\n\t} ...\n\tif(_autoreload && !_appengine){\n\t\t_logger.debug(\"> initialize script watcher\");\n\t\t_scriptWatcher=new ButterflyScriptWatcher();\n\t\t_timer.schedule(_scriptWatcher,watcherDelay,watcherDelay);\n\t\t_logger.debug(\"< initialize script watcher\");\n\t}...\n}"},{"Origin":"@SuppressWarnings(\"unchecked\") public void configure(){\n\t_logger.debug(\"> configure\");\n\t_logger.info(\"> process properties\");\n\ttry {\n\t\tString homePath=_properties.getString(HOME);\n\t\tif(homePath == null){\n\t\t\t_homeDir=_contextDir;\n\t\t}else {\n\t\t\t_homeDir=new File(homePath);\n\t\t}\n\t\t_logger.info(\"Butterfly home: {}\",_homeDir);\n\t\tIterator<String> i=_properties.getKeys(ZONE);\n\t\twhile(i.hasNext()){\n\t\t\tString zone=i.next();\n\t\t\tString path=_properties.getString(zone);\n\t\t\tzone=zone.substring(ZONE.length() + 1);\n\t\t\t_logger.info(\"Zone path: [{}] -> {}\",zone,path);\n\t\t\t_mounter.registerZone(zone,path);\n\t\t}\n\t\tString defaultZone=_properties.getString(DEFAULT_ZONE);\n\t\tif(defaultZone != null){\n\t\t\t_logger.info(\"Default zone is: '{}'\",defaultZone);\n\t\t\t_mounter.setDefaultZone(defaultZone);\n\t\t}else {\n\t\t\tString baseURL=_properties.getString(BASE_URL,\"/\");\n\t\t\t_mounter.registerZone(MAIN_ZONE,baseURL);\n\t\t\t_mounter.setDefaultZone(MAIN_ZONE);\n\t\t}\n\t\tString language=_properties.getString(\"butterfly.locale.language\");\n\t\tString country=_properties.getString(\"butterfly.locale.country\");\n\t\tString variant=_properties.getString(\"butterfly.locale.variant\");\n\t\tif(language != null){\n\t\t\tif(country != null){\n\t\t\t\tif(variant != null){\n\t\t\t\t\tLocale.setDefault(new Locale(language,country,variant));\n\t\t\t\t}else {\n\t\t\t\t\tLocale.setDefault(new Locale(language,country));\n\t\t\t\t}\n\t\t\t}else {\n\t\t\t\tLocale.setDefault(new Locale(language));\n\t\t\t}\n\t\t}\n\t\tString timeZone=_properties.getString(\"butterfly.timeZone\");\n\t\tif(timeZone != null){\n\t\t\tTimeZone.setDefault(TimeZone.getTimeZone(timeZone));\n\t\t}\n\t\t_routingCookieMaxAge=_properties.getInt(\"butterfly.routing.cookie.maxage\",-1);\n\t} catch (Exception e){\n\t\t_configurationException=new Exception(\"Failed to load butterfly properties\",e);\n\t} \n\t_logger.info(\"< process properties\");\n\t_logger.info(\"> load modules\");\n\tList<String> paths=_properties.getList(MODULES_PATH);\n\tfor (String path : paths){\n\t\tfindModulesIn(absolutize(_homeDir,path.trim()));\n\t}\n\tString servlet_paths=this._config.getInitParameter(MODULES_PATH);\n\tif(servlet_paths != null){\n\t\tfor (String path : servlet_paths.split(\",\")){\n\t\t\tfindModulesIn(absolutize(_homeDir,path.trim()));\n\t\t}\n\t}\n\t_logger.info(\"< load modules\");\n\t_logger.info(\"> create modules\");\n\tfor (String name : _moduleProperties.keySet()){\n\t\tcreateModule(name);\n\t}\n\t_logger.info(\"< create modules\");\n\t_logger.info(\"> load module wirings\");\n\tExtendedProperties wirings=new ExtendedProperties();\n\ttry {\n\t\tFile moduleWirings=absolutize(_homeDir,_properties.getString(\"butterfly.modules.wirings\",\"WEB-INF/modules.properties\"));\n\t\t_logger.info(\"Loaded module wirings from: {}\",moduleWirings);\n\t\t_classLoader.watch(moduleWirings);\n\t\tFileInputStream fis=new FileInputStream(moduleWirings);\n\t\twirings.load(fis);\n\t\tfis.close();\n\t} catch (Exception e){\n\t\t_configurationException=new Exception(\"Failed to load module wirings\",e);\n\t} \n\t_logger.info(\"< load module wirings\");\n\t_logger.info(\"> wire modules\");\n\ttry {\n\t\twireModules(wirings);\n\t} catch (Exception e){\n\t\t_configurationException=new Exception(\"Failed to wire modules\",e);\n\t} \n\t_logger.info(\"< wire modules\");\n\t_logger.info(\"> configure modules\");\n\ttry {\n\t\tconfigureModules();\n\t} catch (Exception e){\n\t\t_configurationException=new Exception(\"Failed to configure modules\",e);\n\t} \n\t_logger.info(\"< configure modules\");\n\t_logger.info(\"> initialize modules\");\n\tSet<String> initialized=new HashSet<String>();\n\tSet<String> initializing=new HashSet<String>();\n\tfor (String name : _modulesByName.keySet()){\n\t\tinitializeModule(name,initialized,initializing);\n\t}\n\t_logger.info(\"< initialize modules\");\n\t_configured=true;\n\t_logger.debug(\"< configure\");\n}","Original_Lines":103,"Target_Lines":69,"Manual":"@SuppressWarnings(\"unchecked\") public void configure(){...\n\ttry {...\n\t\tIterator<String> i=_properties.getKeys(ZONE);\n\t\twhile(i.hasNext()){...\n\t\t\t_mounter.registerZone(zone,path);\n\t\t}\n\t\tString defaultZone=_properties.getString(DEFAULT_ZONE);\n\t\tif(defaultZone != null){...\n\t\t\t_mounter.setDefaultZone(defaultZone);\n\t\t}else {\n\t\t\tString baseURL=_properties.getString(BASE_URL,\"/\");\n\t\t\t_mounter.registerZone(MAIN_ZONE,baseURL);\n\t\t\t_mounter.setDefaultZone(MAIN_ZONE);\n\t\t}\n\t\tString language=_properties.getString(\"butterfly.locale.language\");\n\t\tString country=_properties.getString(\"butterfly.locale.country\");\n\t\tString variant=_properties.getString(\"butterfly.locale.variant\");\n\t\tif(language != null){\n\t\t\tif(country != null){\n\t\t\t\tif(variant != null){\n\t\t\t\t\tLocale.setDefault(new Locale(language,country,variant));\n\t\t\t\t}else {\n\t\t\t\t\tLocale.setDefault(new Locale(language,country));\n\t\t\t\t}\n\t\t\t}else {\n\t\t\t\tLocale.setDefault(new Locale(language));\n\t\t\t}\n\t\t}\n\t\tString timeZone=_properties.getString(\"butterfly.timeZone\");\n\t\tif(timeZone != null){\n\t\t\tTimeZone.setDefault(TimeZone.getTimeZone(timeZone));\n\t\t}...\n\t} catch (Exception e){...\n\t} ...\n\tList<String> paths=_properties.getList(MODULES_PATH);\n\tfor (String path : paths){\n\t\tfindModulesIn(absolutize(_homeDir,path.trim()));\n\t}\n\tString servlet_paths=this._config.getInitParameter(MODULES_PATH);\n\tif(servlet_paths != null){\n\t\tfor (String path : servlet_paths.split(\",\")){\n\t\t\tfindModulesIn(absolutize(_homeDir,path.trim()));\n\t\t}\n\t}...\n\tfor (String name : _moduleProperties.keySet()){\n\t\tcreateModule(name);\n\t}...\n\tExtendedProperties wirings=new ExtendedProperties();\n\ttry {\n\t\tFile moduleWirings=absolutize(_homeDir,_properties.getString(\"butterfly.modules.wirings\",\"WEB-INF/modules.properties\"));...\n\t\t_classLoader.watch(moduleWirings);\n\t\tFileInputStream fis=new FileInputStream(moduleWirings);\n\t\twirings.load(fis);\n\t\tfis.close();\n\t} catch (Exception e){...\n\t} ...\n\ttry {\n\t\twireModules(wirings);\n\t} catch (Exception e){...\n\t} ...\n\ttry {\n\t\tconfigureModules();\n\t} catch (Exception e){...\n\t} ...\n\tSet<String> initialized=new HashSet<String>();\n\tSet<String> initializing=new HashSet<String>();\n\tfor (String name : _modulesByName.keySet()){\n\t\tinitializeModule(name,initialized,initializing);\n\t}...\n\t_configured=true;...\n}","Distance":0.21428571428571427,"Automatic":"@SuppressWarnings(\"unchecked\") public void configure(){...\n\ttry {\n\t\tString homePath=_properties.getString(HOME);\n\t\tif(homePath == null){\n\t\t\t_homeDir=_contextDir;\n\t\t}else {\n\t\t\t_homeDir=new File(homePath);\n\t\t}\n\t\t_logger.info(\"Butterfly home: {}\",_homeDir);\n\t\tIterator<String> i=_properties.getKeys(ZONE);\n\t\twhile(i.hasNext()){\n\t\t\tString zone=i.next();\n\t\t\tString path=_properties.getString(zone);\n\t\t\tzone=zone.substring(ZONE.length() + 1);...\n\t\t\t_mounter.registerZone(zone,path);\n\t\t}\n\t\tString defaultZone=_properties.getString(DEFAULT_ZONE);\n\t\tif(defaultZone != null){...\n\t\t\t_mounter.setDefaultZone(defaultZone);\n\t\t}else {\n\t\t\tString baseURL=_properties.getString(BASE_URL,\"/\");\n\t\t\t_mounter.registerZone(MAIN_ZONE,baseURL);\n\t\t\t_mounter.setDefaultZone(MAIN_ZONE);\n\t\t}\n\t\tString language=_properties.getString(\"butterfly.locale.language\");\n\t\tString country=_properties.getString(\"butterfly.locale.country\");\n\t\tString variant=_properties.getString(\"butterfly.locale.variant\");\n\t\tif(language != null){\n\t\t\tif(country != null){\n\t\t\t\tif(variant != null){\n\t\t\t\t\tLocale.setDefault(new Locale(language,country,variant));\n\t\t\t\t}else {\n\t\t\t\t\tLocale.setDefault(new Locale(language,country));\n\t\t\t\t}\n\t\t\t}else {\n\t\t\t\tLocale.setDefault(new Locale(language));\n\t\t\t}\n\t\t}\n\t\tString timeZone=_properties.getString(\"butterfly.timeZone\");\n\t\tif(timeZone != null){\n\t\t\tTimeZone.setDefault(TimeZone.getTimeZone(timeZone));\n\t\t}\n\t\t_routingCookieMaxAge=_properties.getInt(\"butterfly.routing.cookie.maxage\",-1);\n\t} catch (Exception e){...\n\t} ...\n\tList<String> paths=_properties.getList(MODULES_PATH);\n\tfor (String path : paths){\n\t\tfindModulesIn(absolutize(_homeDir,path.trim()));\n\t}\n\tString servlet_paths=this._config.getInitParameter(MODULES_PATH);\n\tif(servlet_paths != null){\n\t\tfor (String path : servlet_paths.split(\",\")){\n\t\t\tfindModulesIn(absolutize(_homeDir,path.trim()));\n\t\t}\n\t}...\n\tfor (String name : _moduleProperties.keySet()){\n\t\tcreateModule(name);\n\t}...\n\tExtendedProperties wirings=new ExtendedProperties();\n\ttry {\n\t\tFile moduleWirings=absolutize(_homeDir,_properties.getString(\"butterfly.modules.wirings\",\"WEB-INF/modules.properties\"));...\n\t\t_classLoader.watch(moduleWirings);\n\t\tFileInputStream fis=new FileInputStream(moduleWirings);\n\t\twirings.load(fis);\n\t\tfis.close();\n\t} catch (Exception e){...\n\t} ...\n\tSet<String> initialized=new HashSet<String>();\n\tSet<String> initializing=new HashSet<String>();\n\tfor (String name : _modulesByName.keySet()){\n\t\tinitializeModule(name,initialized,initializing);\n\t}...\n}"},{"Origin":"protected ButterflyModule createModule(String name){\n\t_logger.trace(\"> Creating module: {}\",name);\n\tif(_modulesByName.containsKey(name)){\n\t\t_logger.trace(\"< Module '{}' already exists\",name);\n\t\treturn _modulesByName.get(name);\n\t}\n\tExtendedProperties p=_moduleProperties.get(name);\n\tFile path=new File(p.getString(PATH_PROP));\n\t_logger.debug(\"Module path: {}\",path);\n\tFile classes=new File(path,\"MOD-INF/classes\");\n\tif(classes.exists()){\n\t\t_classLoader.addRepository(classes);\n\t}\n\tFile libs=new File(path,\"MOD-INF/lib\");\n\tif(libs.exists()){\n\t\t_classLoader.addRepository(libs);\n\t}\n\tButterflyModule m=new ButterflyModuleImpl();\n\tString manager=p.getString(\"module-impl\");\n\tif(manager != null && !manager.equals(m.getClass().getName())){\n\t\ttry {\n\t\t\tClass<?> c=_classLoader.loadClass(manager);\n\t\t\tm=(ButterflyModule)c.newInstance();\n\t\t} catch (Exception e){\n\t\t\t_logger.error(\"Error loading special module manager\",e);\n\t\t} \n\t}\n\tm.setName(name);\n\tm.setPath(path);\n\tm.setModules(_modulesByName);\n\tm.setMounter(_mounter);\n\tm.setClassLoader(_classLoader);\n\tm.setTimer(_timer);\n\t_modulesByName.put(name,m);\n\tButterflyModule parentModule=null;\n\tString parentName=p.getString(extendsProperty);\n\tif(parentName != null){\n\t\tif(_moduleProperties.containsKey(parentName)){\n\t\t\tif(_modulesByName.containsKey(parentName)){\n\t\t\t\tparentModule=_modulesByName.get(parentName);\n\t\t\t}else {\n\t\t\t\tparentModule=createModule(parentName);\n\t\t\t}\n\t\t}else {\n\t\t\tthrow new RuntimeException(\"Cannot wire module '\" + name + \"' because the extended module '\"+ parentName+ \"' is not defined.\");\n\t\t}\n\t}\n\tif(parentModule != null){\n\t\tm.setExtended(parentModule);\n\t\tparentModule.addExtendedBy(m);\n\t}\n\t_logger.trace(\"< Creating module: {}\",name);\n\treturn m;\n}","Original_Lines":52,"Target_Lines":43,"Manual":"protected ButterflyModule createModule(String name){...\n\tExtendedProperties p=_moduleProperties.get(name);\n\tFile path=new File(p.getString(PATH_PROP));...\n\tFile classes=new File(path,\"MOD-INF/classes\");\n\tif(classes.exists()){\n\t\t_classLoader.addRepository(classes);\n\t}\n\tFile libs=new File(path,\"MOD-INF/lib\");\n\tif(libs.exists()){\n\t\t_classLoader.addRepository(libs);\n\t}\n\tButterflyModule m=new ButterflyModuleImpl();\n\tString manager=p.getString(\"module-impl\");\n\tif(manager != null && !manager.equals(m.getClass().getName())){\n\t\ttry {\n\t\t\tClass<?> c=_classLoader.loadClass(manager);\n\t\t\tm=(ButterflyModule)c.newInstance();\n\t\t} catch (Exception e){...\n\t\t} \n\t}\n\tm.setName(name);\n\tm.setPath(path);\n\tm.setModules(_modulesByName);\n\tm.setMounter(_mounter);\n\tm.setClassLoader(_classLoader);\n\tm.setTimer(_timer);\n\t_modulesByName.put(name,m);\n\tButterflyModule parentModule=null;\n\tString parentName=p.getString(extendsProperty);\n\tif(parentName != null){\n\t\tif(_moduleProperties.containsKey(parentName)){\n\t\t\tif(_modulesByName.containsKey(parentName)){\n\t\t\t\tparentModule=_modulesByName.get(parentName);\n\t\t\t}else {\n\t\t\t\tparentModule=createModule(parentName);\n\t\t\t}\n\t\t}else {...\n\t\t}\n\t}\n\tif(parentModule != null){\n\t\tm.setExtended(parentModule);\n\t\tparentModule.addExtendedBy(m);\n\t}...\n\treturn m;\n}","Distance":0.14285714285714285,"Automatic":"protected ButterflyModule createModule(String name){...\n\tif(_modulesByName.containsKey(name)){\n\t\t_logger.trace(\"< Module '{}' already exists\",name);\n\t\treturn _modulesByName.get(name);\n\t}\n\tExtendedProperties p=_moduleProperties.get(name);\n\tFile path=new File(p.getString(PATH_PROP));...\n\tFile classes=new File(path,\"MOD-INF/classes\");...\n\tFile libs=new File(path,\"MOD-INF/lib\");\n\tif(libs.exists()){\n\t\t_classLoader.addRepository(libs);\n\t}\n\tButterflyModule m=new ButterflyModuleImpl();\n\tString manager=p.getString(\"module-impl\");\n\tif(manager != null && !manager.equals(m.getClass().getName())){\n\t\ttry {\n\t\t\tClass<?> c=_classLoader.loadClass(manager);\n\t\t\tm=(ButterflyModule)c.newInstance();\n\t\t} catch (Exception e){...\n\t\t} \n\t}\n\tm.setName(name);\n\tm.setPath(path);\n\tm.setModules(_modulesByName);\n\tm.setMounter(_mounter);\n\tm.setClassLoader(_classLoader);\n\tm.setTimer(_timer);\n\t_modulesByName.put(name,m);\n\tButterflyModule parentModule=null;\n\tString parentName=p.getString(extendsProperty);\n\tif(parentName != null){\n\t\tif(_moduleProperties.containsKey(parentName)){\n\t\t\tif(_modulesByName.containsKey(parentName)){\n\t\t\t\tparentModule=_modulesByName.get(parentName);\n\t\t\t}else {\n\t\t\t\tparentModule=createModule(parentName);\n\t\t\t}\n\t\t}else {...\n\t\t}\n\t}\n\tif(parentModule != null){\n\t\tm.setExtended(parentModule);\n\t\tparentModule.addExtendedBy(m);\n\t}...\n\treturn m;\n}"},{"Origin":"public CrawlController(CrawlConfig config,PageFetcher pageFetcher,RobotstxtServer robotstxtServer) throws Exception {\n\tsuper(config);\n\tconfig.validate();\n\tFile folder=new File(config.getCrawlStorageFolder());\n\tif(!folder.exists()){\n\t\tif(!folder.mkdirs()){\n\t\t\tthrow new Exception(\"Couldn't create this folder: \" + folder.getAbsolutePath());\n\t\t}\n\t}\n\tboolean resumable=config.isResumableCrawling();\n\tEnvironmentConfig envConfig=new EnvironmentConfig();\n\tenvConfig.setAllowCreate(true);\n\tenvConfig.setTransactional(resumable);\n\tenvConfig.setLocking(resumable);\n\tFile envHome=new File(config.getCrawlStorageFolder() + \"/frontier\");\n\tif(!envHome.exists()){\n\t\tif(!envHome.mkdir()){\n\t\t\tthrow new Exception(\"Couldn't create this folder: \" + envHome.getAbsolutePath());\n\t\t}\n\t}\n\tif(!resumable){\n\t\tIO.deleteFolderContents(envHome);\n\t}\n\tEnvironment env=new Environment(envHome,envConfig);\n\tdocIdServer=new DocIDServer(env,config);\n\tfrontier=new Frontier(env,config,docIdServer);\n\tthis.pageFetcher=pageFetcher;\n\tthis.robotstxtServer=robotstxtServer;\n\tfinished=false;\n\tshuttingDown=false;\n}","Original_Lines":29,"Target_Lines":17,"Manual":"public CrawlController(CrawlConfig config,PageFetcher pageFetcher,RobotstxtServer robotstxtServer) throws Exception {...\n\tFile folder=new File(config.getCrawlStorageFolder());...\n\tboolean resumable=config.isResumableCrawling();\n\tEnvironmentConfig envConfig=new EnvironmentConfig();\n\tenvConfig.setAllowCreate(true);\n\tenvConfig.setTransactional(resumable);\n\tenvConfig.setLocking(resumable);\n\tFile envHome=new File(config.getCrawlStorageFolder() + \"/frontier\");...\n\tif(!resumable){\n\t\tIO.deleteFolderContents(envHome);\n\t}\n\tEnvironment env=new Environment(envHome,envConfig);\n\tdocIdServer=new DocIDServer(env,config);\n\tfrontier=new Frontier(env,config,docIdServer);\n\tthis.pageFetcher=pageFetcher;\n\tthis.robotstxtServer=robotstxtServer;\n\tfinished=false;\n\tshuttingDown=false;\n}","Distance":0.11764705882352941,"Automatic":"public CrawlController(CrawlConfig config,PageFetcher pageFetcher,RobotstxtServer robotstxtServer) throws Exception {...\n\tconfig.validate();\n\tFile folder=new File(config.getCrawlStorageFolder());...\n\tboolean resumable=config.isResumableCrawling();\n\tEnvironmentConfig envConfig=new EnvironmentConfig();\n\tenvConfig.setAllowCreate(true);\n\tenvConfig.setTransactional(resumable);\n\tenvConfig.setLocking(resumable);\n\tFile envHome=new File(config.getCrawlStorageFolder() + \"/frontier\");...\n\tif(!resumable){\n\t\tIO.deleteFolderContents(envHome);\n\t}\n\tEnvironment env=new Environment(envHome,envConfig);\n\tdocIdServer=new DocIDServer(env,config);\n\tfrontier=new Frontier(env,config,docIdServer);\n\tthis.pageFetcher=pageFetcher;\n\tthis.robotstxtServer=robotstxtServer;...\n\tshuttingDown=false;\n}"},{"Origin":"private void processPage(WebURL curURL){\n\tif(curURL == null){\n\t\treturn;\n\t}\n\tPageFetchResult fetchResult=null;\n\ttry {\n\t\tfetchResult=pageFetcher.fetchHeader(curURL);\n\t\tint statusCode=fetchResult.getStatusCode();\n\t\thandlePageStatusCode(curURL,statusCode,CustomFetchStatus.getStatusDescription(statusCode));\n\t\tif(statusCode != HttpStatus.SC_OK){\n\t\t\tif(statusCode == HttpStatus.SC_MOVED_PERMANENTLY || statusCode == HttpStatus.SC_MOVED_TEMPORARILY){\n\t\t\t\tif(myController.getConfig().isFollowRedirects()){\n\t\t\t\t\tString movedToUrl=fetchResult.getMovedToUrl();\n\t\t\t\t\tif(movedToUrl == null){\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tint newDocId=docIdServer.getDocId(movedToUrl);\n\t\t\t\t\tif(newDocId > 0){\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}else {\n\t\t\t\t\t\tWebURL webURL=new WebURL();\n\t\t\t\t\t\twebURL.setURL(movedToUrl);\n\t\t\t\t\t\twebURL.setParentDocid(curURL.getParentDocid());\n\t\t\t\t\t\twebURL.setParentUrl(curURL.getParentUrl());\n\t\t\t\t\t\twebURL.setDepth(curURL.getDepth());\n\t\t\t\t\t\twebURL.setDocid(-1);\n\t\t\t\t\t\tif(shouldVisit(webURL) && robotstxtServer.allows(webURL)){\n\t\t\t\t\t\t\twebURL.setDocid(docIdServer.getNewDocID(movedToUrl));\n\t\t\t\t\t\t\tfrontier.schedule(webURL);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}else if(fetchResult.getStatusCode() == CustomFetchStatus.PageTooBig){\n\t\t\t\tlogger.info(\"Skipping a page which was bigger than max allowed size: \" + curURL.getURL());\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tif(!curURL.getURL().equals(fetchResult.getFetchedUrl())){\n\t\t\tif(docIdServer.isSeenBefore(fetchResult.getFetchedUrl())){\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tcurURL.setURL(fetchResult.getFetchedUrl());\n\t\t\tcurURL.setDocid(docIdServer.getNewDocID(fetchResult.getFetchedUrl()));\n\t\t}\n\t\tPage page=new Page(curURL);\n\t\tint docid=curURL.getDocid();\n\t\tif(fetchResult.fetchContent(page) && parser.parse(page,curURL.getURL())){\n\t\t\tParseData parseData=page.getParseData();\n\t\t\tif(parseData instanceof HtmlParseData){\n\t\t\t\tHtmlParseData htmlParseData=(HtmlParseData)parseData;\n\t\t\t\tList<WebURL> toSchedule=new ArrayList<WebURL>();\n\t\t\t\tint maxCrawlDepth=myController.getConfig().getMaxDepthOfCrawling();\n\t\t\t\tfor (WebURL webURL : htmlParseData.getOutgoingUrls()){\n\t\t\t\t\twebURL.setParentDocid(docid);\n\t\t\t\t\twebURL.setParentUrl(curURL.getURL());\n\t\t\t\t\tint newdocid=docIdServer.getDocId(webURL.getURL());\n\t\t\t\t\tif(newdocid > 0){\n\t\t\t\t\t\twebURL.setDepth((short)-1);\n\t\t\t\t\t\twebURL.setDocid(newdocid);\n\t\t\t\t\t}else {\n\t\t\t\t\t\twebURL.setDocid(-1);\n\t\t\t\t\t\twebURL.setDepth((short)(curURL.getDepth() + 1));\n\t\t\t\t\t\tif(maxCrawlDepth == -1 || curURL.getDepth() < maxCrawlDepth){\n\t\t\t\t\t\t\tif(shouldVisit(webURL) && robotstxtServer.allows(webURL)){\n\t\t\t\t\t\t\t\twebURL.setDocid(docIdServer.getNewDocID(webURL.getURL()));\n\t\t\t\t\t\t\t\ttoSchedule.add(webURL);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfrontier.scheduleAll(toSchedule);\n\t\t\t}\n\t\t\tvisit(page);\n\t\t}\n\t} catch (Exception e){\n\t\te.printStackTrace();\n\t\tlogger.error(e.getMessage() + \", while processing: \" + curURL.getURL());\n\t} finally {\n\t\tif(fetchResult != null){\n\t\t\tfetchResult.discardContentIfNotConsumed();\n\t\t}\n\t} \n}","Original_Lines":81,"Target_Lines":43,"Manual":"private void processPage(WebURL curURL){...\n\tPageFetchResult fetchResult=null;\n\ttry {\n\t\tfetchResult=pageFetcher.fetchHeader(curURL);\n\t\tint statusCode=fetchResult.getStatusCode();\n\t\thandlePageStatusCode(curURL,statusCode,CustomFetchStatus.getStatusDescription(statusCode));\n\t\tif(statusCode != HttpStatus.SC_OK){\n\t\t\tif(statusCode == HttpStatus.SC_MOVED_PERMANENTLY || statusCode == HttpStatus.SC_MOVED_TEMPORARILY){\n\t\t\t\tif(myController.getConfig().isFollowRedirects()){\n\t\t\t\t\tString movedToUrl=fetchResult.getMovedToUrl();...\n\t\t\t\t\tint newDocId=docIdServer.getDocId(movedToUrl);...\n\t\t\t\t}\n\t\t\t}else if(fetchResult.getStatusCode() == CustomFetchStatus.PageTooBig){...\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tif(!curURL.getURL().equals(fetchResult.getFetchedUrl())){\n\t\t\tif(docIdServer.isSeenBefore(fetchResult.getFetchedUrl())){\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tcurURL.setURL(fetchResult.getFetchedUrl());\n\t\t\tcurURL.setDocid(docIdServer.getNewDocID(fetchResult.getFetchedUrl()));\n\t\t}\n\t\tPage page=new Page(curURL);\n\t\tint docid=curURL.getDocid();\n\t\tif(fetchResult.fetchContent(page) && parser.parse(page,curURL.getURL())){\n\t\t\tParseData parseData=page.getParseData();\n\t\t\tif(parseData instanceof HtmlParseData){\n\t\t\t\tHtmlParseData htmlParseData=(HtmlParseData)parseData;\n\t\t\t\tList<WebURL> toSchedule=new ArrayList<WebURL>();\n\t\t\t\tint maxCrawlDepth=myController.getConfig().getMaxDepthOfCrawling();\n\t\t\t\tfor (WebURL webURL : htmlParseData.getOutgoingUrls()){...\n\t\t\t\t\tint newdocid=docIdServer.getDocId(webURL.getURL());...\n\t\t\t\t}\n\t\t\t\tfrontier.scheduleAll(toSchedule);\n\t\t\t}\n\t\t\tvisit(page);\n\t\t}\n\t} catch (Exception e){...\n\t} finally {\n\t\tif(fetchResult != null){\n\t\t\tfetchResult.discardContentIfNotConsumed();\n\t\t}\n\t} \n}","Distance":0.2702702702702703,"Automatic":"private void processPage(WebURL curURL){...\n\tPageFetchResult fetchResult=null;\n\ttry {\n\t\tfetchResult=pageFetcher.fetchHeader(curURL);\n\t\tint statusCode=fetchResult.getStatusCode();\n\t\thandlePageStatusCode(curURL,statusCode,CustomFetchStatus.getStatusDescription(statusCode));\n\t\tif(statusCode != HttpStatus.SC_OK){\n\t\t\tif(statusCode == HttpStatus.SC_MOVED_PERMANENTLY || statusCode == HttpStatus.SC_MOVED_TEMPORARILY){\n\t\t\t\tif(myController.getConfig().isFollowRedirects()){\n\t\t\t\t\tString movedToUrl=fetchResult.getMovedToUrl();...\n\t\t\t\t\tint newDocId=docIdServer.getDocId(movedToUrl);\n\t\t\t\t\tif(newDocId > 0){\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}else {\n\t\t\t\t\t\tWebURL webURL=new WebURL();...\n\t\t\t\t\t\twebURL.setParentUrl(curURL.getParentUrl());...\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}else if(fetchResult.getStatusCode() == CustomFetchStatus.PageTooBig){...\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tif(!curURL.getURL().equals(fetchResult.getFetchedUrl())){...\n\t\t\tcurURL.setURL(fetchResult.getFetchedUrl());\n\t\t\tcurURL.setDocid(docIdServer.getNewDocID(fetchResult.getFetchedUrl()));\n\t\t}\n\t\tPage page=new Page(curURL);\n\t\tint docid=curURL.getDocid();\n\t\tif(fetchResult.fetchContent(page) && parser.parse(page,curURL.getURL())){\n\t\t\tParseData parseData=page.getParseData();\n\t\t\tif(parseData instanceof HtmlParseData){\n\t\t\t\tHtmlParseData htmlParseData=(HtmlParseData)parseData;\n\t\t\t\tList<WebURL> toSchedule=new ArrayList<WebURL>();\n\t\t\t\tint maxCrawlDepth=myController.getConfig().getMaxDepthOfCrawling();\n\t\t\t\tfor (WebURL webURL : htmlParseData.getOutgoingUrls()){...\n\t\t\t\t\twebURL.setParentUrl(curURL.getURL());\n\t\t\t\t\tint newdocid=docIdServer.getDocId(webURL.getURL());...\n\t\t\t\t}\n\t\t\t\tfrontier.scheduleAll(toSchedule);\n\t\t\t}\n\t\t\tvisit(page);\n\t\t}\n\t} catch (Exception e){...\n\t} finally {...\n\t} \n}"},{"Origin":"public PageFetchResult fetchHeader(WebURL webUrl){\n\tPageFetchResult fetchResult=new PageFetchResult();\n\tString toFetchURL=webUrl.getURL();\n\tHttpGet get=null;\n\ttry {\n\t\tget=new HttpGet(toFetchURL);\n\t\tsynchronized (mutex){\n\t\t\tlong now=(new Date()).getTime();\n\t\t\tif(now - lastFetchTime < config.getPolitenessDelay()){\n\t\t\t\tThread.sleep(config.getPolitenessDelay() - (now - lastFetchTime));\n\t\t\t}\n\t\t\tlastFetchTime=(new Date()).getTime();\n\t\t}\n\t\tget.addHeader(\"Accept-Encoding\",\"gzip\");\n\t\tHttpResponse response=httpClient.execute(get);\n\t\tfetchResult.setEntity(response.getEntity());\n\t\tint statusCode=response.getStatusLine().getStatusCode();\n\t\tif(statusCode != HttpStatus.SC_OK){\n\t\t\tif(statusCode != HttpStatus.SC_NOT_FOUND){\n\t\t\t\tif(statusCode == HttpStatus.SC_MOVED_PERMANENTLY || statusCode == HttpStatus.SC_MOVED_TEMPORARILY){\n\t\t\t\t\tHeader header=response.getFirstHeader(\"Location\");\n\t\t\t\t\tif(header != null){\n\t\t\t\t\t\tString movedToUrl=header.getValue();\n\t\t\t\t\t\tmovedToUrl=URLCanonicalizer.getCanonicalURL(movedToUrl,toFetchURL);\n\t\t\t\t\t\tfetchResult.setMovedToUrl(movedToUrl);\n\t\t\t\t\t}\n\t\t\t\t\tfetchResult.setStatusCode(statusCode);\n\t\t\t\t\treturn fetchResult;\n\t\t\t\t}\n\t\t\t\tlogger.info(\"Failed: \" + response.getStatusLine().toString() + \", while fetching \"+ toFetchURL);\n\t\t\t}\n\t\t\tfetchResult.setStatusCode(response.getStatusLine().getStatusCode());\n\t\t\treturn fetchResult;\n\t\t}\n\t\tfetchResult.setFetchedUrl(toFetchURL);\n\t\tString uri=get.getURI().toString();\n\t\tif(!uri.equals(toFetchURL)){\n\t\t\tif(!URLCanonicalizer.getCanonicalURL(uri).equals(toFetchURL)){\n\t\t\t\tfetchResult.setFetchedUrl(uri);\n\t\t\t}\n\t\t}\n\t\tif(fetchResult.getEntity() != null){\n\t\t\tlong size=fetchResult.getEntity().getContentLength();\n\t\t\tif(size == -1){\n\t\t\t\tHeader length=response.getLastHeader(\"Content-Length\");\n\t\t\t\tif(length == null){\n\t\t\t\t\tlength=response.getLastHeader(\"Content-length\");\n\t\t\t\t}\n\t\t\t\tif(length != null){\n\t\t\t\t\tsize=Integer.parseInt(length.getValue());\n\t\t\t\t}else {\n\t\t\t\t\tsize=-1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(size > config.getMaxDownloadSize()){\n\t\t\t\tfetchResult.setStatusCode(CustomFetchStatus.PageTooBig);\n\t\t\t\treturn fetchResult;\n\t\t\t}\n\t\t\tfetchResult.setStatusCode(HttpStatus.SC_OK);\n\t\t\treturn fetchResult;\n\t\t}else {\n\t\t\tget.abort();\n\t\t}\n\t} catch (IOException e){\n\t\tlogger.error(\"Fatal transport error: \" + e.getMessage() + \" while fetching \"+ toFetchURL+ \" (link found in doc #\"+ webUrl.getParentDocid()+ \")\");\n\t\tfetchResult.setStatusCode(CustomFetchStatus.FatalTransportError);\n\t\treturn fetchResult;\n\t} catch (IllegalStateException e){\n\t} catch (Exception e){\n\t\tif(e.getMessage() == null){\n\t\t\tlogger.error(\"Error while fetching \" + webUrl.getURL());\n\t\t}else {\n\t\t\tlogger.error(e.getMessage() + \" while fetching \" + webUrl.getURL());\n\t\t}\n\t} finally {\n\t\ttry {\n\t\t\tif(fetchResult.getEntity() == null && get != null){\n\t\t\t\tget.abort();\n\t\t\t}\n\t\t} catch (Exception e){\n\t\t\te.printStackTrace();\n\t\t} \n\t} \n\tfetchResult.setStatusCode(CustomFetchStatus.UnknownError);\n\treturn fetchResult;\n}","Original_Lines":84,"Target_Lines":52,"Manual":"public PageFetchResult fetchHeader(WebURL webUrl){\n\tPageFetchResult fetchResult=new PageFetchResult();\n\tString toFetchURL=webUrl.getURL();...\n\ttry {\n\t\tget=new HttpGet(toFetchURL);...\n\t\tget.addHeader(\"Accept-Encoding\",\"gzip\");\n\t\tHttpResponse response=httpClient.execute(get);\n\t\tfetchResult.setEntity(response.getEntity());\n\t\tint statusCode=response.getStatusLine().getStatusCode();\n\t\tif(statusCode != HttpStatus.SC_OK){\n\t\t\tif(statusCode != HttpStatus.SC_NOT_FOUND){\n\t\t\t\tif(statusCode == HttpStatus.SC_MOVED_PERMANENTLY || statusCode == HttpStatus.SC_MOVED_TEMPORARILY){\n\t\t\t\t\tHeader header=response.getFirstHeader(\"Location\");...\n\t\t\t\t\tfetchResult.setStatusCode(statusCode);\n\t\t\t\t\treturn fetchResult;\n\t\t\t\t}...\n\t\t\t}\n\t\t\tfetchResult.setStatusCode(response.getStatusLine().getStatusCode());\n\t\t\treturn fetchResult;\n\t\t}\n\t\tfetchResult.setFetchedUrl(toFetchURL);\n\t\tString uri=get.getURI().toString();\n\t\tif(!uri.equals(toFetchURL)){\n\t\t\tif(!URLCanonicalizer.getCanonicalURL(uri).equals(toFetchURL)){\n\t\t\t\tfetchResult.setFetchedUrl(uri);\n\t\t\t}\n\t\t}\n\t\tif(fetchResult.getEntity() != null){\n\t\t\tlong size=fetchResult.getEntity().getContentLength();\n\t\t\tif(size == -1){...\n\t\t\t}\n\t\t\tif(size > config.getMaxDownloadSize()){\n\t\t\t\tfetchResult.setStatusCode(CustomFetchStatus.PageTooBig);\n\t\t\t\treturn fetchResult;\n\t\t\t}\n\t\t\tfetchResult.setStatusCode(HttpStatus.SC_OK);\n\t\t\treturn fetchResult;\n\t\t}else {\n\t\t\tget.abort();\n\t\t}\n\t} catch (IOException e){...\n\t} catch (IllegalStateException e){\n\t} catch (Exception e){...\n\t} finally {\n\t\ttry {\n\t\t\tif(fetchResult.getEntity() == null && get != null){\n\t\t\t\tget.abort();\n\t\t\t}\n\t\t} catch (Exception e){...\n\t\t} \n\t} \n\tfetchResult.setStatusCode(CustomFetchStatus.UnknownError);\n\treturn fetchResult;\n}","Distance":0.3333333333333333,"Automatic":"public PageFetchResult fetchHeader(WebURL webUrl){\n\tPageFetchResult fetchResult=new PageFetchResult();\n\tString toFetchURL=webUrl.getURL();\n\tHttpGet get=null;\n\ttry {\n\t\tget=new HttpGet(toFetchURL);\n\t\tsynchronized (mutex){\n\t\t\tlong now=(new Date()).getTime();...\n\t\t\tlastFetchTime=(new Date()).getTime();\n\t\t}\n\t\tget.addHeader(\"Accept-Encoding\",\"gzip\");\n\t\tHttpResponse response=httpClient.execute(get);\n\t\tfetchResult.setEntity(response.getEntity());\n\t\tint statusCode=response.getStatusLine().getStatusCode();\n\t\tif(statusCode != HttpStatus.SC_OK){\n\t\t\tif(statusCode != HttpStatus.SC_NOT_FOUND){\n\t\t\t\tif(statusCode == HttpStatus.SC_MOVED_PERMANENTLY || statusCode == HttpStatus.SC_MOVED_TEMPORARILY){\n\t\t\t\t\tHeader header=response.getFirstHeader(\"Location\");\n\t\t\t\t\tif(header != null){\n\t\t\t\t\t\tString movedToUrl=header.getValue();...\n\t\t\t\t\t\tfetchResult.setMovedToUrl(movedToUrl);\n\t\t\t\t\t}\n\t\t\t\t\tfetchResult.setStatusCode(statusCode);\n\t\t\t\t\treturn fetchResult;\n\t\t\t\t}...\n\t\t\t}\n\t\t\tfetchResult.setStatusCode(response.getStatusLine().getStatusCode());\n\t\t\treturn fetchResult;\n\t\t}\n\t\tfetchResult.setFetchedUrl(toFetchURL);\n\t\tString uri=get.getURI().toString();...\n\t\tif(fetchResult.getEntity() != null){\n\t\t\tlong size=fetchResult.getEntity().getContentLength();\n\t\t\tif(size == -1){\n\t\t\t\tHeader length=response.getLastHeader(\"Content-Length\");...\n\t\t\t}\n\t\t\tif(size > config.getMaxDownloadSize()){\n\t\t\t\tfetchResult.setStatusCode(CustomFetchStatus.PageTooBig);\n\t\t\t\treturn fetchResult;\n\t\t\t}\n\t\t\tfetchResult.setStatusCode(HttpStatus.SC_OK);\n\t\t\treturn fetchResult;\n\t\t}else {\n\t\t\tget.abort();\n\t\t}\n\t} catch (IOException e){...\n\t\tfetchResult.setStatusCode(CustomFetchStatus.FatalTransportError);\n\t\treturn fetchResult;\n\t} catch (IllegalStateException e){\n\t} catch (Exception e){...\n\t} finally {...\n\t} \n\tfetchResult.setStatusCode(CustomFetchStatus.UnknownError);\n\treturn fetchResult;\n}"},{"Origin":"public boolean removeURL(WebURL webUrl){\n\tsynchronized (mutex){\n\t\ttry {\n\t\t\tDatabaseEntry key=new DatabaseEntry(Util.int2ByteArray(webUrl.getDocid()));\n\t\t\tCursor cursor=null;\n\t\t\tOperationStatus result;\n\t\t\tDatabaseEntry value=new DatabaseEntry();\n\t\t\tTransaction txn=env.beginTransaction(null,null);\n\t\t\ttry {\n\t\t\t\tcursor=urlsDB.openCursor(txn,null);\n\t\t\t\tresult=cursor.getSearchKey(key,value,null);\n\t\t\t\tif(result == OperationStatus.SUCCESS){\n\t\t\t\t\tresult=cursor.delete();\n\t\t\t\t\tif(result == OperationStatus.SUCCESS){\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (DatabaseException e){\n\t\t\t\tif(txn != null){\n\t\t\t\t\ttxn.abort();\n\t\t\t\t\ttxn=null;\n\t\t\t\t}\n\t\t\t\tthrow e;\n\t\t\t} finally {\n\t\t\t\tif(cursor != null){\n\t\t\t\t\tcursor.close();\n\t\t\t\t}\n\t\t\t\tif(txn != null){\n\t\t\t\t\ttxn.commit();\n\t\t\t\t}\n\t\t\t} \n\t\t} catch (Exception e){\n\t\t\te.printStackTrace();\n\t\t} \n\t}\n\treturn false;\n}","Original_Lines":35,"Target_Lines":29,"Manual":"public boolean removeURL(WebURL webUrl){\n\tsynchronized (mutex){\n\t\ttry {\n\t\t\tDatabaseEntry key=new DatabaseEntry(Util.int2ByteArray(webUrl.getDocid()));\n\t\t\tCursor cursor=null;\n\t\t\tOperationStatus result;\n\t\t\tDatabaseEntry value=new DatabaseEntry();\n\t\t\tTransaction txn=env.beginTransaction(null,null);\n\t\t\ttry {\n\t\t\t\tcursor=urlsDB.openCursor(txn,null);\n\t\t\t\tresult=cursor.getSearchKey(key,value,null);\n\t\t\t\tif(result == OperationStatus.SUCCESS){\n\t\t\t\t\tresult=cursor.delete();\n\t\t\t\t\tif(result == OperationStatus.SUCCESS){\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (DatabaseException e){...\n\t\t\t} finally {\n\t\t\t\tif(cursor != null){\n\t\t\t\t\tcursor.close();\n\t\t\t\t}\n\t\t\t\tif(txn != null){\n\t\t\t\t\ttxn.commit();\n\t\t\t\t}\n\t\t\t} \n\t\t} catch (Exception e){...\n\t\t} \n\t}\n\treturn false;\n}","Distance":0.14285714285714285,"Automatic":"public boolean removeURL(WebURL webUrl){\n\tsynchronized (mutex){\n\t\ttry {\n\t\t\tDatabaseEntry key=new DatabaseEntry(Util.int2ByteArray(webUrl.getDocid()));\n\t\t\tCursor cursor=null;\n\t\t\tOperationStatus result;\n\t\t\tDatabaseEntry value=new DatabaseEntry();\n\t\t\tTransaction txn=env.beginTransaction(null,null);\n\t\t\ttry {\n\t\t\t\tcursor=urlsDB.openCursor(txn,null);\n\t\t\t\tresult=cursor.getSearchKey(key,value,null);\n\t\t\t\tif(result == OperationStatus.SUCCESS){\n\t\t\t\t\tresult=cursor.delete();\n\t\t\t\t\tif(result == OperationStatus.SUCCESS){\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (DatabaseException e){\n\t\t\t\tif(txn != null){...\n\t\t\t\t\ttxn=null;\n\t\t\t\t}...\n\t\t\t} finally {\n\t\t\t\tif(cursor != null){\n\t\t\t\t\tcursor.close();\n\t\t\t\t}\n\t\t\t\tif(txn != null){\n\t\t\t\t\ttxn.commit();\n\t\t\t\t}\n\t\t\t} \n\t\t} catch (Exception e){...\n\t\t} \n\t}...\n}"},{"Origin":"public List<WebURL> get(int max) throws DatabaseException {\n\tsynchronized (mutex){\n\t\tint matches=0;\n\t\tList<WebURL> results=new ArrayList<WebURL>(max);\n\t\tCursor cursor=null;\n\t\tOperationStatus result;\n\t\tDatabaseEntry key=new DatabaseEntry();\n\t\tDatabaseEntry value=new DatabaseEntry();\n\t\tTransaction txn;\n\t\tif(resumable){\n\t\t\ttxn=env.beginTransaction(null,null);\n\t\t}else {\n\t\t\ttxn=null;\n\t\t}\n\t\ttry {\n\t\t\tcursor=urlsDB.openCursor(txn,null);\n\t\t\tresult=cursor.getFirst(key,value,null);\n\t\t\twhile(matches < max && result == OperationStatus.SUCCESS){\n\t\t\t\tif(value.getData().length > 0){\n\t\t\t\t\tresults.add(webURLBinding.entryToObject(value));\n\t\t\t\t\tmatches++;\n\t\t\t\t}\n\t\t\t\tresult=cursor.getNext(key,value,null);\n\t\t\t}\n\t\t} catch (DatabaseException e){\n\t\t\tif(txn != null){\n\t\t\t\ttxn.abort();\n\t\t\t\ttxn=null;\n\t\t\t}\n\t\t\tthrow e;\n\t\t} finally {\n\t\t\tif(cursor != null){\n\t\t\t\tcursor.close();\n\t\t\t}\n\t\t\tif(txn != null){\n\t\t\t\ttxn.commit();\n\t\t\t}\n\t\t} \n\t\treturn results;\n\t}\n}","Original_Lines":39,"Target_Lines":34,"Manual":"public List<WebURL> get(int max) throws DatabaseException {\n\tsynchronized (mutex){\n\t\tint matches=0;\n\t\tList<WebURL> results=new ArrayList<WebURL>(max);\n\t\tCursor cursor=null;\n\t\tOperationStatus result;\n\t\tDatabaseEntry key=new DatabaseEntry();\n\t\tDatabaseEntry value=new DatabaseEntry();\n\t\tTransaction txn;\n\t\tif(resumable){\n\t\t\ttxn=env.beginTransaction(null,null);\n\t\t}else {\n\t\t\ttxn=null;\n\t\t}\n\t\ttry {\n\t\t\tcursor=urlsDB.openCursor(txn,null);\n\t\t\tresult=cursor.getFirst(key,value,null);\n\t\t\twhile(matches < max && result == OperationStatus.SUCCESS){\n\t\t\t\tif(value.getData().length > 0){\n\t\t\t\t\tresults.add(webURLBinding.entryToObject(value));\n\t\t\t\t\tmatches++;\n\t\t\t\t}\n\t\t\t\tresult=cursor.getNext(key,value,null);\n\t\t\t}\n\t\t} catch (DatabaseException e){...\n\t\t} finally {\n\t\t\tif(cursor != null){\n\t\t\t\tcursor.close();\n\t\t\t}\n\t\t\tif(txn != null){\n\t\t\t\ttxn.commit();\n\t\t\t}\n\t\t} \n\t\treturn results;\n\t}\n}","Distance":0.04,"Automatic":"public List<WebURL> get(int max) throws DatabaseException {\n\tsynchronized (mutex){\n\t\tint matches=0;\n\t\tList<WebURL> results=new ArrayList<WebURL>(max);\n\t\tCursor cursor=null;\n\t\tOperationStatus result;\n\t\tDatabaseEntry key=new DatabaseEntry();\n\t\tDatabaseEntry value=new DatabaseEntry();\n\t\tTransaction txn;\n\t\tif(resumable){\n\t\t\ttxn=env.beginTransaction(null,null);\n\t\t}else {\n\t\t\ttxn=null;\n\t\t}\n\t\ttry {\n\t\t\tcursor=urlsDB.openCursor(txn,null);\n\t\t\tresult=cursor.getFirst(key,value,null);\n\t\t\twhile(matches < max && result == OperationStatus.SUCCESS){\n\t\t\t\tif(value.getData().length > 0){\n\t\t\t\t\tresults.add(webURLBinding.entryToObject(value));\n\t\t\t\t\tmatches++;\n\t\t\t\t}\n\t\t\t\tresult=cursor.getNext(key,value,null);\n\t\t\t}\n\t\t} catch (DatabaseException e){...\n\t\t\tthrow e;\n\t\t} finally {\n\t\t\tif(cursor != null){\n\t\t\t\tcursor.close();\n\t\t\t}\n\t\t\tif(txn != null){\n\t\t\t\ttxn.commit();\n\t\t\t}\n\t\t} \n\t\treturn results;\n\t}\n}"},{"Origin":"public boolean parse(Page page,String contextURL){\n\tif(Util.hasBinaryContent(page.getContentType())){\n\t\tif(!config.isIncludeBinaryContentInCrawling()){\n\t\t\treturn false;\n\t\t}else {\n\t\t\tpage.setParseData(BinaryParseData.getInstance());\n\t\t\treturn true;\n\t\t}\n\t}else if(Util.hasPlainTextContent(page.getContentType())){\n\t\ttry {\n\t\t\tTextParseData parseData=new TextParseData();\n\t\t\tparseData.setTextContent(new String(page.getContentData(),page.getContentCharset()));\n\t\t\tpage.setParseData(parseData);\n\t\t\treturn true;\n\t\t} catch (Exception e){\n\t\t\te.printStackTrace();\n\t\t} \n\t\treturn false;\n\t}\n\tMetadata metadata=new Metadata();\n\tHtmlContentHandler contentHandler=new HtmlContentHandler();\n\tInputStream inputStream=null;\n\ttry {\n\t\tinputStream=new ByteArrayInputStream(page.getContentData());\n\t\thtmlParser.parse(inputStream,contentHandler,metadata,parseContext);\n\t} catch (Exception e){\n\t\te.printStackTrace();\n\t} finally {\n\t\ttry {\n\t\t\tif(inputStream != null){\n\t\t\t\tinputStream.close();\n\t\t\t}\n\t\t} catch (IOException e){\n\t\t\te.printStackTrace();\n\t\t} \n\t} \n\tif(page.getContentCharset() == null){\n\t\tpage.setContentCharset(metadata.get(\"Content-Encoding\"));\n\t}\n\tHtmlParseData parseData=new HtmlParseData();\n\tparseData.setText(contentHandler.getBodyText().trim());\n\tparseData.setTitle(metadata.get(Metadata.TITLE));\n\tList<WebURL> outgoingUrls=new ArrayList<WebURL>();\n\tString baseURL=contentHandler.getBaseUrl();\n\tif(baseURL != null){\n\t\tcontextURL=baseURL;\n\t}\n\tint urlCount=0;\n\tfor (ExtractedUrlAnchorPair urlAnchorPair : contentHandler.getOutgoingUrls()){\n\t\tString href=urlAnchorPair.getHref();\n\t\thref=href.trim();\n\t\tif(href.length() == 0){\n\t\t\tcontinue;\n\t\t}\n\t\tString hrefWithoutProtocol=href.toLowerCase();\n\t\tif(href.startsWith(\"http://\")){\n\t\t\threfWithoutProtocol=href.substring(7);\n\t\t}\n\t\tif(!hrefWithoutProtocol.contains(\"javascript:\") && !hrefWithoutProtocol.contains(\"@\")){\n\t\t\tString url=URLCanonicalizer.getCanonicalURL(href,contextURL);\n\t\t\tif(url != null){\n\t\t\t\tWebURL webURL=new WebURL();\n\t\t\t\twebURL.setURL(url);\n\t\t\t\twebURL.setAnchor(urlAnchorPair.getAnchor());\n\t\t\t\toutgoingUrls.add(webURL);\n\t\t\t\turlCount++;\n\t\t\t\tif(urlCount > config.getMaxOutgoingLinksToFollow()){\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tparseData.setOutgoingUrls(outgoingUrls);\n\ttry {\n\t\tif(page.getContentCharset() == null){\n\t\t\tparseData.setHtml(new String(page.getContentData()));\n\t\t}else {\n\t\t\tparseData.setHtml(new String(page.getContentData(),page.getContentCharset()));\n\t\t}\n\t} catch (UnsupportedEncodingException e){\n\t\te.printStackTrace();\n\t\treturn false;\n\t} \n\tpage.setParseData(parseData);\n\treturn true;\n}","Original_Lines":84,"Target_Lines":56,"Manual":"public boolean parse(Page page,String contextURL){...\n\tMetadata metadata=new Metadata();\n\tHtmlContentHandler contentHandler=new HtmlContentHandler();\n\tInputStream inputStream=null;\n\ttry {\n\t\tinputStream=new ByteArrayInputStream(page.getContentData());\n\t\thtmlParser.parse(inputStream,contentHandler,metadata,parseContext);\n\t} catch (Exception e){...\n\t} finally {\n\t\ttry {\n\t\t\tif(inputStream != null){\n\t\t\t\tinputStream.close();\n\t\t\t}\n\t\t} catch (IOException e){...\n\t\t} \n\t} \n\tif(page.getContentCharset() == null){\n\t\tpage.setContentCharset(metadata.get(\"Content-Encoding\"));\n\t}\n\tHtmlParseData parseData=new HtmlParseData();\n\tparseData.setText(contentHandler.getBodyText().trim());\n\tparseData.setTitle(metadata.get(Metadata.TITLE));\n\tList<WebURL> outgoingUrls=new ArrayList<WebURL>();\n\tString baseURL=contentHandler.getBaseUrl();\n\tif(baseURL != null){\n\t\tcontextURL=baseURL;\n\t}\n\tint urlCount=0;\n\tfor (ExtractedUrlAnchorPair urlAnchorPair : contentHandler.getOutgoingUrls()){\n\t\tString href=urlAnchorPair.getHref();\n\t\thref=href.trim();...\n\t\tString hrefWithoutProtocol=href.toLowerCase();\n\t\tif(href.startsWith(\"http://\")){\n\t\t\threfWithoutProtocol=href.substring(7);\n\t\t}\n\t\tif(!hrefWithoutProtocol.contains(\"javascript:\") && !hrefWithoutProtocol.contains(\"@\")){\n\t\t\tString url=URLCanonicalizer.getCanonicalURL(href,contextURL);\n\t\t\tif(url != null){\n\t\t\t\tWebURL webURL=new WebURL();\n\t\t\t\twebURL.setURL(url);\n\t\t\t\twebURL.setAnchor(urlAnchorPair.getAnchor());\n\t\t\t\toutgoingUrls.add(webURL);\n\t\t\t\turlCount++;...\n\t\t\t}\n\t\t}\n\t}\n\tparseData.setOutgoingUrls(outgoingUrls);\n\ttry {\n\t\tif(page.getContentCharset() == null){\n\t\t\tparseData.setHtml(new String(page.getContentData()));\n\t\t}else {\n\t\t\tparseData.setHtml(new String(page.getContentData(),page.getContentCharset()));\n\t\t}\n\t} catch (UnsupportedEncodingException e){...\n\t} \n\tpage.setParseData(parseData);\n\treturn true;\n}","Distance":0.30612244897959184,"Automatic":"public boolean parse(Page page,String contextURL){\n\tif(Util.hasBinaryContent(page.getContentType())){...\n\t}else if(Util.hasPlainTextContent(page.getContentType())){\n\t\ttry {\n\t\t\tTextParseData parseData=new TextParseData();\n\t\t\tparseData.setTextContent(new String(page.getContentData(),page.getContentCharset()));\n\t\t\tpage.setParseData(parseData);\n\t\t\treturn true;\n\t\t} catch (Exception e){...\n\t\t} ...\n\t}\n\tMetadata metadata=new Metadata();\n\tHtmlContentHandler contentHandler=new HtmlContentHandler();\n\tInputStream inputStream=null;\n\ttry {\n\t\tinputStream=new ByteArrayInputStream(page.getContentData());\n\t\thtmlParser.parse(inputStream,contentHandler,metadata,parseContext);\n\t} catch (Exception e){...\n\t} finally {\n\t\ttry {\n\t\t\tif(inputStream != null){\n\t\t\t\tinputStream.close();\n\t\t\t}\n\t\t} catch (IOException e){...\n\t\t} \n\t} \n\tif(page.getContentCharset() == null){\n\t\tpage.setContentCharset(metadata.get(\"Content-Encoding\"));\n\t}\n\tHtmlParseData parseData=new HtmlParseData();\n\tparseData.setText(contentHandler.getBodyText().trim());\n\tparseData.setTitle(metadata.get(Metadata.TITLE));\n\tList<WebURL> outgoingUrls=new ArrayList<WebURL>();\n\tString baseURL=contentHandler.getBaseUrl();\n\tif(baseURL != null){\n\t\tcontextURL=baseURL;\n\t}...\n\tfor (ExtractedUrlAnchorPair urlAnchorPair : contentHandler.getOutgoingUrls()){\n\t\tString href=urlAnchorPair.getHref();\n\t\thref=href.trim();...\n\t\tString hrefWithoutProtocol=href.toLowerCase();\n\t\tif(href.startsWith(\"http://\")){\n\t\t\threfWithoutProtocol=href.substring(7);\n\t\t}\n\t\tif(!hrefWithoutProtocol.contains(\"javascript:\") && !hrefWithoutProtocol.contains(\"@\")){\n\t\t\tString url=URLCanonicalizer.getCanonicalURL(href,contextURL);\n\t\t\tif(url != null){\n\t\t\t\tWebURL webURL=new WebURL();\n\t\t\t\twebURL.setURL(url);\n\t\t\t\twebURL.setAnchor(urlAnchorPair.getAnchor());\n\t\t\t\toutgoingUrls.add(webURL);\n\t\t\t\turlCount++;\n\t\t\t\tif(urlCount > config.getMaxOutgoingLinksToFollow()){\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tparseData.setOutgoingUrls(outgoingUrls);...\n\tpage.setParseData(parseData);...\n}"},{"Origin":"public static HostDirectives parse(String content,String myUserAgent){\n\tHostDirectives directives=null;\n\tboolean inMatchingUserAgent=false;\n\tStringTokenizer st=new StringTokenizer(content,\"\\n\");\n\twhile(st.hasMoreTokens()){\n\t\tString line=st.nextToken();\n\t\tint commentIndex=line.indexOf(\"#\");\n\t\tif(commentIndex > -1){\n\t\t\tline=line.substring(0,commentIndex);\n\t\t}\n\t\tline=line.replaceAll(\"<[^>]+>\",\"\");\n\t\tline=line.trim();\n\t\tif(line.length() == 0){\n\t\t\tcontinue;\n\t\t}\n\t\tif(line.matches(PATTERNS_USERAGENT)){\n\t\t\tString ua=line.substring(PATTERNS_USERAGENT_LENGTH).trim().toLowerCase();\n\t\t\tif(ua.equals(\"*\") || ua.contains(myUserAgent)){\n\t\t\t\tinMatchingUserAgent=true;\n\t\t\t\tif(directives == null){\n\t\t\t\t\tdirectives=new HostDirectives();\n\t\t\t\t}\n\t\t\t}else {\n\t\t\t\tinMatchingUserAgent=false;\n\t\t\t}\n\t\t}else if(line.matches(PATTERNS_DISALLOW)){\n\t\t\tif(!inMatchingUserAgent){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tString path=line.substring(PATTERNS_DISALLOW_LENGTH).trim();\n\t\t\tif(path.endsWith(\"*\")){\n\t\t\t\tpath=path.substring(0,path.length() - 1);\n\t\t\t}\n\t\t\tpath=path.trim();\n\t\t\tif(path.length() > 0){\n\t\t\t\tdirectives.addDisallow(path);\n\t\t\t}\n\t\t}else if(line.matches(PATTERNS_ALLOW)){\n\t\t\tif(!inMatchingUserAgent){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tString path=line.substring(PATTERNS_ALLOW_LENGTH).trim();\n\t\t\tif(path.endsWith(\"*\")){\n\t\t\t\tpath=path.substring(0,path.length() - 1);\n\t\t\t}\n\t\t\tpath=path.trim();\n\t\t\tdirectives.addAllow(path);\n\t\t}\n\t}\n\treturn directives;\n}","Original_Lines":49,"Target_Lines":23,"Manual":"public static HostDirectives parse(String content,String myUserAgent){\n\tHostDirectives directives=null;\n\tboolean inMatchingUserAgent=false;\n\tStringTokenizer st=new StringTokenizer(content,\"\\n\");\n\twhile(st.hasMoreTokens()){\n\t\tString line=st.nextToken();\n\t\tint commentIndex=line.indexOf(\"#\");\n\t\tif(commentIndex > -1){\n\t\t\tline=line.substring(0,commentIndex);\n\t\t}\n\t\tline=line.replaceAll(\"<[^>]+>\",\"\");\n\t\tline=line.trim();...\n\t\tif(line.matches(PATTERNS_USERAGENT)){\n\t\t\tString ua=line.substring(PATTERNS_USERAGENT_LENGTH).trim().toLowerCase();...\n\t\t}else if(line.matches(PATTERNS_DISALLOW)){...\n\t\t\tString path=line.substring(PATTERNS_DISALLOW_LENGTH).trim();...\n\t\t\tpath=path.trim();...\n\t\t}else if(line.matches(PATTERNS_ALLOW)){...\n\t\t\tString path=line.substring(PATTERNS_ALLOW_LENGTH).trim();...\n\t\t\tpath=path.trim();\n\t\t\tdirectives.addAllow(path);\n\t\t}\n\t}\n\treturn directives;\n}","Distance":0,"Automatic":"public static HostDirectives parse(String content,String myUserAgent){\n\tHostDirectives directives=null;\n\tboolean inMatchingUserAgent=false;\n\tStringTokenizer st=new StringTokenizer(content,\"\\n\");\n\twhile(st.hasMoreTokens()){\n\t\tString line=st.nextToken();\n\t\tint commentIndex=line.indexOf(\"#\");\n\t\tif(commentIndex > -1){\n\t\t\tline=line.substring(0,commentIndex);\n\t\t}\n\t\tline=line.replaceAll(\"<[^>]+>\",\"\");\n\t\tline=line.trim();...\n\t\tif(line.matches(PATTERNS_USERAGENT)){\n\t\t\tString ua=line.substring(PATTERNS_USERAGENT_LENGTH).trim().toLowerCase();...\n\t\t}else if(line.matches(PATTERNS_DISALLOW)){...\n\t\t\tString path=line.substring(PATTERNS_DISALLOW_LENGTH).trim();...\n\t\t\tpath=path.trim();...\n\t\t}else if(line.matches(PATTERNS_ALLOW)){...\n\t\t\tString path=line.substring(PATTERNS_ALLOW_LENGTH).trim();...\n\t\t\tpath=path.trim();\n\t\t\tdirectives.addAllow(path);\n\t\t}\n\t}\n\treturn directives;\n}"},{"Origin":"private static Url parseUrl(final String spec){\n\tfinal Url url=new Url();\n\tint startIndex=0;\n\tint endIndex=spec.length();\n\tfinal int crosshatchIndex=indexOf(spec,'#',startIndex,endIndex);\n\tif(crosshatchIndex >= 0){\n\t\turl.fragment_=spec.substring(crosshatchIndex + 1,endIndex);\n\t\tendIndex=crosshatchIndex;\n\t}\n\tfinal int colonIndex=indexOf(spec,':',startIndex,endIndex);\n\tif(colonIndex > 0){\n\t\tfinal String scheme=spec.substring(startIndex,colonIndex);\n\t\tif(isValidScheme(scheme)){\n\t\t\turl.scheme_=scheme;\n\t\t\tstartIndex=colonIndex + 1;\n\t\t}\n\t}\n\tfinal int locationStartIndex;\n\tint locationEndIndex;\n\tif(spec.startsWith(\"//\",startIndex)){\n\t\tlocationStartIndex=startIndex + 2;\n\t\tlocationEndIndex=indexOf(spec,'/',locationStartIndex,endIndex);\n\t\tif(locationEndIndex >= 0){\n\t\t\tstartIndex=locationEndIndex;\n\t\t}\n\t}else {\n\t\tlocationStartIndex=-1;\n\t\tlocationEndIndex=-1;\n\t}\n\tfinal int questionMarkIndex=indexOf(spec,'?',startIndex,endIndex);\n\tif(questionMarkIndex >= 0){\n\t\tif((locationStartIndex >= 0) && (locationEndIndex < 0)){\n\t\t\tlocationEndIndex=questionMarkIndex;\n\t\t\tstartIndex=questionMarkIndex;\n\t\t}\n\t\turl.query_=spec.substring(questionMarkIndex + 1,endIndex);\n\t\tendIndex=questionMarkIndex;\n\t}\n\tfinal int semicolonIndex=indexOf(spec,';',startIndex,endIndex);\n\tif(semicolonIndex >= 0){\n\t\tif((locationStartIndex >= 0) && (locationEndIndex < 0)){\n\t\t\tlocationEndIndex=semicolonIndex;\n\t\t\tstartIndex=semicolonIndex;\n\t\t}\n\t\turl.parameters_=spec.substring(semicolonIndex + 1,endIndex);\n\t\tendIndex=semicolonIndex;\n\t}\n\tif((locationStartIndex >= 0) && (locationEndIndex < 0)){\n\t\tlocationEndIndex=endIndex;\n\t}else if(startIndex < endIndex){\n\t\turl.path_=spec.substring(startIndex,endIndex);\n\t}\n\tif((locationStartIndex >= 0) && (locationEndIndex >= 0)){\n\t\turl.location_=spec.substring(locationStartIndex,locationEndIndex);\n\t}\n\treturn url;\n}","Original_Lines":55,"Target_Lines":29,"Manual":"private static Url parseUrl(final String spec){\n\tfinal Url url=new Url();\n\tint startIndex=0;\n\tint endIndex=spec.length();\n\tfinal int crosshatchIndex=indexOf(spec,'#',startIndex,endIndex);\n\tif(crosshatchIndex >= 0){...\n\t}\n\tfinal int colonIndex=indexOf(spec,':',startIndex,endIndex);\n\tif(colonIndex > 0){...\n\t}\n\tfinal int locationStartIndex;\n\tint locationEndIndex;\n\tif(spec.startsWith(\"//\",startIndex)){...\n\t}else {...\n\t}\n\tfinal int questionMarkIndex=indexOf(spec,'?',startIndex,endIndex);\n\tif(questionMarkIndex >= 0){...\n\t}\n\tfinal int semicolonIndex=indexOf(spec,';',startIndex,endIndex);\n\tif(semicolonIndex >= 0){...\n\t}\n\tif((locationStartIndex >= 0) && (locationEndIndex < 0)){\n\t\tlocationEndIndex=endIndex;\n\t}else if(startIndex < endIndex){\n\t\turl.path_=spec.substring(startIndex,endIndex);\n\t}\n\tif((locationStartIndex >= 0) && (locationEndIndex >= 0)){\n\t\turl.location_=spec.substring(locationStartIndex,locationEndIndex);\n\t}\n\treturn url;\n}","Distance":0.39285714285714285,"Automatic":"private static Url parseUrl(final String spec){\n\tfinal Url url=new Url();\n\tint startIndex=0;\n\tint endIndex=spec.length();\n\tfinal int crosshatchIndex=indexOf(spec,'#',startIndex,endIndex);\n\tif(crosshatchIndex >= 0){...\n\t\tendIndex=crosshatchIndex;\n\t}\n\tfinal int colonIndex=indexOf(spec,':',startIndex,endIndex);\n\tif(colonIndex > 0){\n\t\tfinal String scheme=spec.substring(startIndex,colonIndex);...\n\t}\n\tfinal int locationStartIndex;\n\tint locationEndIndex;...\n\tfinal int questionMarkIndex=indexOf(spec,'?',startIndex,endIndex);...\n\tfinal int semicolonIndex=indexOf(spec,';',startIndex,endIndex);\n\tif(semicolonIndex >= 0){\n\t\tif((locationStartIndex >= 0) && (locationEndIndex < 0)){\n\t\t\tlocationEndIndex=semicolonIndex;\n\t\t\tstartIndex=semicolonIndex;\n\t\t}\n\t\turl.parameters_=spec.substring(semicolonIndex + 1,endIndex);\n\t\tendIndex=semicolonIndex;\n\t}\n\tif((locationStartIndex >= 0) && (locationEndIndex < 0)){\n\t\tlocationEndIndex=endIndex;\n\t}else if(startIndex < endIndex){\n\t\turl.path_=spec.substring(startIndex,endIndex);\n\t}...\n\treturn url;\n}"},{"Origin":"public static void sort(final String[] array,final Comparator<String> c,final int lo,final int hi){\n\tfinal int m=(lo + hi) / 2;\n\tfinal String x=array[m];\n\tint i=lo;\n\tint j=hi;\n\tdo{\n\t\twhile(c.compare(x,array[i]) > 0){\n\t\t\ti++;\n\t\t}\n\t\twhile(c.compare(x,array[j]) < 0){\n\t\t\tj--;\n\t\t}\n\t\tif(i <= j){\n\t\t\tfinal String s=array[i];\n\t\t\tarray[i]=array[j];\n\t\t\tarray[j]=s;\n\t\t\ti++;\n\t\t\tj--;\n\t\t}\n\t}while(i <= j)\n\tif(lo < j){\n\t\tsort(array,c,lo,j);\n\t}\n\tif(i < hi){\n\t\tsort(array,c,i,hi);\n\t}\n}","Original_Lines":25,"Target_Lines":20,"Manual":"public static void sort(final String[] array,final Comparator<String> c,final int lo,final int hi){\n\tfinal int m=(lo + hi) / 2;\n\tfinal String x=array[m];\n\tint i=lo;\n\tint j=hi;\n\tdo{\n\t\twhile(c.compare(x,array[i]) > 0){\n\t\t\ti++;\n\t\t}\n\t\twhile(c.compare(x,array[j]) < 0){\n\t\t\tj--;\n\t\t}\n\t\tif(i <= j){...\n\t\t}\n\t}while(i <= j)\n\tif(lo < j){\n\t\tsort(array,c,lo,j);\n\t}\n\tif(i < hi){\n\t\tsort(array,c,i,hi);\n\t}\n}","Distance":0.47368421052631576,"Automatic":"public static void sort(final String[] array,final Comparator<String> c,final int lo,final int hi){\n\tfinal int m=(lo + hi) / 2;\n\tfinal String x=array[m];\n\tint i=lo;\n\tint j=hi;\n\tdo{\n\t\twhile(c.compare(x,array[i]) > 0){\n\t\t\ti++;\n\t\t}\n\t\twhile(c.compare(x,array[j]) < 0){\n\t\t\tj--;\n\t\t}\n\t\tif(i <= j){\n\t\t\tfinal String s=array[i];\n\t\t\tarray[i]=array[j];\n\t\t\tarray[j]=s;\n\t\t\ti++;\n\t\t\tj--;\n\t\t}\n\t}while(i <= j)...\n}"},{"Origin":"public void processDocument(BufferedReader document) throws IOException {\n\tQueue<String> prevWords=new ArrayDeque<String>();\n\tQueue<String> nextWords=new ArrayDeque<String>();\n\tIterator<String> it=IteratorFactory.tokenizeOrdered(document);\n\tMap<String,DoubleVector> documentVectors=new HashMap<String,DoubleVector>();\n\tfor (int i=0; i < nextSize && it.hasNext(); ++i)\n\t\tnextWords.offer(it.next().intern());\n\tprevWords.offer(IteratorFactory.EMPTY_TOKEN);\n\tString focusWord=null;\n\twhile(!nextWords.isEmpty()){\n\t\tfocusWord=nextWords.remove();\n\t\tif(it.hasNext())\n\t\t\tnextWords.offer(it.next().intern());\n\t\tif(!focusWord.equals(IteratorFactory.EMPTY_TOKEN)){\n\t\t\tDoubleVector meaning=termHolographs.get(focusWord);\n\t\t\tif(meaning == null){\n\t\t\t\tmeaning=new DenseVector(indexVectorSize);\n\t\t\t\tdocumentVectors.put(focusWord,meaning);\n\t\t\t}\n\t\t\tupdateMeaning(meaning,prevWords,nextWords);\n\t\t}\n\t\tprevWords.offer(focusWord);\n\t\tif(prevWords.size() > 1)\n\t\t\tprevWords.remove();\n\t}\n\tfor (Map.Entry<String,DoubleVector> entry : documentVectors.entrySet()){\n\t\tsynchronized (entry.getKey()){\n\t\t\tDoubleVector existingVector=termHolographs.get(entry.getKey());\n\t\t\tif(existingVector == null)\n\t\t\t\ttermHolographs.put(entry.getKey(),entry.getValue());\n\t\t\telse \n\t\t\t\tVectorMath.add(existingVector,entry.getValue());\n\t\t}\n\t}\n}","Original_Lines":33,"Target_Lines":31,"Manual":"public void processDocument(BufferedReader document) throws IOException {\n\tQueue<String> prevWords=new ArrayDeque<String>();\n\tQueue<String> nextWords=new ArrayDeque<String>();\n\tIterator<String> it=IteratorFactory.tokenizeOrdered(document);\n\tMap<String,DoubleVector> documentVectors=new HashMap<String,DoubleVector>();...\n\tprevWords.offer(IteratorFactory.EMPTY_TOKEN);\n\tString focusWord=null;\n\twhile(!nextWords.isEmpty()){\n\t\tfocusWord=nextWords.remove();\n\t\tif(it.hasNext())\n\t\t\tnextWords.offer(it.next().intern());\n\t\tif(!focusWord.equals(IteratorFactory.EMPTY_TOKEN)){\n\t\t\tDoubleVector meaning=termHolographs.get(focusWord);\n\t\t\tif(meaning == null){\n\t\t\t\tmeaning=new DenseVector(indexVectorSize);\n\t\t\t\tdocumentVectors.put(focusWord,meaning);\n\t\t\t}\n\t\t\tupdateMeaning(meaning,prevWords,nextWords);\n\t\t}\n\t\tprevWords.offer(focusWord);\n\t\tif(prevWords.size() > 1)\n\t\t\tprevWords.remove();\n\t}\n\tfor (Map.Entry<String,DoubleVector> entry : documentVectors.entrySet()){\n\t\tsynchronized (entry.getKey()){\n\t\t\tDoubleVector existingVector=termHolographs.get(entry.getKey());\n\t\t\tif(existingVector == null)\n\t\t\t\ttermHolographs.put(entry.getKey(),entry.getValue());\n\t\t\telse \n\t\t\t\tVectorMath.add(existingVector,entry.getValue());\n\t\t}\n\t}\n}","Distance":0,"Automatic":"public void processDocument(BufferedReader document) throws IOException {\n\tQueue<String> prevWords=new ArrayDeque<String>();\n\tQueue<String> nextWords=new ArrayDeque<String>();\n\tIterator<String> it=IteratorFactory.tokenizeOrdered(document);\n\tMap<String,DoubleVector> documentVectors=new HashMap<String,DoubleVector>();...\n\tprevWords.offer(IteratorFactory.EMPTY_TOKEN);\n\tString focusWord=null;\n\twhile(!nextWords.isEmpty()){\n\t\tfocusWord=nextWords.remove();\n\t\tif(it.hasNext())\n\t\t\tnextWords.offer(it.next().intern());\n\t\tif(!focusWord.equals(IteratorFactory.EMPTY_TOKEN)){\n\t\t\tDoubleVector meaning=termHolographs.get(focusWord);\n\t\t\tif(meaning == null){\n\t\t\t\tmeaning=new DenseVector(indexVectorSize);\n\t\t\t\tdocumentVectors.put(focusWord,meaning);\n\t\t\t}\n\t\t\tupdateMeaning(meaning,prevWords,nextWords);\n\t\t}\n\t\tprevWords.offer(focusWord);\n\t\tif(prevWords.size() > 1)\n\t\t\tprevWords.remove();\n\t}\n\tfor (Map.Entry<String,DoubleVector> entry : documentVectors.entrySet()){\n\t\tsynchronized (entry.getKey()){\n\t\t\tDoubleVector existingVector=termHolographs.get(entry.getKey());\n\t\t\tif(existingVector == null)\n\t\t\t\ttermHolographs.put(entry.getKey(),entry.getValue());\n\t\t\telse \n\t\t\t\tVectorMath.add(existingVector,entry.getValue());\n\t\t}\n\t}\n}"},{"Origin":"public static String cluster(Assignment[] clusterAssignment,File matrixFile,String clmethod,String crtFun,File outputFile,int numClusters) throws IOException {\n\tString commandLine=\"vcluster \" + \"-clmethod=\" + clmethod + \" \"+ \"-clustfile=\"+ outputFile+ \" \"+ \"-crfun=\"+ crtFun+ \" \"+ matrixFile+ \" \"+ numClusters;\n\tLOGGER.fine(\"executing: \" + commandLine);\n\tProcess cluto=Runtime.getRuntime().exec(commandLine);\n\tBufferedReader stdout=new BufferedReader(new InputStreamReader(cluto.getInputStream()));\n\tBufferedReader stderr=new BufferedReader(new InputStreamReader(cluto.getErrorStream()));\n\tString clutoOutput=null;\n\tStringBuilder output=new StringBuilder(\"Cluto output:\\n\");\n\tfor (String line=null; (line=stdout.readLine()) != null; )\n\t\toutput.append(line).append(\"\\n\");\n\tclutoOutput=output.toString();\n\tif(LOGGER.isLoggable(Level.FINE))\n\t\tLOGGER.fine(clutoOutput);\n\tint exitStatus=0;\n\ttry {\n\t\texitStatus=cluto.waitFor();\n\t} catch (InterruptedException ie){\n\t\tLOGGER.log(Level.SEVERE,\"Cluto\",ie);\n\t} \n\tLOGGER.finer(\"Cluto exit status: \" + exitStatus);\n\tif(exitStatus == 0 && clusterAssignment != null)\n\t\textractAssignments(outputFile,clusterAssignment);\n\telse if(exitStatus != 0){\n\t\tStringBuilder sb=new StringBuilder();\n\t\tfor (String line=null; (line=stderr.readLine()) != null; )\n\t\t\tsb.append(line).append(\"\\n\");\n\t\tLOGGER.warning(\"Cluto exited with error status.  \" + exitStatus + \" stderr:\\n\"+ sb.toString());\n\t\tthrow new Error(\"Clustering failed\");\n\t}\n\tstdout.close();\n\tstderr.close();\n\treturn clutoOutput;\n}","Original_Lines":31,"Target_Lines":10,"Manual":"public static String cluster(Assignment[] clusterAssignment,File matrixFile,String clmethod,String crtFun,File outputFile,int numClusters) throws IOException {...\n\tint exitStatus=0;\n\ttry {\n\t\texitStatus=cluto.waitFor();\n\t} catch (InterruptedException ie){...\n\t} ...\n\tif(exitStatus == 0 && clusterAssignment != null)\n\t\textractAssignments(outputFile,clusterAssignment);\n\telse if(exitStatus != 0){...\n\t}...\n\treturn clutoOutput;\n}","Distance":0.6666666666666666,"Automatic":"public static String cluster(Assignment[] clusterAssignment,File matrixFile,String clmethod,String crtFun,File outputFile,int numClusters) throws IOException {\n\tString commandLine=\"vcluster \" + \"-clmethod=\" + clmethod + \" \"+ \"-clustfile=\"+ outputFile+ \" \"+ \"-crfun=\"+ crtFun+ \" \"+ matrixFile+ \" \"+ numClusters;...\n\tProcess cluto=Runtime.getRuntime().exec(commandLine);...\n\tString clutoOutput=null;\n\tStringBuilder output=new StringBuilder(\"Cluto output:\\n\");...\n\tint exitStatus=0;...\n\tif(exitStatus == 0 && clusterAssignment != null)\n\t\textractAssignments(outputFile,clusterAssignment);\n\telse if(exitStatus != 0){\n\t\tStringBuilder sb=new StringBuilder();...\n\t}...\n}"},{"Origin":"public Assignment[] cluster(Matrix matrix,Properties props){\n\tString minSimProp=props.getProperty(MIN_CLUSTER_SIMILARITY_PROPERTY);\n\tString numClustProp=props.getProperty(NUM_CLUSTERS_PROPERTY);\n\tString simFuncProp=props.getProperty(SIMILARITY_FUNCTION_PROPERTY);\n\tString linkageProp=props.getProperty(CLUSTER_LINKAGE_PROPERTY);\n\tSimType simFunc=SimType.valueOf((simFuncProp == null) ? DEFAULT_SIMILARITY_FUNCTION_PROPERTY : simFuncProp);\n\tClusterLinkage linkage=ClusterLinkage.valueOf((linkageProp == null) ? DEFAULT_CLUSTER_LINKAGE_PROPERTY : linkageProp);\n\tif(minSimProp == null && numClustProp == null)\n\t\tthrow new IllegalArgumentException(\"This class requires either a specified number of clusters or \" + \"a minimum cluster similarity threshold in order to partition \" + \"throw rows of the input.  Either needs to be provided as a \"+ \"property\");\n\telse if(minSimProp != null && numClustProp != null)\n\t\tthrow new IllegalArgumentException(\"Cannot specify both a fixed number of clusters AND a minimum \" + \"cluster similarity as input properties\");\n\telse if(minSimProp != null){\n\t\ttry {\n\t\t\tdouble clusterSimThresh=Double.parseDouble(minSimProp);\n\t\t\treturn toAssignments(cluster(matrix,clusterSimThresh,linkage,simFunc,-1));\n\t\t} catch (NumberFormatException nfe){\n\t\t\tthrow new IllegalArgumentException(\"Cluster similarity threshold was not a valid double: \" + minSimProp);\n\t\t} \n\t}else {\n\t\treturn cluster(matrix,-1,props);\n\t}\n}","Original_Lines":20,"Target_Lines":17,"Manual":"public Assignment[] cluster(Matrix matrix,Properties props){\n\tString minSimProp=props.getProperty(MIN_CLUSTER_SIMILARITY_PROPERTY);\n\tString numClustProp=props.getProperty(NUM_CLUSTERS_PROPERTY);\n\tString simFuncProp=props.getProperty(SIMILARITY_FUNCTION_PROPERTY);\n\tString linkageProp=props.getProperty(CLUSTER_LINKAGE_PROPERTY);\n\tSimType simFunc=SimType.valueOf((simFuncProp == null) ? DEFAULT_SIMILARITY_FUNCTION_PROPERTY : simFuncProp);\n\tClusterLinkage linkage=ClusterLinkage.valueOf((linkageProp == null) ? DEFAULT_CLUSTER_LINKAGE_PROPERTY : linkageProp);\n\tif(minSimProp == null && numClustProp == null)...\n\telse if(minSimProp != null && numClustProp != null)...\n\telse if(minSimProp != null){\n\t\ttry {\n\t\t\tdouble clusterSimThresh=Double.parseDouble(minSimProp);\n\t\t\treturn toAssignments(cluster(matrix,clusterSimThresh,linkage,simFunc,-1));\n\t\t} catch (NumberFormatException nfe){...\n\t\t} \n\t}else {\n\t\treturn cluster(matrix,-1,props);\n\t}\n}","Distance":0.07142857142857142,"Automatic":"public Assignment[] cluster(Matrix matrix,Properties props){\n\tString minSimProp=props.getProperty(MIN_CLUSTER_SIMILARITY_PROPERTY);\n\tString numClustProp=props.getProperty(NUM_CLUSTERS_PROPERTY);\n\tString simFuncProp=props.getProperty(SIMILARITY_FUNCTION_PROPERTY);\n\tString linkageProp=props.getProperty(CLUSTER_LINKAGE_PROPERTY);\n\tSimType simFunc=SimType.valueOf((simFuncProp == null) ? DEFAULT_SIMILARITY_FUNCTION_PROPERTY : simFuncProp);\n\tClusterLinkage linkage=ClusterLinkage.valueOf((linkageProp == null) ? DEFAULT_CLUSTER_LINKAGE_PROPERTY : linkageProp);\n\tif(minSimProp == null && numClustProp == null)...\n\telse if(minSimProp != null && numClustProp != null)\n\t\tthrow new IllegalArgumentException(\"Cannot specify both a fixed number of clusters AND a minimum \" + \"cluster similarity as input properties\");\n\telse if(minSimProp != null){\n\t\ttry {\n\t\t\tdouble clusterSimThresh=Double.parseDouble(minSimProp);\n\t\t\treturn toAssignments(cluster(matrix,clusterSimThresh,linkage,simFunc,-1));\n\t\t} catch (NumberFormatException nfe){...\n\t\t} \n\t}else {\n\t\treturn cluster(matrix,-1,props);\n\t}\n}"},{"Origin":"private static int[] cluster(Matrix m,double clusterSimilarityThreshold,ClusterLinkage linkage,SimType similarityFunction,int maxNumberOfClusters){\n\tint rows=m.rows();\n\tLOGGER.info(\"Generating similarity matrix for \" + rows + \" data points\");\n\tMatrix similarityMatrix=computeSimilarityMatrix(m,similarityFunction);\n\tMap<Integer,Set<Integer>> clusterAssignment=generateInitialAssignment(rows);\n\tLOGGER.info(\"Calculating initial inter-cluster similarity using \" + linkage);\n\tMap<Integer,Pairing> clusterSimilarities=new HashMap<Integer,Pairing>();\n\tfor (Integer clusterId : clusterAssignment.keySet()){\n\t\tclusterSimilarities.put(clusterId,findMostSimilar(clusterAssignment,clusterId,linkage,similarityMatrix));\n\t}\n\tLOGGER.info(\"Assigning clusters\");\n\tint nextClusterId=rows;\n\twhile(clusterAssignment.size() > maxNumberOfClusters){\n\t\tint cluster1index=0;\n\t\tint cluster2index=0;\n\t\tdouble highestSimilarity=-1;\n\t\tfor (Map.Entry<Integer,Pairing> e : clusterSimilarities.entrySet()){\n\t\t\tPairing p=e.getValue();\n\t\t\tInteger i=e.getKey();\n\t\t\tInteger j=p.pairedIndex;\n\t\t\tif(p.similarity > highestSimilarity){\n\t\t\t\tcluster1index=i;\n\t\t\t\tcluster2index=j;\n\t\t\t\thighestSimilarity=p.similarity;\n\t\t\t}\n\t\t}\n\t\tif(maxNumberOfClusters < 1 && highestSimilarity < clusterSimilarityThreshold)\n\t\t\tbreak;\n\t\tint newClusterId=nextClusterId++;\n\t\tSet<Integer> cluster1=clusterAssignment.get(cluster1index);\n\t\tSet<Integer> cluster2=clusterAssignment.get(cluster2index);\n\t\tLOGGER.log(Level.FINE,\"Merged cluster {0} with {1}\",new Object[]{cluster1,cluster2});\n\t\tcluster1.addAll(cluster2);\n\t\tclusterAssignment.put(newClusterId,cluster1);\n\t\tclusterAssignment.remove(cluster1index);\n\t\tclusterAssignment.remove(cluster2index);\n\t\tclusterSimilarities.remove(cluster1index);\n\t\tclusterSimilarities.remove(cluster2index);\n\t\tdouble mostSimilarToMerged=-1;\n\t\tInteger mostSimilarToMergedId=null;\n\t\tif(clusterSimilarities.isEmpty())\n\t\t\tbreak;\n\t\tfor (Map.Entry<Integer,Pairing> e : clusterSimilarities.entrySet()){\n\t\t\tInteger clusterId=e.getKey();\n\t\t\tdouble simToNewCluster=getSimilarity(similarityMatrix,cluster1,clusterAssignment.get(clusterId),linkage);\n\t\t\tif(simToNewCluster > mostSimilarToMerged){\n\t\t\t\tmostSimilarToMerged=simToNewCluster;\n\t\t\t\tmostSimilarToMergedId=clusterId;\n\t\t\t}\n\t\t\tPairing p=e.getValue();\n\t\t\tif(p.pairedIndex == cluster1index || p.pairedIndex == cluster2index){\n\t\t\t\te.setValue(findMostSimilar(clusterAssignment,clusterId,linkage,similarityMatrix));\n\t\t\t}\n\t\t}\n\t\tclusterSimilarities.put(newClusterId,new Pairing(mostSimilarToMerged,mostSimilarToMergedId));\n\t}\n\treturn toAssignArray(clusterAssignment,rows);\n}","Original_Lines":56,"Target_Lines":28,"Manual":"private static int[] cluster(Matrix m,double clusterSimilarityThreshold,ClusterLinkage linkage,SimType similarityFunction,int maxNumberOfClusters){\n\tint rows=m.rows();...\n\tMatrix similarityMatrix=computeSimilarityMatrix(m,similarityFunction);\n\tMap<Integer,Set<Integer>> clusterAssignment=generateInitialAssignment(rows);...\n\tMap<Integer,Pairing> clusterSimilarities=new HashMap<Integer,Pairing>();...\n\tint nextClusterId=rows;\n\twhile(clusterAssignment.size() > maxNumberOfClusters){\n\t\tint cluster1index=0;\n\t\tint cluster2index=0;...\n\t\tfor (Map.Entry<Integer,Pairing> e : clusterSimilarities.entrySet()){\n\t\t\tPairing p=e.getValue();\n\t\t\tInteger i=e.getKey();\n\t\t\tInteger j=p.pairedIndex;\n\t\t\tif(p.similarity > highestSimilarity){\n\t\t\t\tcluster1index=i;\n\t\t\t\tcluster2index=j;\n\t\t\t\thighestSimilarity=p.similarity;\n\t\t\t}\n\t\t}...\n\t\tint newClusterId=nextClusterId++;\n\t\tSet<Integer> cluster1=clusterAssignment.get(cluster1index);\n\t\tSet<Integer> cluster2=clusterAssignment.get(cluster2index);...\n\t\tcluster1.addAll(cluster2);...\n\t\tfor (Map.Entry<Integer,Pairing> e : clusterSimilarities.entrySet()){\n\t\t\tInteger clusterId=e.getKey();\n\t\t\tdouble simToNewCluster=getSimilarity(similarityMatrix,cluster1,clusterAssignment.get(clusterId),linkage);...\n\t\t}...\n\t}\n\treturn toAssignArray(clusterAssignment,rows);\n}","Distance":0.36666666666666664,"Automatic":"private static int[] cluster(Matrix m,double clusterSimilarityThreshold,ClusterLinkage linkage,SimType similarityFunction,int maxNumberOfClusters){\n\tint rows=m.rows();...\n\tMatrix similarityMatrix=computeSimilarityMatrix(m,similarityFunction);\n\tMap<Integer,Set<Integer>> clusterAssignment=generateInitialAssignment(rows);...\n\tMap<Integer,Pairing> clusterSimilarities=new HashMap<Integer,Pairing>();...\n\tint nextClusterId=rows;\n\twhile(clusterAssignment.size() > maxNumberOfClusters){\n\t\tint cluster1index=0;\n\t\tint cluster2index=0;\n\t\tdouble highestSimilarity=-1;\n\t\tfor (Map.Entry<Integer,Pairing> e : clusterSimilarities.entrySet()){\n\t\t\tPairing p=e.getValue();\n\t\t\tInteger i=e.getKey();\n\t\t\tInteger j=p.pairedIndex;...\n\t\t}...\n\t\tint newClusterId=nextClusterId++;\n\t\tSet<Integer> cluster1=clusterAssignment.get(cluster1index);\n\t\tSet<Integer> cluster2=clusterAssignment.get(cluster2index);...\n\t\tcluster1.addAll(cluster2);...\n\t\tclusterAssignment.remove(cluster1index);\n\t\tclusterAssignment.remove(cluster2index);...\n\t\tdouble mostSimilarToMerged=-1;\n\t\tInteger mostSimilarToMergedId=null;...\n\t\tfor (Map.Entry<Integer,Pairing> e : clusterSimilarities.entrySet()){\n\t\t\tInteger clusterId=e.getKey();\n\t\t\tdouble simToNewCluster=getSimilarity(similarityMatrix,cluster1,clusterAssignment.get(clusterId),linkage);...\n\t\t\tPairing p=e.getValue();...\n\t\t}...\n\t}...\n}"},{"Origin":"private String describeImpl(Session session) throws Exception {\n\tStringBuffer sb;\n\tsb=new StringBuffer();\n\tswitch (type){\n\tcase SELECT:{\n\t\tsb.append(select.describe(session));\n\t\tappendParms(sb).append('\\n');\n\t\tappendSubqueries(sb);\n\t\treturn sb.toString();\n\t}\n\tcase INSERT_VALUES:{\n\t\tsb.append(\"INSERT VALUES\");\n\t\tsb.append('[').append('\\n');\n\t\tappendColumns(sb).append('\\n');\n\t\tappendTable(sb).append('\\n');\n\t\tappendParms(sb).append('\\n');\n\t\tappendSubqueries(sb).append(']');\n\t\treturn sb.toString();\n\t}\n\tcase INSERT_SELECT:{\n\t\tsb.append(\"INSERT SELECT\");\n\t\tsb.append('[').append('\\n');\n\t\tappendColumns(sb).append('\\n');\n\t\tappendTable(sb).append('\\n');\n\t\tsb.append(select.describe(session)).append('\\n');\n\t\tappendParms(sb).append('\\n');\n\t\tappendSubqueries(sb).append(']');\n\t\treturn sb.toString();\n\t}\n\tcase UPDATE:{\n\t\tsb.append(\"UPDATE\");\n\t\tsb.append('[').append('\\n');\n\t\tappendColumns(sb).append('\\n');\n\t\tappendTable(sb).append('\\n');\n\t\tappendCondition(session,sb);\n\t\tsb.append(targetFilter.describe(session)).append('\\n');\n\t\tappendParms(sb).append('\\n');\n\t\tappendSubqueries(sb).append(']');\n\t\treturn sb.toString();\n\t}\n\tcase DELETE:{\n\t\tsb.append(\"DELETE\");\n\t\tsb.append('[').append('\\n');\n\t\tappendTable(sb).append('\\n');\n\t\tappendCondition(session,sb);\n\t\tsb.append(targetFilter.describe(session)).append('\\n');\n\t\tappendParms(sb).append('\\n');\n\t\tappendSubqueries(sb).append(']');\n\t\treturn sb.toString();\n\t}\n\tcase CALL:{\n\t\tsb.append(\"CALL\");\n\t\tsb.append('[');\n\t\tsb.append(expression.describe(session)).append('\\n');\n\t\tappendParms(sb).append('\\n');\n\t\tappendSubqueries(sb).append(']');\n\t\treturn sb.toString();\n\t}\n\tdefault :{\n\t\treturn \"UNKNOWN\";\n\t}\n\t}\n}","Original_Lines":61,"Target_Lines":23,"Manual":"private String describeImpl(Session session) throws Exception {\n\tStringBuffer sb;\n\tsb=new StringBuffer();\n\tswitch (type){\n\tcase SELECT:{\n\t\tsb.append(select.describe(session));\n\t\tappendParms(sb).append('\\n');\n\t\tappendSubqueries(sb);\n\t\treturn sb.toString();\n\t}\n\tcase INSERT_VALUES:{...\n\t}\n\tcase INSERT_SELECT:{...\n\t}\n\tcase UPDATE:{...\n\t}\n\tcase DELETE:{...\n\t}\n\tcase CALL:{...\n\t}\n\tdefault :{\n\t\treturn \"UNKNOWN\";\n\t}\n\t}\n}","Distance":0.0625,"Automatic":"private String describeImpl(Session session) throws Exception {\n\tStringBuffer sb;\n\tsb=new StringBuffer();\n\tswitch (type){\n\tcase SELECT:{\n\t\tsb.append(select.describe(session));\n\t\tappendParms(sb).append('\\n');\n\t\tappendSubqueries(sb);\n\t\treturn sb.toString();\n\t}\n\tcase INSERT_VALUES:{...\n\t}\n\tcase INSERT_SELECT:{...\n\t\treturn sb.toString();\n\t}\n\tcase UPDATE:{...\n\t}\n\tcase DELETE:{...\n\t}\n\tcase CALL:{...\n\t}\n\tdefault :{\n\t\treturn \"UNKNOWN\";\n\t}\n\t}\n}"},{"Origin":"private Result executeDeleteStatement(CompiledStatement cs) throws HsqlException {\n\tTable table=cs.targetTable;\n\tTableFilter filter=cs.targetFilter;\n\tint count=0;\n\tif(filter.findFirst(session)){\n\t\tExpression c=cs.condition;\n\t\tHsqlArrayList del;\n\t\tdel=new HsqlArrayList();\n\t\tdo{\n\t\t\tif(c == null || c.testCondition(session)){\n\t\t\t\tdel.add(filter.currentRow);\n\t\t\t}\n\t\t}while(filter.next(session))\n\t\tcount=table.delete(session,del);\n\t}\n\tupdateResult.updateCount=count;\n\treturn updateResult;\n}","Original_Lines":16,"Target_Lines":9,"Manual":"private Result executeDeleteStatement(CompiledStatement cs) throws HsqlException {...\n\tif(filter.findFirst(session)){\n\t\tExpression c=cs.condition;...\n\t\tdo{\n\t\t\tif(c == null || c.testCondition(session)){\n\t\t\t\tdel.add(filter.currentRow);\n\t\t\t}\n\t\t}while(filter.next(session))...\n\t}...\n\treturn updateResult;\n}","Distance":0.7272727272727273,"Automatic":"private Result executeDeleteStatement(CompiledStatement cs) throws HsqlException {\n\tTable table=cs.targetTable;\n\tTableFilter filter=cs.targetFilter;\n\tint count=0;\n\tif(filter.findFirst(session)){\n\t\tExpression c=cs.condition;\n\t\tHsqlArrayList del;\n\t\tdel=new HsqlArrayList();...\n\t}...\n\treturn updateResult;\n}"},{"Origin":"private Result executeInsertSelectStatement(CompiledStatement cs) throws HsqlException {\n\tTable t=cs.targetTable;\n\tSelect s=cs.select;\n\tint[] ct=t.getColumnTypes();\n\tResult r=s.getResult(session,Integer.MAX_VALUE);\n\tRecord rc=r.rRoot;\n\tint[] cm=cs.columnMap;\n\tboolean[] ccl=cs.checkColumns;\n\tint len=cm.length;\n\tObject[] row;\n\tint count;\n\tboolean success=false;\n\tsession.beginNestedTransaction();\n\ttry {\n\t\twhile(rc != null){\n\t\t\trow=t.getNewRowData(session,ccl);\n\t\t\tfor (int i=0; i < len; i++){\n\t\t\t\tint j=cm[i];\n\t\t\t\tif(ct[j] != r.metaData.colTypes[i]){\n\t\t\t\t\trow[j]=Column.convertObject(rc.data[i],ct[j]);\n\t\t\t\t}else {\n\t\t\t\t\trow[j]=rc.data[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\trc.data=row;\n\t\t\trc=rc.next;\n\t\t}\n\t\tcount=t.insert(session,r);\n\t\tsuccess=true;\n\t} finally {\n\t\tsession.endNestedTransaction(!success);\n\t} \n\tupdateResult.updateCount=count;\n\treturn updateResult;\n}","Original_Lines":33,"Target_Lines":18,"Manual":"private Result executeInsertSelectStatement(CompiledStatement cs) throws HsqlException {...\n\ttry {\n\t\twhile(rc != null){\n\t\t\trow=t.getNewRowData(session,ccl);\n\t\t\tfor (int i=0; i < len; i++){\n\t\t\t\tint j=cm[i];\n\t\t\t\tif(ct[j] != r.metaData.colTypes[i]){\n\t\t\t\t\trow[j]=Column.convertObject(rc.data[i],ct[j]);\n\t\t\t\t}else {\n\t\t\t\t\trow[j]=rc.data[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\trc.data=row;\n\t\t\trc=rc.next;\n\t\t}\n\t\tcount=t.insert(session,r);...\n\t} finally {...\n\t} ...\n\treturn updateResult;\n}","Distance":0.7272727272727273,"Automatic":"private Result executeInsertSelectStatement(CompiledStatement cs) throws HsqlException {\n\tTable t=cs.targetTable;...\n\tint[] ct=t.getColumnTypes();\n\tResult r=s.getResult(session,Integer.MAX_VALUE);\n\tRecord rc=r.rRoot;\n\tint[] cm=cs.columnMap;...\n\tObject[] row;\n\tint count;\n\tboolean success=false;...\n\ttry {\n\t\twhile(rc != null){\n\t\t\trow=t.getNewRowData(session,ccl);...\n\t\t\trc.data=row;\n\t\t\trc=rc.next;\n\t\t}...\n\t\tsuccess=true;\n\t} finally {\n\t\tsession.endNestedTransaction(!success);\n\t} ...\n\treturn updateResult;\n}"},{"Origin":"private Result executeSelectStatement(CompiledStatement cs) throws HsqlException {\n\tSelect select=cs.select;\n\tResult result;\n\tif(select.sIntoTable != null){\n\t\tsession.checkDDLWrite();\n\t\tboolean exists=session.database.schemaManager.findUserTable(session,select.sIntoTable.name,select.sIntoTable.schema.name) != null;\n\t\tif(exists){\n\t\t\tthrow Trace.error(Trace.TABLE_ALREADY_EXISTS,select.sIntoTable.name);\n\t\t}\n\t\tresult=select.getResult(session,Integer.MAX_VALUE);\n\t\tresult=session.dbCommandInterpreter.processSelectInto(result,select.sIntoTable,select.intoType);\n\t\tsession.getDatabase().setMetaDirty(false);\n\t}else {\n\t\tresult=select.getResult(session,session.getMaxRows());\n\t}\n\treturn result;\n}","Original_Lines":15,"Target_Lines":8,"Manual":"private Result executeSelectStatement(CompiledStatement cs) throws HsqlException {...\n\tif(select.sIntoTable != null){...\n\t\tresult=select.getResult(session,Integer.MAX_VALUE);\n\t\tresult=session.dbCommandInterpreter.processSelectInto(result,select.sIntoTable,select.intoType);\n\t\tsession.getDatabase().setMetaDirty(false);\n\t}else {\n\t\tresult=select.getResult(session,session.getMaxRows());\n\t}\n\treturn result;\n}","Distance":0.5,"Automatic":"private Result executeSelectStatement(CompiledStatement cs) throws HsqlException {\n\tSelect select=cs.select;\n\tResult result;\n\tif(select.sIntoTable != null){...\n\t\tresult=select.getResult(session,Integer.MAX_VALUE);...\n\t}else {\n\t\tresult=select.getResult(session,session.getMaxRows());\n\t}\n\treturn result;\n}"},{"Origin":"private Result executeUpdateStatement(CompiledStatement cs) throws HsqlException {\n\tTable table=cs.targetTable;\n\tTableFilter filter=cs.targetFilter;\n\tint count=0;\n\tif(filter.findFirst(session)){\n\t\tint[] colmap=cs.columnMap;\n\t\tExpression[] colvalues=cs.columnValues;\n\t\tExpression condition=cs.condition;\n\t\tint len=colvalues.length;\n\t\tHashMappedList rowset=new HashMappedList();\n\t\tint size=table.getColumnCount();\n\t\tint[] coltypes=table.getColumnTypes();\n\t\tboolean success=false;\n\t\tdo{\n\t\t\tif(condition == null || condition.testCondition(session)){\n\t\t\t\ttry {\n\t\t\t\t\tRow row=filter.currentRow;\n\t\t\t\t\tObject[] ni=table.getEmptyRowData();\n\t\t\t\t\tSystem.arraycopy(row.getData(),0,ni,0,size);\n\t\t\t\t\tfor (int i=0; i < len; i++){\n\t\t\t\t\t\tint ci=colmap[i];\n\t\t\t\t\t\tni[ci]=colvalues[i].getValue(session,coltypes[ci]);\n\t\t\t\t\t}\n\t\t\t\t\trowset.add(row,ni);\n\t\t\t\t} catch (HsqlInternalException e){\n\t\t\t\t} \n\t\t\t}\n\t\t}while(filter.next(session))\n\t\tsession.beginNestedTransaction();\n\t\ttry {\n\t\t\tcount=table.update(session,rowset,colmap);\n\t\t\tsuccess=true;\n\t\t} finally {\n\t\t\tsession.endNestedTransaction(!success);\n\t\t} \n\t}\n\tupdateResult.updateCount=count;\n\treturn updateResult;\n}","Original_Lines":37,"Target_Lines":18,"Manual":"private Result executeUpdateStatement(CompiledStatement cs) throws HsqlException {...\n\tif(filter.findFirst(session)){...\n\t\tdo{\n\t\t\tif(condition == null || condition.testCondition(session)){\n\t\t\t\ttry {\n\t\t\t\t\tRow row=filter.currentRow;\n\t\t\t\t\tObject[] ni=table.getEmptyRowData();\n\t\t\t\t\tSystem.arraycopy(row.getData(),0,ni,0,size);\n\t\t\t\t\tfor (int i=0; i < len; i++){\n\t\t\t\t\t\tint ci=colmap[i];\n\t\t\t\t\t\tni[ci]=colvalues[i].getValue(session,coltypes[ci]);\n\t\t\t\t\t}\n\t\t\t\t\trowset.add(row,ni);\n\t\t\t\t} catch (HsqlInternalException e){\n\t\t\t\t} \n\t\t\t}\n\t\t}while(filter.next(session))...\n\t}...\n\treturn updateResult;\n}","Distance":0.5555555555555556,"Automatic":"private Result executeUpdateStatement(CompiledStatement cs) throws HsqlException {\n\tTable table=cs.targetTable;...\n\tif(filter.findFirst(session)){\n\t\tint[] colmap=cs.columnMap;\n\t\tExpression[] colvalues=cs.columnValues;\n\t\tExpression condition=cs.condition;...\n\t\tHashMappedList rowset=new HashMappedList();...\n\t\tboolean success=false;\n\t\tdo{\n\t\t\tif(condition == null || condition.testCondition(session)){\n\t\t\t\ttry {\n\t\t\t\t\tRow row=filter.currentRow;\n\t\t\t\t\tObject[] ni=table.getEmptyRowData();...\n\t\t\t\t\trowset.add(row,ni);\n\t\t\t\t} catch (HsqlInternalException e){\n\t\t\t\t} \n\t\t\t}\n\t\t}while(filter.next(session))...\n\t}...\n\treturn updateResult;\n}"},{"Origin":"private Result executePart(int cmd,String token) throws Throwable {\n\tResult result=Session.emptyUpdateCount;\n\tint brackets=0;\n\tif(session.isSchemaDefintion()){\n\t\tswitch (cmd){\n\t\tcase Token.CREATE:\n\t\tcase Token.GRANT:\n\t\t\tbreak;\n\t\tdefault :\n\t\t\tString schema=session.getSchemaName(null);\n\t\t\tsession.endSchemaDefinition();\n\t\t\tdatabase.schemaManager.dropSchema(schema,true);\n\t\t\tthrow Trace.error(Trace.INVALID_IDENTIFIER,Trace.IN_SCHEMA_DEFINITION,new Object[]{token});\n\t\t}\n\t}\n\tswitch (cmd){\n\tcase Token.OPENBRACKET:{\n\t\tbrackets=Parser.parseOpenBrackets(tokenizer) + 1;\n\t\ttokenizer.getThis(Token.T_SELECT);\n\t}\n\tcase Token.SELECT:{\n\t\tParser parser=new Parser(session,database,tokenizer);\n\t\tCompiledStatement cStatement=parser.compileSelectStatement(brackets);\n\t\tif(cStatement.parameters.length != 0){\n\t\t\tTrace.doAssert(false,Trace.getMessage(Trace.ASSERT_DIRECT_EXEC_WITH_PARAM));\n\t\t}\n\t\tresult=session.sqlExecuteCompiledNoPreChecks(cStatement);\n\t\tbreak;\n\t}\n\tcase Token.INSERT:{\n\t\tParser parser=new Parser(session,database,tokenizer);\n\t\tCompiledStatement cStatement=parser.compileInsertStatement();\n\t\tif(cStatement.parameters.length != 0){\n\t\t\tTrace.doAssert(false,Trace.getMessage(Trace.ASSERT_DIRECT_EXEC_WITH_PARAM));\n\t\t}\n\t\tresult=session.sqlExecuteCompiledNoPreChecks(cStatement);\n\t\tbreak;\n\t}\n\tcase Token.UPDATE:{\n\t\tParser parser=new Parser(session,database,tokenizer);\n\t\tCompiledStatement cStatement=parser.compileUpdateStatement();\n\t\tif(cStatement.parameters.length != 0){\n\t\t\tTrace.doAssert(false,Trace.getMessage(Trace.ASSERT_DIRECT_EXEC_WITH_PARAM));\n\t\t}\n\t\tresult=session.sqlExecuteCompiledNoPreChecks(cStatement);\n\t\tbreak;\n\t}\n\tcase Token.DELETE:{\n\t\tParser parser=new Parser(session,database,tokenizer);\n\t\tCompiledStatement cStatement=parser.compileDeleteStatement();\n\t\tif(cStatement.parameters.length != 0){\n\t\t\tTrace.doAssert(false,Trace.getMessage(Trace.ASSERT_DIRECT_EXEC_WITH_PARAM));\n\t\t}\n\t\tresult=session.sqlExecuteCompiledNoPreChecks(cStatement);\n\t\tbreak;\n\t}\n\tcase Token.CALL:{\n\t\tParser parser=new Parser(session,database,tokenizer);\n\t\tCompiledStatement cStatement=parser.compileCallStatement();\n\t\tif(cStatement.parameters.length != 0){\n\t\t\tTrace.doAssert(false,Trace.getMessage(Trace.ASSERT_DIRECT_EXEC_WITH_PARAM));\n\t\t}\n\t\tresult=session.sqlExecuteCompiledNoPreChecks(cStatement);\n\t\tbreak;\n\t}\n\tcase Token.SET:\n\t\tprocessSet();\n\t\tbreak;\n\tcase Token.COMMIT:\n\t\tprocessCommit();\n\t\tbreak;\n\tcase Token.ROLLBACK:\n\t\tprocessRollback();\n\t\tbreak;\n\tcase Token.SAVEPOINT:\n\t\tprocessSavepoint();\n\t\tbreak;\n\tcase Token.CREATE:\n\t\tprocessCreate();\n\t\tdatabase.setMetaDirty(true);\n\t\tbreak;\n\tcase Token.ALTER:\n\t\tprocessAlter();\n\t\tdatabase.setMetaDirty(true);\n\t\tbreak;\n\tcase Token.DROP:\n\t\tprocessDrop();\n\t\tdatabase.setMetaDirty(true);\n\t\tbreak;\n\tcase Token.GRANT:\n\t\tprocessGrantOrRevoke(true);\n\t\tdatabase.setMetaDirty(false);\n\t\tbreak;\n\tcase Token.REVOKE:\n\t\tprocessGrantOrRevoke(false);\n\t\tdatabase.setMetaDirty(true);\n\t\tbreak;\n\tcase Token.CONNECT:\n\t\tprocessConnect();\n\t\tdatabase.setMetaDirty(false);\n\t\tsession.setScripting(false);\n\t\tbreak;\n\tcase Token.DISCONNECT:\n\t\tprocessDisconnect();\n\t\tsession.setScripting(true);\n\t\tbreak;\n\tcase Token.SCRIPT:\n\t\tresult=processScript();\n\t\tbreak;\n\tcase Token.SHUTDOWN:\n\t\tprocessShutdown();\n\t\tbreak;\n\tcase Token.CHECKPOINT:\n\t\tprocessCheckpoint();\n\t\tbreak;\n\tcase Token.EXPLAIN:\n\t\tresult=processExplainPlan();\n\t\tbreak;\n\tcase Token.RELEASE:\n\t\tprocessReleaseSavepoint();\n\t\tbreak;\n\tdefault :\n\t\tthrow Trace.error(Trace.UNEXPECTED_TOKEN,token);\n\t}\n\treturn result;\n}","Original_Lines":124,"Target_Lines":43,"Manual":"private Result executePart(int cmd,String token) throws Throwable {...\n\tif(session.isSchemaDefintion()){\n\t\tswitch (cmd){\n\t\tcase Token.CREATE:\n\t\tcase Token.GRANT:\n\t\t\tbreak;\n\t\tdefault :...\n\t\t\tthrow Trace.error(Trace.INVALID_IDENTIFIER,Trace.IN_SCHEMA_DEFINITION,new Object[]{token});\n\t\t}\n\t}\n\tswitch (cmd){\n\tcase Token.OPENBRACKET:{\n\t\tbrackets=Parser.parseOpenBrackets(tokenizer) + 1;\n\t\ttokenizer.getThis(Token.T_SELECT);\n\t}\n\tcase Token.SELECT:{...\n\t}\n\tcase Token.INSERT:{...\n\t}\n\tcase Token.UPDATE:{...\n\t}\n\tcase Token.DELETE:{...\n\t}\n\tcase Token.CALL:{...\n\t}\n\tcase Token.SET:...\n\tcase Token.COMMIT:...\n\tcase Token.ROLLBACK:...\n\tcase Token.SAVEPOINT:...\n\tcase Token.CREATE:...\n\tcase Token.ALTER:...\n\tcase Token.DROP:...\n\tcase Token.GRANT:...\n\tcase Token.REVOKE:...\n\tcase Token.CONNECT:...\n\tcase Token.DISCONNECT:...\n\tcase Token.SCRIPT:...\n\tcase Token.SHUTDOWN:...\n\tcase Token.CHECKPOINT:...\n\tcase Token.EXPLAIN:...\n\tcase Token.RELEASE:...\n\tdefault :...\n\t}\n\treturn result;\n}","Distance":0.2926829268292683,"Automatic":"private Result executePart(int cmd,String token) throws Throwable {\n\tResult result=Session.emptyUpdateCount;...\n\tif(session.isSchemaDefintion()){\n\t\tswitch (cmd){\n\t\tcase Token.CREATE:\n\t\tcase Token.GRANT:...\n\t\tdefault :\n\t\t\tString schema=session.getSchemaName(null);...\n\t\t}\n\t}\n\tswitch (cmd){\n\tcase Token.OPENBRACKET:{...\n\t\ttokenizer.getThis(Token.T_SELECT);\n\t}\n\tcase Token.SELECT:{...\n\t}\n\tcase Token.INSERT:{...\n\t}\n\tcase Token.UPDATE:{...\n\t}...\n\tcase Token.SET:\n\t\tprocessSet();...\n\tcase Token.COMMIT:\n\t\tprocessCommit();...\n\tcase Token.ROLLBACK:...\n\tcase Token.SAVEPOINT:...\n\tcase Token.CREATE:\n\t\tprocessCreate();...\n\tcase Token.ALTER:...\n\tcase Token.DROP:...\n\tcase Token.GRANT:...\n\tcase Token.REVOKE:...\n\tcase Token.CONNECT:\n\t\tprocessConnect();...\n\tcase Token.DISCONNECT:...\n\tcase Token.SCRIPT:\n\t\tresult=processScript();...\n\tcase Token.SHUTDOWN:...\n\tcase Token.CHECKPOINT:...\n\tcase Token.EXPLAIN:...\n\tcase Token.RELEASE:...\n\tdefault :...\n\t}\n\treturn result;\n}"},{"Origin":"public static String toString(JSONObject jo) throws JSONException {\n\tIterator keys=jo.keys();\n\tString string;\n\tStringBuffer sb=new StringBuffer();\n\tif(jo.has(\"Status-Code\") && jo.has(\"Reason-Phrase\")){\n\t\tsb.append(jo.getString(\"HTTP-Version\"));\n\t\tsb.append(' ');\n\t\tsb.append(jo.getString(\"Status-Code\"));\n\t\tsb.append(' ');\n\t\tsb.append(jo.getString(\"Reason-Phrase\"));\n\t}else if(jo.has(\"Method\") && jo.has(\"Request-URI\")){\n\t\tsb.append(jo.getString(\"Method\"));\n\t\tsb.append(' ');\n\t\tsb.append('\"');\n\t\tsb.append(jo.getString(\"Request-URI\"));\n\t\tsb.append('\"');\n\t\tsb.append(' ');\n\t\tsb.append(jo.getString(\"HTTP-Version\"));\n\t}else {\n\t\tthrow new JSONException(\"Not enough material for an HTTP header.\");\n\t}\n\tsb.append(CRLF);\n\twhile(keys.hasNext()){\n\t\tstring=keys.next().toString();\n\t\tif(!\"HTTP-Version\".equals(string) && !\"Status-Code\".equals(string) && !\"Reason-Phrase\".equals(string)&& !\"Method\".equals(string)&& !\"Request-URI\".equals(string)&& !jo.isNull(string)){\n\t\t\tsb.append(string);\n\t\t\tsb.append(\": \");\n\t\t\tsb.append(jo.getString(string));\n\t\t\tsb.append(CRLF);\n\t\t}\n\t}\n\tsb.append(CRLF);\n\treturn sb.toString();\n}","Original_Lines":32,"Target_Lines":21,"Manual":"public static String toString(JSONObject jo) throws JSONException {\n\tIterator keys=jo.keys();...\n\tStringBuffer sb=new StringBuffer();\n\tif(jo.has(\"Status-Code\") && jo.has(\"Reason-Phrase\")){\n\t\tsb.append(jo.getString(\"HTTP-Version\"));...\n\t\tsb.append(jo.getString(\"Status-Code\"));...\n\t\tsb.append(jo.getString(\"Reason-Phrase\"));\n\t}else if(jo.has(\"Method\") && jo.has(\"Request-URI\")){\n\t\tsb.append(jo.getString(\"Method\"));...\n\t\tsb.append(jo.getString(\"Request-URI\"));...\n\t\tsb.append(jo.getString(\"HTTP-Version\"));\n\t}else {...\n\t}...\n\twhile(keys.hasNext()){\n\t\tstring=keys.next().toString();\n\t\tif(!\"HTTP-Version\".equals(string) && !\"Status-Code\".equals(string) && !\"Reason-Phrase\".equals(string)&& !\"Method\".equals(string)&& !\"Request-URI\".equals(string)&& !jo.isNull(string)){\n\t\t\tsb.append(string);\n\t\t\tsb.append(\": \");\n\t\t\tsb.append(jo.getString(string));...\n\t\t}\n\t}...\n\treturn sb.toString();\n}","Distance":0.3,"Automatic":"public static String toString(JSONObject jo) throws JSONException {\n\tIterator keys=jo.keys();\n\tString string;\n\tStringBuffer sb=new StringBuffer();\n\tif(jo.has(\"Status-Code\") && jo.has(\"Reason-Phrase\")){\n\t\tsb.append(jo.getString(\"HTTP-Version\"));\n\t\tsb.append(' ');\n\t\tsb.append(jo.getString(\"Status-Code\"));...\n\t\tsb.append(jo.getString(\"Reason-Phrase\"));\n\t}else if(jo.has(\"Method\") && jo.has(\"Request-URI\")){\n\t\tsb.append(jo.getString(\"Method\"));\n\t\tsb.append(' ');...\n\t\tsb.append(jo.getString(\"Request-URI\"));...\n\t\tsb.append(jo.getString(\"HTTP-Version\"));\n\t}else {...\n\t}...\n\twhile(keys.hasNext()){\n\t\tstring=keys.next().toString();\n\t\tif(!\"HTTP-Version\".equals(string) && !\"Status-Code\".equals(string) && !\"Reason-Phrase\".equals(string)&& !\"Method\".equals(string)&& !\"Request-URI\".equals(string)&& !jo.isNull(string)){...\n\t\t\tsb.append(jo.getString(string));...\n\t\t}\n\t}...\n}"},{"Origin":"String toString(int indentFactor,int indent) throws JSONException {\n\tint len=this.length();\n\tif(len == 0){\n\t\treturn \"[]\";\n\t}\n\tint i;\n\tStringBuffer sb=new StringBuffer(\"[\");\n\tif(len == 1){\n\t\tsb.append(JSONObject.valueToString(this.myArrayList.get(0),indentFactor,indent));\n\t}else {\n\t\tint newindent=indent + indentFactor;\n\t\tsb.append('\\n');\n\t\tfor (i=0; i < len; i+=1){\n\t\t\tif(i > 0){\n\t\t\t\tsb.append(\",\\n\");\n\t\t\t}\n\t\t\tfor (int j=0; j < newindent; j+=1){\n\t\t\t\tsb.append(' ');\n\t\t\t}\n\t\t\tsb.append(JSONObject.valueToString(this.myArrayList.get(i),indentFactor,newindent));\n\t\t}\n\t\tsb.append('\\n');\n\t\tfor (i=0; i < indent; i+=1){\n\t\t\tsb.append(' ');\n\t\t}\n\t}\n\tsb.append(']');\n\treturn sb.toString();\n}","Original_Lines":27,"Target_Lines":12,"Manual":"String toString(int indentFactor,int indent) throws JSONException {\n\tint len=this.length();...\n\tStringBuffer sb=new StringBuffer(\"[\");\n\tif(len == 1){\n\t\tsb.append(JSONObject.valueToString(this.myArrayList.get(0),indentFactor,indent));\n\t}else {\n\t\tint newindent=indent + indentFactor;...\n\t\tfor (i=0; i < len; i+=1){...\n\t\t\tsb.append(JSONObject.valueToString(this.myArrayList.get(i),indentFactor,newindent));\n\t\t}...\n\t}\n\tsb.append(']');\n\treturn sb.toString();\n}","Distance":0.6153846153846154,"Automatic":"String toString(int indentFactor,int indent) throws JSONException {\n\tint len=this.length();\n\tif(len == 0){\n\t\treturn \"[]\";\n\t}\n\tint i;\n\tStringBuffer sb=new StringBuffer(\"[\");\n\tif(len == 1){\n\t\tsb.append(JSONObject.valueToString(this.myArrayList.get(0),indentFactor,indent));\n\t}else {\n\t\tint newindent=indent + indentFactor;...\n\t\tsb.append('\\n');...\n\t}...\n}"},{"Origin":"public static String toString(JSONArray ja) throws JSONException {\n\tint i;\n\tJSONObject jo;\n\tString key;\n\tIterator keys;\n\tint length;\n\tObject object;\n\tStringBuffer sb=new StringBuffer();\n\tString tagName;\n\tString value;\n\ttagName=ja.getString(0);\n\tXML.noSpace(tagName);\n\ttagName=XML.escape(tagName);\n\tsb.append('<');\n\tsb.append(tagName);\n\tobject=ja.opt(1);\n\tif(object instanceof JSONObject){\n\t\ti=2;\n\t\tjo=(JSONObject)object;\n\t\tkeys=jo.keys();\n\t\twhile(keys.hasNext()){\n\t\t\tkey=keys.next().toString();\n\t\t\tXML.noSpace(key);\n\t\t\tvalue=jo.optString(key);\n\t\t\tif(value != null){\n\t\t\t\tsb.append(' ');\n\t\t\t\tsb.append(XML.escape(key));\n\t\t\t\tsb.append('=');\n\t\t\t\tsb.append('\"');\n\t\t\t\tsb.append(XML.escape(value));\n\t\t\t\tsb.append('\"');\n\t\t\t}\n\t\t}\n\t}else {\n\t\ti=1;\n\t}\n\tlength=ja.length();\n\tif(i >= length){\n\t\tsb.append('/');\n\t\tsb.append('>');\n\t}else {\n\t\tsb.append('>');\n\t\tdo{\n\t\t\tobject=ja.get(i);\n\t\t\ti+=1;\n\t\t\tif(object != null){\n\t\t\t\tif(object instanceof String){\n\t\t\t\t\tsb.append(XML.escape(object.toString()));\n\t\t\t\t}else if(object instanceof JSONObject){\n\t\t\t\t\tsb.append(toString((JSONObject)object));\n\t\t\t\t}else if(object instanceof JSONArray){\n\t\t\t\t\tsb.append(toString((JSONArray)object));\n\t\t\t\t}\n\t\t\t}\n\t\t}while(i < length)\n\t\tsb.append('<');\n\t\tsb.append('/');\n\t\tsb.append(tagName);\n\t\tsb.append('>');\n\t}\n\treturn sb.toString();\n}","Original_Lines":60,"Target_Lines":42,"Manual":"public static String toString(JSONArray ja) throws JSONException {...\n\tJSONObject jo;...\n\tStringBuffer sb=new StringBuffer();...\n\ttagName=ja.getString(0);\n\tXML.noSpace(tagName);\n\ttagName=XML.escape(tagName);...\n\tsb.append(tagName);\n\tobject=ja.opt(1);\n\tif(object instanceof JSONObject){\n\t\ti=2;\n\t\tjo=(JSONObject)object;\n\t\tkeys=jo.keys();\n\t\twhile(keys.hasNext()){\n\t\t\tkey=keys.next().toString();\n\t\t\tXML.noSpace(key);\n\t\t\tvalue=jo.optString(key);\n\t\t\tif(value != null){...\n\t\t\t\tsb.append(XML.escape(key));...\n\t\t\t\tsb.append(XML.escape(value));...\n\t\t\t}\n\t\t}\n\t}else {\n\t\ti=1;\n\t}\n\tlength=ja.length();\n\tif(i >= length){...\n\t}else {...\n\t\tdo{\n\t\t\tobject=ja.get(i);\n\t\t\ti+=1;\n\t\t\tif(object != null){\n\t\t\t\tif(object instanceof String){\n\t\t\t\t\tsb.append(XML.escape(object.toString()));\n\t\t\t\t}else if(object instanceof JSONObject){\n\t\t\t\t\tsb.append(toString((JSONObject)object));\n\t\t\t\t}else if(object instanceof JSONArray){\n\t\t\t\t\tsb.append(toString((JSONArray)object));\n\t\t\t\t}\n\t\t\t}\n\t\t}while(i < length)...\n\t\tsb.append(tagName);...\n\t}\n\treturn sb.toString();\n}","Distance":0.40476190476190477,"Automatic":"public static String toString(JSONArray ja) throws JSONException {\n\tint i;\n\tJSONObject jo;\n\tString key;\n\tIterator keys;\n\tint length;\n\tObject object;\n\tStringBuffer sb=new StringBuffer();\n\tString tagName;\n\tString value;\n\ttagName=ja.getString(0);\n\tXML.noSpace(tagName);\n\ttagName=XML.escape(tagName);...\n\tobject=ja.opt(1);\n\tif(object instanceof JSONObject){\n\t\ti=2;\n\t\tjo=(JSONObject)object;\n\t\tkeys=jo.keys();\n\t\twhile(keys.hasNext()){\n\t\t\tkey=keys.next().toString();\n\t\t\tXML.noSpace(key);\n\t\t\tvalue=jo.optString(key);...\n\t\t}\n\t}else {\n\t\ti=1;\n\t}\n\tlength=ja.length();\n\tif(i >= length){\n\t\tsb.append('/');\n\t\tsb.append('>');\n\t}else {...\n\t\tdo{\n\t\t\tobject=ja.get(i);\n\t\t\ti+=1;\n\t\t\tif(object != null){\n\t\t\t\tif(object instanceof String){\n\t\t\t\t\tsb.append(XML.escape(object.toString()));\n\t\t\t\t}else if(object instanceof JSONObject){...\n\t\t\t\t}else if(object instanceof JSONArray){...\n\t\t\t\t}\n\t\t\t}\n\t\t}while(i < length)...\n\t}...\n}"},{"Origin":"public static Object stringToValue(String string){\n\tDouble d;\n\tif(string.equals(\"\")){\n\t\treturn string;\n\t}\n\tif(string.equalsIgnoreCase(\"true\")){\n\t\treturn Boolean.TRUE;\n\t}\n\tif(string.equalsIgnoreCase(\"false\")){\n\t\treturn Boolean.FALSE;\n\t}\n\tif(string.equalsIgnoreCase(\"null\")){\n\t\treturn JSONObject.NULL;\n\t}\n\tchar b=string.charAt(0);\n\tif((b >= '0' && b <= '9') || b == '.' || b == '-' || b == '+'){\n\t\ttry {\n\t\t\tif(string.indexOf('.') > -1 || string.indexOf('e') > -1 || string.indexOf('E') > -1){\n\t\t\t\td=Double.valueOf(string);\n\t\t\t\tif(!d.isInfinite() && !d.isNaN()){\n\t\t\t\t\treturn d;\n\t\t\t\t}\n\t\t\t}else {\n\t\t\t\tLong myLong=new Long(string);\n\t\t\t\tif(myLong.longValue() == myLong.intValue()){\n\t\t\t\t\treturn new Integer(myLong.intValue());\n\t\t\t\t}else {\n\t\t\t\t\treturn myLong;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception ignore){\n\t\t} \n\t}\n\treturn string;\n}","Original_Lines":33,"Target_Lines":26,"Manual":"public static Object stringToValue(String string){...\n\tif(string.equalsIgnoreCase(\"false\")){\n\t\treturn Boolean.FALSE;\n\t}\n\tif(string.equalsIgnoreCase(\"null\")){\n\t\treturn JSONObject.NULL;\n\t}\n\tchar b=string.charAt(0);\n\tif((b >= '0' && b <= '9') || b == '.' || b == '-' || b == '+'){\n\t\ttry {\n\t\t\tif(string.indexOf('.') > -1 || string.indexOf('e') > -1 || string.indexOf('E') > -1){\n\t\t\t\td=Double.valueOf(string);\n\t\t\t\tif(!d.isInfinite() && !d.isNaN()){\n\t\t\t\t\treturn d;\n\t\t\t\t}\n\t\t\t}else {\n\t\t\t\tLong myLong=new Long(string);\n\t\t\t\tif(myLong.longValue() == myLong.intValue()){\n\t\t\t\t\treturn new Integer(myLong.intValue());\n\t\t\t\t}else {\n\t\t\t\t\treturn myLong;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception ignore){\n\t\t} \n\t}\n\treturn string;\n}","Distance":0.2631578947368421,"Automatic":"public static Object stringToValue(String string){\n\tDouble d;\n\tif(string.equals(\"\")){\n\t\treturn string;\n\t}...\n\tif(string.equalsIgnoreCase(\"null\")){\n\t\treturn JSONObject.NULL;\n\t}\n\tchar b=string.charAt(0);\n\tif((b >= '0' && b <= '9') || b == '.' || b == '-' || b == '+'){\n\t\ttry {\n\t\t\tif(string.indexOf('.') > -1 || string.indexOf('e') > -1 || string.indexOf('E') > -1){\n\t\t\t\td=Double.valueOf(string);\n\t\t\t\tif(!d.isInfinite() && !d.isNaN()){\n\t\t\t\t\treturn d;\n\t\t\t\t}\n\t\t\t}else {\n\t\t\t\tLong myLong=new Long(string);\n\t\t\t\tif(myLong.longValue() == myLong.intValue()){\n\t\t\t\t\treturn new Integer(myLong.intValue());\n\t\t\t\t}else {\n\t\t\t\t\treturn myLong;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception ignore){\n\t\t} \n\t}\n\treturn string;\n}"},{"Origin":"String toString(int indentFactor,int indent) throws JSONException {\n\tint i;\n\tint length=this.length();\n\tif(length == 0){\n\t\treturn \"{}\";\n\t}\n\tIterator keys=this.keys();\n\tint newindent=indent + indentFactor;\n\tObject object;\n\tStringBuffer sb=new StringBuffer(\"{\");\n\tif(length == 1){\n\t\tobject=keys.next();\n\t\tsb.append(quote(object.toString()));\n\t\tsb.append(\": \");\n\t\tsb.append(valueToString(this.map.get(object),indentFactor,indent));\n\t}else {\n\t\twhile(keys.hasNext()){\n\t\t\tobject=keys.next();\n\t\t\tif(sb.length() > 1){\n\t\t\t\tsb.append(\",\\n\");\n\t\t\t}else {\n\t\t\t\tsb.append('\\n');\n\t\t\t}\n\t\t\tfor (i=0; i < newindent; i+=1){\n\t\t\t\tsb.append(' ');\n\t\t\t}\n\t\t\tsb.append(quote(object.toString()));\n\t\t\tsb.append(\": \");\n\t\t\tsb.append(valueToString(this.map.get(object),indentFactor,newindent));\n\t\t}\n\t\tif(sb.length() > 1){\n\t\t\tsb.append('\\n');\n\t\t\tfor (i=0; i < indent; i+=1){\n\t\t\t\tsb.append(' ');\n\t\t\t}\n\t\t}\n\t}\n\tsb.append('}');\n\treturn sb.toString();\n}","Original_Lines":38,"Target_Lines":16,"Manual":"String toString(int indentFactor,int indent) throws JSONException {...\n\tIterator keys=this.keys();\n\tint newindent=indent + indentFactor;...\n\tStringBuffer sb=new StringBuffer(\"{\");\n\tif(length == 1){\n\t\tobject=keys.next();\n\t\tsb.append(quote(object.toString()));...\n\t\tsb.append(valueToString(this.map.get(object),indentFactor,indent));\n\t}else {\n\t\twhile(keys.hasNext()){\n\t\t\tobject=keys.next();...\n\t\t\tsb.append(quote(object.toString()));...\n\t\t\tsb.append(valueToString(this.map.get(object),indentFactor,newindent));\n\t\t}...\n\t}\n\tsb.append('}');\n\treturn sb.toString();\n}","Distance":0.47058823529411764,"Automatic":"String toString(int indentFactor,int indent) throws JSONException {\n\tint i;\n\tint length=this.length();...\n\tIterator keys=this.keys();\n\tint newindent=indent + indentFactor;\n\tObject object;\n\tStringBuffer sb=new StringBuffer(\"{\");\n\tif(length == 1){\n\t\tobject=keys.next();...\n\t\tsb.append(\": \");\n\t\tsb.append(valueToString(this.map.get(object),indentFactor,indent));\n\t}else {\n\t\twhile(keys.hasNext()){\n\t\t\tobject=keys.next();...\n\t\t\tsb.append(valueToString(this.map.get(object),indentFactor,newindent));\n\t\t}...\n\t}...\n}"},{"Origin":"public String nextString(char quote) throws JSONException {\n\tchar c;\n\tStringBuffer sb=new StringBuffer();\n\tfor (; ; ){\n\t\tc=this.next();\n\t\tswitch (c){\n\t\tcase 0:\n\t\tcase '\\n':\n\t\tcase '\\r':\n\t\t\tthrow this.syntaxError(\"Unterminated string\");\n\t\tcase '\\\\':\n\t\t\tc=this.next();\n\t\t\tswitch (c){\n\t\t\tcase 'b':\n\t\t\t\tsb.append('\\b');\n\t\t\t\tbreak;\n\t\t\tcase 't':\n\t\t\t\tsb.append('\\t');\n\t\t\t\tbreak;\n\t\t\tcase 'n':\n\t\t\t\tsb.append('\\n');\n\t\t\t\tbreak;\n\t\t\tcase 'f':\n\t\t\t\tsb.append('\\f');\n\t\t\t\tbreak;\n\t\t\tcase 'r':\n\t\t\t\tsb.append('\\r');\n\t\t\t\tbreak;\n\t\t\tcase 'u':\n\t\t\t\tsb.append((char)Integer.parseInt(this.next(4),16));\n\t\t\t\tbreak;\n\t\t\tcase '\"':\n\t\t\tcase '\\'':\n\t\t\tcase '\\\\':\n\t\t\tcase '/':\n\t\t\t\tsb.append(c);\n\t\t\t\tbreak;\n\t\t\tdefault :\n\t\t\t\tthrow this.syntaxError(\"Illegal escape.\");\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault :\n\t\t\tif(c == quote){\n\t\t\t\treturn sb.toString();\n\t\t\t}\n\t\t\tsb.append(c);\n\t\t}\n\t}\n}","Original_Lines":47,"Target_Lines":31,"Manual":"public String nextString(char quote) throws JSONException {...\n\tStringBuffer sb=new StringBuffer();\n\tfor (; ; ){\n\t\tc=this.next();\n\t\tswitch (c){\n\t\tcase 0:\n\t\tcase '\\n':\n\t\tcase '\\r':...\n\t\tcase '\\\\':\n\t\t\tc=this.next();\n\t\t\tswitch (c){\n\t\t\tcase 'b':\n\t\t\t\tsb.append('\\b');\n\t\t\t\tbreak;\n\t\t\tcase 't':...\n\t\t\tcase 'n':...\n\t\t\tcase 'f':...\n\t\t\tcase 'r':...\n\t\t\tcase 'u':...\n\t\t\tcase '\"':\n\t\t\tcase '\\'':\n\t\t\tcase '\\\\':\n\t\t\tcase '/':...\n\t\t\tdefault :...\n\t\t\t}...\n\t\tdefault :\n\t\t\tif(c == quote){\n\t\t\t\treturn sb.toString();\n\t\t\t}\n\t\t\tsb.append(c);\n\t\t}\n\t}\n}","Distance":0.22580645161290322,"Automatic":"public String nextString(char quote) throws JSONException {\n\tchar c;\n\tStringBuffer sb=new StringBuffer();\n\tfor (; ; ){\n\t\tc=this.next();\n\t\tswitch (c){\n\t\tcase 0:\n\t\tcase '\\n':\n\t\tcase '\\r':...\n\t\tcase '\\\\':\n\t\t\tc=this.next();\n\t\t\tswitch (c){\n\t\t\tcase 'b':\n\t\t\t\tsb.append('\\b');\n\t\t\t\tbreak;\n\t\t\tcase 't':...\n\t\t\t\tbreak;\n\t\t\tcase 'n':...\n\t\t\t\tbreak;\n\t\t\tcase 'f':...\n\t\t\tcase 'r':...\n\t\t\t\tbreak;\n\t\t\tcase 'u':...\n\t\t\tcase '\"':\n\t\t\tcase '\\'':\n\t\t\tcase '\\\\':\n\t\t\tcase '/':...\n\t\t\tdefault :...\n\t\t\t}...\n\t\tdefault :...\n\t\t}\n\t}\n}"},{"Origin":"GeneralRange<T> intersect(GeneralRange<T> other){\n\tcheckNotNull(other);\n\tcheckArgument(comparator.equals(other.comparator));\n\tboolean hasLowBound=this.hasLowerBound;\n\t@Nullable T lowEnd=lowerEndpoint;\n\tBoundType lowType=lowerBoundType;\n\tif(!hasLowerBound()){\n\t\thasLowBound=other.hasLowerBound;\n\t\tlowEnd=other.lowerEndpoint;\n\t\tlowType=other.lowerBoundType;\n\t}else if(other.hasLowerBound()){\n\t\tint cmp=comparator.compare(lowerEndpoint,other.lowerEndpoint);\n\t\tif(cmp < 0 || (cmp == 0 && other.lowerBoundType == OPEN)){\n\t\t\tlowEnd=other.lowerEndpoint;\n\t\t\tlowType=other.lowerBoundType;\n\t\t}\n\t}\n\tboolean hasUpBound=this.hasUpperBound;\n\t@Nullable T upEnd=upperEndpoint;\n\tBoundType upType=upperBoundType;\n\tif(!hasUpperBound()){\n\t\thasUpBound=other.hasUpperBound;\n\t\tupEnd=other.upperEndpoint;\n\t\tupType=other.upperBoundType;\n\t}else if(other.hasUpperBound()){\n\t\tint cmp=comparator.compare(upperEndpoint,other.upperEndpoint);\n\t\tif(cmp > 0 || (cmp == 0 && other.upperBoundType == OPEN)){\n\t\t\tupEnd=other.upperEndpoint;\n\t\t\tupType=other.upperBoundType;\n\t\t}\n\t}\n\tif(hasLowBound && hasUpBound){\n\t\tint cmp=comparator.compare(lowEnd,upEnd);\n\t\tif(cmp > 0 || (cmp == 0 && lowType == OPEN && upType == OPEN)){\n\t\t\tlowEnd=upEnd;\n\t\t\tlowType=OPEN;\n\t\t\tupType=CLOSED;\n\t\t}\n\t}\n\treturn new GeneralRange<T>(comparator,hasLowBound,lowEnd,lowType,hasUpBound,upEnd,upType);\n}","Original_Lines":39,"Target_Lines":23,"Manual":"GeneralRange<T> intersect(GeneralRange<T> other){...\n\tif(!hasLowerBound()){\n\t\thasLowBound=other.hasLowerBound;\n\t\tlowEnd=other.lowerEndpoint;\n\t\tlowType=other.lowerBoundType;\n\t}else if(other.hasLowerBound()){\n\t\tint cmp=comparator.compare(lowerEndpoint,other.lowerEndpoint);\n\t\tif(cmp < 0 || (cmp == 0 && other.lowerBoundType == OPEN)){\n\t\t\tlowEnd=other.lowerEndpoint;\n\t\t\tlowType=other.lowerBoundType;\n\t\t}\n\t}...\n\tif(!hasUpperBound()){...\n\t}else if(other.hasUpperBound()){...\n\t}\n\tif(hasLowBound && hasUpBound){\n\t\tint cmp=comparator.compare(lowEnd,upEnd);\n\t\tif(cmp > 0 || (cmp == 0 && lowType == OPEN && upType == OPEN)){\n\t\t\tlowEnd=upEnd;\n\t\t\tlowType=OPEN;\n\t\t\tupType=CLOSED;\n\t\t}\n\t}\n\treturn new GeneralRange<T>(comparator,hasLowBound,lowEnd,lowType,hasUpBound,upEnd,upType);\n}","Distance":0.391304347826087,"Automatic":"GeneralRange<T> intersect(GeneralRange<T> other){...\n\tboolean hasLowBound=this.hasLowerBound;\n\t@Nullable T lowEnd=lowerEndpoint;\n\tBoundType lowType=lowerBoundType;\n\tif(!hasLowerBound()){\n\t\thasLowBound=other.hasLowerBound;\n\t\tlowEnd=other.lowerEndpoint;\n\t\tlowType=other.lowerBoundType;\n\t}else if(other.hasLowerBound()){\n\t\tint cmp=comparator.compare(lowerEndpoint,other.lowerEndpoint);\n\t\tif(cmp < 0 || (cmp == 0 && other.lowerBoundType == OPEN)){\n\t\t\tlowEnd=other.lowerEndpoint;\n\t\t\tlowType=other.lowerBoundType;\n\t\t}\n\t}...\n\t@Nullable T upEnd=upperEndpoint;\n\tBoundType upType=upperBoundType;...\n\tif(hasLowBound && hasUpBound){\n\t\tint cmp=comparator.compare(lowEnd,upEnd);\n\t\tif(cmp > 0 || (cmp == 0 && lowType == OPEN && upType == OPEN)){...\n\t\t\tlowType=OPEN;\n\t\t\tupType=CLOSED;\n\t\t}\n\t}...\n}"},{"Origin":"@GwtIncompatible(\"java.io.ObjectInputStream\") private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {\n\tstream.defaultReadObject();\n\tint keyCount=stream.readInt();\n\tif(keyCount < 0){\n\t\tthrow new InvalidObjectException(\"Invalid key count \" + keyCount);\n\t}\n\tImmutableMap.Builder<Object,ImmutableSet<Object>> builder=ImmutableMap.builder();\n\tint tmpSize=0;\n\tfor (int i=0; i < keyCount; i++){\n\t\tObject key=stream.readObject();\n\t\tint valueCount=stream.readInt();\n\t\tif(valueCount <= 0){\n\t\t\tthrow new InvalidObjectException(\"Invalid value count \" + valueCount);\n\t\t}\n\t\tObject[] array=new Object[valueCount];\n\t\tfor (int j=0; j < valueCount; j++){\n\t\t\tarray[j]=stream.readObject();\n\t\t}\n\t\tImmutableSet<Object> valueSet=ImmutableSet.copyOf(array);\n\t\tif(valueSet.size() != array.length){\n\t\t\tthrow new InvalidObjectException(\"Duplicate key-value pairs exist for key \" + key);\n\t\t}\n\t\tbuilder.put(key,valueSet);\n\t\ttmpSize+=valueCount;\n\t}\n\tImmutableMap<Object,ImmutableSet<Object>> tmpMap;\n\ttry {\n\t\ttmpMap=builder.build();\n\t} catch (IllegalArgumentException e){\n\t\tthrow (InvalidObjectException)new InvalidObjectException(e.getMessage()).initCause(e);\n\t} \n\tFieldSettersHolder.MAP_FIELD_SETTER.set(this,tmpMap);\n\tFieldSettersHolder.SIZE_FIELD_SETTER.set(this,tmpSize);\n}","Original_Lines":32,"Target_Lines":20,"Manual":"@GwtIncompatible(\"java.io.ObjectInputStream\") private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {...\n\tint keyCount=stream.readInt();...\n\tImmutableMap.Builder<Object,ImmutableSet<Object>> builder=ImmutableMap.builder();...\n\tfor (int i=0; i < keyCount; i++){\n\t\tObject key=stream.readObject();\n\t\tint valueCount=stream.readInt();...\n\t\tObject[] array=new Object[valueCount];\n\t\tfor (int j=0; j < valueCount; j++){\n\t\t\tarray[j]=stream.readObject();\n\t\t}\n\t\tImmutableSet<Object> valueSet=ImmutableSet.copyOf(array);...\n\t\tbuilder.put(key,valueSet);\n\t\ttmpSize+=valueCount;\n\t}\n\tImmutableMap<Object,ImmutableSet<Object>> tmpMap;\n\ttry {\n\t\ttmpMap=builder.build();\n\t} catch (IllegalArgumentException e){...\n\t} \n\tFieldSettersHolder.MAP_FIELD_SETTER.set(this,tmpMap);\n\tFieldSettersHolder.SIZE_FIELD_SETTER.set(this,tmpSize);\n}","Distance":0.2631578947368421,"Automatic":"@GwtIncompatible(\"java.io.ObjectInputStream\") private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {\n\tstream.defaultReadObject();\n\tint keyCount=stream.readInt();\n\tif(keyCount < 0){...\n\t}\n\tImmutableMap.Builder<Object,ImmutableSet<Object>> builder=ImmutableMap.builder();\n\tint tmpSize=0;\n\tfor (int i=0; i < keyCount; i++){\n\t\tObject key=stream.readObject();\n\t\tint valueCount=stream.readInt();...\n\t\tObject[] array=new Object[valueCount];...\n\t\tImmutableSet<Object> valueSet=ImmutableSet.copyOf(array);...\n\t\tbuilder.put(key,valueSet);\n\t\ttmpSize+=valueCount;\n\t}\n\tImmutableMap<Object,ImmutableSet<Object>> tmpMap;\n\ttry {\n\t\ttmpMap=builder.build();\n\t} catch (IllegalArgumentException e){...\n\t} \n\tFieldSettersHolder.MAP_FIELD_SETTER.set(this,tmpMap);\n\tFieldSettersHolder.SIZE_FIELD_SETTER.set(this,tmpSize);\n}"},{"Origin":"private static final void transferStreams(InputStream source,OutputStream destination,String path,IProgressMonitor monitor) throws CoreException {\n\tmonitor=Policy.monitorFor(monitor);\n\ttry {\n\t\tsynchronized (buffer){\n\t\t\twhile(true){\n\t\t\t\tint bytesRead=-1;\n\t\t\t\ttry {\n\t\t\t\t\tbytesRead=source.read(buffer);\n\t\t\t\t} catch (IOException e){\n\t\t\t\t\tString msg=NLS.bind(Messages.failedReadDuringWrite,path);\n\t\t\t\t\tPolicy.error(EFS.ERROR_READ,msg,e);\n\t\t\t\t} \n\t\t\t\tif(bytesRead == -1)\n\t\t\t\t\tbreak;\n\t\t\t\ttry {\n\t\t\t\t\tdestination.write(buffer,0,bytesRead);\n\t\t\t\t} catch (IOException e){\n\t\t\t\t\tString msg=NLS.bind(Messages.couldNotWrite,path);\n\t\t\t\t\tPolicy.error(EFS.ERROR_WRITE,msg,e);\n\t\t\t\t} \n\t\t\t\tmonitor.worked(1);\n\t\t\t}\n\t\t}\n\t} finally {\n\t\tPolicy.safeClose(source);\n\t\tPolicy.safeClose(destination);\n\t} \n}","Original_Lines":26,"Target_Lines":16,"Manual":"private static final void transferStreams(InputStream source,OutputStream destination,String path,IProgressMonitor monitor) throws CoreException {...\n\ttry {\n\t\tsynchronized (buffer){\n\t\t\twhile(true){...\n\t\t\t\ttry {\n\t\t\t\t\tbytesRead=source.read(buffer);\n\t\t\t\t} catch (IOException e){...\n\t\t\t\t} ...\n\t\t\t\ttry {\n\t\t\t\t\tdestination.write(buffer,0,bytesRead);\n\t\t\t\t} catch (IOException e){...\n\t\t\t\t} \n\t\t\t\tmonitor.worked(1);\n\t\t\t}\n\t\t}\n\t} finally {...\n\t} \n}","Distance":0.5714285714285714,"Automatic":"private static final void transferStreams(InputStream source,OutputStream destination,String path,IProgressMonitor monitor) throws CoreException {...\n\ttry {\n\t\tsynchronized (buffer){\n\t\t\twhile(true){\n\t\t\t\tint bytesRead=-1;...\n\t\t\t\tif(bytesRead == -1)\n\t\t\t\t\tbreak;\n\t\t\t\ttry {\n\t\t\t\t\tdestination.write(buffer,0,bytesRead);\n\t\t\t\t} catch (IOException e){\n\t\t\t\t\tString msg=NLS.bind(Messages.couldNotWrite,path);...\n\t\t\t\t} \n\t\t\t\tmonitor.worked(1);\n\t\t\t}\n\t\t}\n\t} finally {\n\t\tPolicy.safeClose(source);\n\t\tPolicy.safeClose(destination);\n\t} \n}"},{"Origin":"public DataTreeLookup lookup(IPath key){\n\tint keyLength=key.segmentCount();\n\tfor (DeltaDataTree tree=this; tree != null; tree=tree.parent){\n\t\tAbstractDataTreeNode node=tree.rootNode;\n\t\tboolean complete=!node.isDelta();\n\t\tfor (int i=0; i < keyLength; i++){\n\t\t\tnode=node.childAtOrNull(key.segment(i));\n\t\t\tif(node == null){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcomplete|=!node.isDelta();\n\t\t}\n\t\tif(node != null){\n\t\t\tif(node.hasData()){\n\t\t\t\treturn DataTreeLookup.newLookup(key,true,node.getData(),tree == this);\n\t\t\t}else if(node.isDeleted()){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(complete){\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn DataTreeLookup.newLookup(key,false,null);\n}","Original_Lines":23,"Target_Lines":16,"Manual":"public DataTreeLookup lookup(IPath key){...\n\tfor (DeltaDataTree tree=this; tree != null; tree=tree.parent){\n\t\tAbstractDataTreeNode node=tree.rootNode;\n\t\tboolean complete=!node.isDelta();\n\t\tfor (int i=0; i < keyLength; i++){\n\t\t\tnode=node.childAtOrNull(key.segment(i));...\n\t\t\tcomplete|=!node.isDelta();\n\t\t}\n\t\tif(node != null){\n\t\t\tif(node.hasData()){\n\t\t\t\treturn DataTreeLookup.newLookup(key,true,node.getData(),tree == this);\n\t\t\t}else if(node.isDeleted()){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}...\n\t}\n\treturn DataTreeLookup.newLookup(key,false,null);\n}","Distance":0.4,"Automatic":"public DataTreeLookup lookup(IPath key){\n\tint keyLength=key.segmentCount();\n\tfor (DeltaDataTree tree=this; tree != null; tree=tree.parent){\n\t\tAbstractDataTreeNode node=tree.rootNode;\n\t\tboolean complete=!node.isDelta();...\n\t\tif(node != null){\n\t\t\tif(node.hasData()){\n\t\t\t\treturn DataTreeLookup.newLookup(key,true,node.getData(),tree == this);\n\t\t\t}else if(node.isDeleted()){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(complete){\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn DataTreeLookup.newLookup(key,false,null);\n}"},{"Origin":"public CssProperty order(CssProperty property,StyleSheet style,CssSelectors selector){\n\tpropertyData=new CssProperty[10];\n\tpropertyCount=0;\n\tUtil.verbose(\"CASCADING ORDER \" + property.getPropertyName() + \" in \"+ selector);\n\tfor (Enumeration e=style.getRules().elements(); e.hasMoreElements(); ){\n\t\tCssSelectors context=(CssSelectors)e.nextElement();\n\t\tUtil.verbose(\"######## test with \" + context + \" and \"+ selector);\n\t\tif(context.canApply(selector)){\n\t\t\tCssProperty prop=property.getPropertyInStyle(context.getStyle(),false);\n\t\t\tUtil.verbose(\"%%%%%%%%%%%%%%%%% Found \" + context);\n\t\t\tif(prop != null){\n\t\t\t\taddProperty(prop);\n\t\t\t}\n\t\t}\n\t}\n\tif(propertyCount == 0){\n\t\tif(selector.getNext() != null && property.inherited()){\n\t\t\tUtil.verbose(\"Found nothing ... try the next \" + selector.getNext());\n\t\t\tCssStyle s=style.getStyle(selector.getNext());\n\t\t\tproperty=property.getPropertyInStyle(s,true);\n\t\t}\n\t}else {\n\t\tUtil.verbose(\"@@@@@@@@@@@@@@ FOUND \" + propertyCount + \" properties\");\n\t\tproperty=getProperty(selector);\n\t\tif(property.isSoftlyInherited() && selector.getNext() != null){\n\t\t\tCssStyle s=style.getStyle(selector.getNext());\n\t\t\tproperty=property.getPropertyInStyle(s,true);\n\t\t}\n\t}\n\tproperty=property.duplicate();\n\tproperty.setSelectors(selector);\n\treturn property;\n}","Original_Lines":31,"Target_Lines":18,"Manual":"public CssProperty order(CssProperty property,StyleSheet style,CssSelectors selector){\n\tpropertyData=new CssProperty[10];\n\tpropertyCount=0;...\n\tfor (Enumeration e=style.getRules().elements(); e.hasMoreElements(); ){\n\t\tCssSelectors context=(CssSelectors)e.nextElement();...\n\t\tif(context.canApply(selector)){...\n\t\t}\n\t}\n\tif(propertyCount == 0){\n\t\tif(selector.getNext() != null && property.inherited()){...\n\t\t\tCssStyle s=style.getStyle(selector.getNext());...\n\t\t}\n\t}else {...\n\t\tproperty=getProperty(selector);\n\t\tif(property.isSoftlyInherited() && selector.getNext() != null){\n\t\t\tCssStyle s=style.getStyle(selector.getNext());...\n\t\t}\n\t}...\n\treturn property;\n}","Distance":0.3333333333333333,"Automatic":"public CssProperty order(CssProperty property,StyleSheet style,CssSelectors selector){\n\tpropertyData=new CssProperty[10];...\n\tfor (Enumeration e=style.getRules().elements(); e.hasMoreElements(); ){\n\t\tCssSelectors context=(CssSelectors)e.nextElement();...\n\t}\n\tif(propertyCount == 0){\n\t\tif(selector.getNext() != null && property.inherited()){...\n\t\t\tCssStyle s=style.getStyle(selector.getNext());\n\t\t\tproperty=property.getPropertyInStyle(s,true);\n\t\t}\n\t}else {...\n\t\tproperty=getProperty(selector);\n\t\tif(property.isSoftlyInherited() && selector.getNext() != null){\n\t\t\tCssStyle s=style.getStyle(selector.getNext());\n\t\t\tproperty=property.getPropertyInStyle(s,true);\n\t\t}\n\t}...\n\tproperty.setSelectors(selector);\n\treturn property;\n}"},{"Origin":"public void parseURL(ApplContext ac,URL url,String title,String kind,String media,int origin){\n\tsetWarningLevel(ac.getWarningLevel());\n\tif(Util.onDebug){\n\t\tSystem.err.println(\"StyleSheet.parseURL(\" + url + \", \"+ title+ \", \"+ kind+ \", \"+ media+ \", \"+ origin+ \")\");\n\t}\n\tif(kind != null){\n\t\tkind=kind.trim().toLowerCase();\n\t\tif(!kind.equals(\"stylesheet\") && !kind.equals(\"alternate stylesheet\")){\n\t\t\treturn;\n\t\t}\n\t}\n\ttry {\n\t\tac.setOrigin(origin);\n\t\tcssFouffa=new CssFouffa(ac,url);\n\t\tcssFouffa.addListener(this);\n\t\tif(media == null){\n\t\t\tif(ac.getMedium() == null){\n\t\t\t\tmedia=\"all\";\n\t\t\t}else {\n\t\t\t\tmedia=ac.getMedium();\n\t\t\t}\n\t\t}\n\t\tAtRuleMedia m=new AtRuleMedia();\n\t\ttry {\n\t\t\taddMedias(m,media,ac);\n\t\t\tcssFouffa.setAtRule(m);\n\t\t} catch (org.w3c.css.util.InvalidParamException e){\n\t\t\tErrors er=new Errors();\n\t\t\ter.addError(new org.w3c.css.parser.CssError(url.toString(),-1,e));\n\t\t\tnotifyErrors(er);\n\t\t\treturn;\n\t\t} \n\t\tcssFouffa.parseStyle();\n\t} catch (Exception e){\n\t\tErrors er=new Errors();\n\t\ter.addError(new org.w3c.css.parser.CssError(url.toString(),-1,e));\n\t\tnotifyErrors(er);\n\t} \n}","Original_Lines":37,"Target_Lines":20,"Manual":"public void parseURL(ApplContext ac,URL url,String title,String kind,String media,int origin){...\n\ttry {\n\t\tac.setOrigin(origin);\n\t\tcssFouffa=new CssFouffa(ac,url);\n\t\tcssFouffa.addListener(this);\n\t\tif(media == null){\n\t\t\tif(ac.getMedium() == null){\n\t\t\t\tmedia=\"all\";\n\t\t\t}else {\n\t\t\t\tmedia=ac.getMedium();\n\t\t\t}\n\t\t}\n\t\tAtRuleMedia m=new AtRuleMedia();\n\t\ttry {\n\t\t\taddMedias(m,media,ac);\n\t\t\tcssFouffa.setAtRule(m);\n\t\t} catch (org.w3c.css.util.InvalidParamException e){...\n\t\t} \n\t\tcssFouffa.parseStyle();\n\t} catch (Exception e){...\n\t} \n}","Distance":0.13333333333333333,"Automatic":"public void parseURL(ApplContext ac,URL url,String title,String kind,String media,int origin){...\n\ttry {\n\t\tac.setOrigin(origin);\n\t\tcssFouffa=new CssFouffa(ac,url);\n\t\tcssFouffa.addListener(this);\n\t\tif(media == null){\n\t\t\tif(ac.getMedium() == null){\n\t\t\t\tmedia=\"all\";\n\t\t\t}else {\n\t\t\t\tmedia=ac.getMedium();\n\t\t\t}\n\t\t}\n\t\tAtRuleMedia m=new AtRuleMedia();\n\t\ttry {\n\t\t\taddMedias(m,media,ac);\n\t\t\tcssFouffa.setAtRule(m);\n\t\t} catch (org.w3c.css.util.InvalidParamException e){\n\t\t\tErrors er=new Errors();...\n\t\t\treturn;\n\t\t} \n\t\tcssFouffa.parseStyle();\n\t} catch (Exception e){...\n\t} \n}"},{"Origin":"public void parseStyleAttribute(ApplContext ac,InputStream input,String id,URL url,int lineno){\n\tstyle.setWarningLevel(ac.getWarningLevel());\n\tlineno--;\n\tif(Util.onDebug){\n\t\tSystem.err.println(\"StyleSheet.parseStyleAttribute(\" + id + \",\"+ url+ \",\"+ lineno+ \")\");\n\t}\n\ttry {\n\t\tString charset=ac.getCharsetForURL(url);\n\t\tcssFouffa=new CssFouffa(ac,input,charset,url,lineno);\n\t\tcssFouffa.addListener(this);\n\t\tCssSelectors selector=new CssSelectors(ac);\n\t\ttry {\n\t\t\tAtRuleMedia media=new AtRuleMedia();\n\t\t\tmedia.addMedia(\"all\",ac);\n\t\t\tcssFouffa.setAtRule(media);\n\t\t} catch (InvalidParamException e){\n\t\t} \n\t\ttry {\n\t\t\tselector.addId(new IdSelector(id.substring(1)));\n\t\t\t;\n\t\t} catch (InvalidParamException e){\n\t\t\tstyle.removeThisRule();\n\t\t\tac.getFrame().addError(new CssError(e));\n\t\t} \n\t\tcssFouffa.parseDeclarations(selector);\n\t} catch (IOException e){\n\t\tErrors er=new Errors();\n\t\ter.addError(new org.w3c.css.parser.CssError(url.toString(),-1,e));\n\t\tnotifyErrors(er);\n\t} \n}","Original_Lines":29,"Target_Lines":19,"Manual":"public void parseStyleAttribute(ApplContext ac,InputStream input,String id,URL url,int lineno){...\n\tlineno--;...\n\ttry {\n\t\tString charset=ac.getCharsetForURL(url);\n\t\tcssFouffa=new CssFouffa(ac,input,charset,url,lineno);\n\t\tcssFouffa.addListener(this);\n\t\tCssSelectors selector=new CssSelectors(ac);\n\t\ttry {\n\t\t\tAtRuleMedia media=new AtRuleMedia();\n\t\t\tmedia.addMedia(\"all\",ac);\n\t\t\tcssFouffa.setAtRule(media);\n\t\t} catch (InvalidParamException e){\n\t\t} \n\t\ttry {\n\t\t\tselector.addId(new IdSelector(id.substring(1)));...\n\t\t} catch (InvalidParamException e){...\n\t\t} \n\t\tcssFouffa.parseDeclarations(selector);\n\t} catch (IOException e){...\n\t} \n}","Distance":0.1875,"Automatic":"public void parseStyleAttribute(ApplContext ac,InputStream input,String id,URL url,int lineno){...\n\tlineno--;...\n\ttry {\n\t\tString charset=ac.getCharsetForURL(url);\n\t\tcssFouffa=new CssFouffa(ac,input,charset,url,lineno);\n\t\tcssFouffa.addListener(this);\n\t\tCssSelectors selector=new CssSelectors(ac);\n\t\ttry {\n\t\t\tAtRuleMedia media=new AtRuleMedia();\n\t\t\tmedia.addMedia(\"all\",ac);\n\t\t\tcssFouffa.setAtRule(media);\n\t\t} catch (InvalidParamException e){\n\t\t} \n\t\ttry {\n\t\t\tselector.addId(new IdSelector(id.substring(1)));\n\t\t\t;\n\t\t} catch (InvalidParamException e){\n\t\t\tstyle.removeThisRule();...\n\t\t} \n\t\tcssFouffa.parseDeclarations(selector);\n\t} catch (IOException e){\n\t\tErrors er=new Errors();...\n\t} \n}"},{"Origin":"public void processingInstruction(String target,String data) throws SAXException {\n\tHashMap<String,String> atts=getValues(data);\n\tif(\"xml-stylesheet\".equals(target)){\n\t\tString rel=atts.get(\"alternate\");\n\t\tString type=atts.get(\"type\");\n\t\tString href=atts.get(\"href\");\n\t\tif(Util.onDebug){\n\t\t\tSystem.err.println(\"<?xml-stylesheet alternate=\\\"\" + rel + \"\\\" type=\\\"\"+ type+ \"\\\"\"+ \"   href=\\\"\"+ href+ \"\\\"?>\");\n\t\t}\n\t\tif(\"yes\".equalsIgnoreCase(rel)){\n\t\t\trel=\"alternate stylesheet\";\n\t\t}else {\n\t\t\trel=\"stylesheet\";\n\t\t}\n\t\tif(href == null){\n\t\t\tint line=-1;\n\t\t\tif(locator != null){\n\t\t\t\tline=locator.getLineNumber();\n\t\t\t}\n\t\t\tCssError er=new CssError(baseURI.toString(),line,new InvalidParamException(\"unrecognized.link\",ac));\n\t\t\tErrors ers=new Errors();\n\t\t\ters.addError(er);\n\t\t\tstyleSheetParser.notifyErrors(ers);\n\t\t}\n\t\tif(href.charAt(0) == '#'){\n\t\t\treturn;\n\t\t}\n\t\tif(type != null){\n\t\t\tMimeType mt=null;\n\t\t\ttry {\n\t\t\t\tnew MimeType(type);\n\t\t\t} catch (Exception ex){\n\t\t\t} \n\t\t\t;\n\t\t\tif(mt != null && (MimeType.TEXT_CSS.match(mt) == MimeType.MATCH_SPECIFIC_SUBTYPE)){\n\t\t\t\tURL url;\n\t\t\t\ttry {\n\t\t\t\t\tif(baseURI != null){\n\t\t\t\t\t\turl=new URL(baseURI,href);\n\t\t\t\t\t}else {\n\t\t\t\t\t\turl=new URL(href);\n\t\t\t\t\t}\n\t\t\t\t} catch (MalformedURLException e){\n\t\t\t\t\treturn;\n\t\t\t\t} \n\t\t\t\tif(Util.onDebug){\n\t\t\t\t\tSystem.err.println(\"[TagSoupStyleSheetHandler::\" + \"initialize(): \" + \"should parse CSS url: \" + url.toString() + \"]\");\n\t\t\t\t}\n\t\t\t\tString media=atts.get(\"media\");\n\t\t\t\tif(media == null){\n\t\t\t\t\tmedia=\"all\";\n\t\t\t\t}\n\t\t\t\tstyleSheetParser.parseURL(ac,url,atts.get(\"title\"),rel,media,StyleSheetOrigin.AUTHOR);\n\t\t\t\tif(Util.onDebug){\n\t\t\t\t\tSystem.err.println(\"[parsed!]\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}","Original_Lines":58,"Target_Lines":37,"Manual":"public void processingInstruction(String target,String data) throws SAXException {\n\tHashMap<String,String> atts=getValues(data);\n\tif(\"xml-stylesheet\".equals(target)){\n\t\tString rel=atts.get(\"alternate\");\n\t\tString type=atts.get(\"type\");\n\t\tString href=atts.get(\"href\");...\n\t\tif(\"yes\".equalsIgnoreCase(rel)){\n\t\t\trel=\"alternate stylesheet\";\n\t\t}else {\n\t\t\trel=\"stylesheet\";\n\t\t}\n\t\tif(href == null){...\n\t\t\tstyleSheetParser.notifyErrors(ers);\n\t\t}...\n\t\tif(type != null){\n\t\t\tMimeType mt=null;\n\t\t\ttry {\n\t\t\t\tnew MimeType(type);\n\t\t\t} catch (Exception ex){\n\t\t\t} ...\n\t\t\tif(mt != null && (MimeType.TEXT_CSS.match(mt) == MimeType.MATCH_SPECIFIC_SUBTYPE)){\n\t\t\t\tURL url;\n\t\t\t\ttry {\n\t\t\t\t\tif(baseURI != null){\n\t\t\t\t\t\turl=new URL(baseURI,href);\n\t\t\t\t\t}else {\n\t\t\t\t\t\turl=new URL(href);\n\t\t\t\t\t}\n\t\t\t\t} catch (MalformedURLException e){...\n\t\t\t\t} ...\n\t\t\t\tString media=atts.get(\"media\");\n\t\t\t\tif(media == null){\n\t\t\t\t\tmedia=\"all\";\n\t\t\t\t}\n\t\t\t\tstyleSheetParser.parseURL(ac,url,atts.get(\"title\"),rel,media,StyleSheetOrigin.AUTHOR);...\n\t\t\t}\n\t\t}\n\t}\n}","Distance":0.3548387096774194,"Automatic":"public void processingInstruction(String target,String data) throws SAXException {\n\tHashMap<String,String> atts=getValues(data);\n\tif(\"xml-stylesheet\".equals(target)){\n\t\tString rel=atts.get(\"alternate\");\n\t\tString type=atts.get(\"type\");\n\t\tString href=atts.get(\"href\");...\n\t\tif(href == null){\n\t\t\tint line=-1;...\n\t\t\tCssError er=new CssError(baseURI.toString(),line,new InvalidParamException(\"unrecognized.link\",ac));\n\t\t\tErrors ers=new Errors();...\n\t\t}\n\t\tif(href.charAt(0) == '#'){\n\t\t\treturn;\n\t\t}\n\t\tif(type != null){\n\t\t\tMimeType mt=null;\n\t\t\ttry {\n\t\t\t\tnew MimeType(type);\n\t\t\t} catch (Exception ex){\n\t\t\t} \n\t\t\t;\n\t\t\tif(mt != null && (MimeType.TEXT_CSS.match(mt) == MimeType.MATCH_SPECIFIC_SUBTYPE)){\n\t\t\t\tURL url;\n\t\t\t\ttry {\n\t\t\t\t\tif(baseURI != null){\n\t\t\t\t\t\turl=new URL(baseURI,href);\n\t\t\t\t\t}else {\n\t\t\t\t\t\turl=new URL(href);\n\t\t\t\t\t}\n\t\t\t\t} catch (MalformedURLException e){\n\t\t\t\t\treturn;\n\t\t\t\t} ...\n\t\t\t\tString media=atts.get(\"media\");\n\t\t\t\tif(media == null){\n\t\t\t\t\tmedia=\"all\";\n\t\t\t\t}\n\t\t\t\tstyleSheetParser.parseURL(ac,url,atts.get(\"title\"),rel,media,StyleSheetOrigin.AUTHOR);...\n\t\t\t}\n\t\t}\n\t}\n}"},{"Origin":"public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {\n\tif(isRoot){\n\t\tthis.namespaceURI=namespaceURI;\n\t\tisRoot=false;\n\t}\n\tif(XHTML_NS.equals(namespaceURI)){\n\t\tif(\"base\".equals(localName)){\n\t\t\tString href=atts.getValue(\"href\");\n\t\t\tif(Util.onDebug){\n\t\t\t\tSystem.err.println(\"BASE href=\\\"\" + href + \"\\\"\");\n\t\t\t}\n\t\t\tif(href != null){\n\t\t\t\ttry {\n\t\t\t\t\tbaseURI=new URL(documentURI,href);\n\t\t\t\t\tdocumentURI=baseURI;\n\t\t\t\t} catch (MalformedURLException e){\n\t\t\t\t\treturn;\n\t\t\t\t} \n\t\t\t}\n\t\t}else if(\"link\".equals(localName)){\n\t\t\tString rel=atts.getValue(\"rel\");\n\t\t\tString type=atts.getValue(\"type\");\n\t\t\tString href=atts.getValue(\"href\");\n\t\t\tif(Util.onDebug){\n\t\t\t\tSystem.err.println(\"link rel=\\\"\" + rel + \"\\\" type=\\\"\"+ type+ \"\\\"\"+ \"   href=\\\"\"+ href+ \"\\\"\");\n\t\t\t}\n\t\t\tif(type == null){\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tMimeType mt=null;\n\t\t\ttry {\n\t\t\t\tmt=new MimeType(type);\n\t\t\t} catch (MimeTypeFormatException mtfe){\n\t\t\t\treturn;\n\t\t\t} \n\t\t\tif(MimeType.TEXT_CSS.match(mt) != MimeType.MATCH_SPECIFIC_SUBTYPE){\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(href == null){\n\t\t\t\tint line=-1;\n\t\t\t\tif(locator != null){\n\t\t\t\t\tline=locator.getLineNumber();\n\t\t\t\t}\n\t\t\t\tCssError er=new CssError(baseURI.toString(),line,new InvalidParamException(\"unrecognized.link\",ac));\n\t\t\t\tErrors ers=new Errors();\n\t\t\t\ters.addError(er);\n\t\t\t\tstyleSheetParser.notifyErrors(ers);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif((rel != null) && rel.toLowerCase().indexOf(\"stylesheet\") != -1){\n\t\t\t\tURL url;\n\t\t\t\ttry {\n\t\t\t\t\tif(baseURI != null){\n\t\t\t\t\t\turl=new URL(baseURI,href);\n\t\t\t\t\t}else {\n\t\t\t\t\t\turl=new URL(href);\n\t\t\t\t\t}\n\t\t\t\t} catch (MalformedURLException e){\n\t\t\t\t\treturn;\n\t\t\t\t} \n\t\t\t\tif(Util.onDebug){\n\t\t\t\t\tSystem.err.println(\"[TagSoupStyleSheetHandler::initialize(): \" + \"should parse CSS url: \" + url.toString() + \"]\");\n\t\t\t\t}\n\t\t\t\tString media=atts.getValue(\"media\");\n\t\t\t\tif(media == null){\n\t\t\t\t\tmedia=\"all\";\n\t\t\t\t}\n\t\t\t\tstyleSheetParser.parseURL(ac,url,atts.getValue(\"title\"),rel,media,StyleSheetOrigin.AUTHOR);\n\t\t\t\tif(Util.onDebug){\n\t\t\t\t\tSystem.err.println(\"[parsed!]\");\n\t\t\t\t}\n\t\t\t}\n\t\t}else if(\"style\".equals(localName)){\n\t\t\tmedia=atts.getValue(\"media\");\n\t\t\ttype=atts.getValue(\"type\");\n\t\t\ttitle=atts.getValue(\"title\");\n\t\t\tif(media == null){\n\t\t\t\tmedia=\"all\";\n\t\t\t}\n\t\t\tif(Util.onDebug){\n\t\t\t\tSystem.err.println(\"style media=\\\"\" + media + \"\\\" type=\\\"\"+ type+ \"\\\"\"+ \"   title=\\\"\"+ title+ \"\\\"\");\n\t\t\t}\n\t\t\tif(type == null){\n\t\t\t\tint line=-1;\n\t\t\t\tif(locator != null){\n\t\t\t\t\tline=locator.getLineNumber();\n\t\t\t\t}\n\t\t\t\tCssError er=new CssError(baseURI.toString(),line,new InvalidParamException(\"unrecognized.link\",ac));\n\t\t\t\tErrors ers=new Errors();\n\t\t\t\ters.addError(er);\n\t\t\t\tstyleSheetParser.notifyErrors(ers);\n\t\t\t}else {\n\t\t\t\ttry {\n\t\t\t\t\tMimeType mt=new MimeType(type);\n\t\t\t\t\tif(MimeType.TEXT_CSS.match(mt) == MimeType.MATCH_SPECIFIC_SUBTYPE){\n\t\t\t\t\t\ttext.setLength(0);\n\t\t\t\t\t\tinStyle=true;\n\t\t\t\t\t}\n\t\t\t\t} catch (MimeTypeFormatException ex){\n\t\t\t\t} \n\t\t\t}\n\t\t}else if(atts.getValue(\"style\") != null){\n\t\t\tString value=atts.getValue(\"style\");\n\t\t\tif(value != null){\n\t\t\t\tString id=atts.getValue(\"id\");\n\t\t\t\thandleStyleAttribute(value,id);\n\t\t\t}\n\t\t}\n\t}else {\n\t\tString value=atts.getValue(XHTML_NS,\"style\");\n\t\tif(value != null){\n\t\t\tString id=atts.getValue(XHTML_NS,\"id\");\n\t\t\thandleStyleAttribute(value,id);\n\t\t}\n\t}\n}","Original_Lines":114,"Target_Lines":64,"Manual":"public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {\n\tif(isRoot){\n\t\tthis.namespaceURI=namespaceURI;\n\t\tisRoot=false;\n\t}\n\tif(XHTML_NS.equals(namespaceURI)){\n\t\tif(\"base\".equals(localName)){...\n\t\t\tif(href != null){\n\t\t\t\ttry {\n\t\t\t\t\tbaseURI=new URL(documentURI,href);\n\t\t\t\t\tdocumentURI=baseURI;\n\t\t\t\t} catch (MalformedURLException e){...\n\t\t\t\t} \n\t\t\t}\n\t\t}else if(\"link\".equals(localName)){...\n\t\t\tMimeType mt=null;\n\t\t\ttry {\n\t\t\t\tmt=new MimeType(type);\n\t\t\t} catch (MimeTypeFormatException mtfe){...\n\t\t\t} ...\n\t\t\tif((rel != null) && rel.toLowerCase().indexOf(\"stylesheet\") != -1){\n\t\t\t\tURL url;\n\t\t\t\ttry {\n\t\t\t\t\tif(baseURI != null){\n\t\t\t\t\t\turl=new URL(baseURI,href);\n\t\t\t\t\t}else {\n\t\t\t\t\t\turl=new URL(href);\n\t\t\t\t\t}\n\t\t\t\t} catch (MalformedURLException e){...\n\t\t\t\t} ...\n\t\t\t\tString media=atts.getValue(\"media\");\n\t\t\t\tif(media == null){\n\t\t\t\t\tmedia=\"all\";\n\t\t\t\t}\n\t\t\t\tstyleSheetParser.parseURL(ac,url,atts.getValue(\"title\"),rel,media,StyleSheetOrigin.AUTHOR);...\n\t\t\t}\n\t\t}else if(\"style\".equals(localName)){...\n\t\t\tif(media == null){\n\t\t\t\tmedia=\"all\";\n\t\t\t}...\n\t\t\tif(type == null){...\n\t\t\t}else {\n\t\t\t\ttry {\n\t\t\t\t\tMimeType mt=new MimeType(type);\n\t\t\t\t\tif(MimeType.TEXT_CSS.match(mt) == MimeType.MATCH_SPECIFIC_SUBTYPE){\n\t\t\t\t\t\ttext.setLength(0);\n\t\t\t\t\t\tinStyle=true;\n\t\t\t\t\t}\n\t\t\t\t} catch (MimeTypeFormatException ex){\n\t\t\t\t} \n\t\t\t}\n\t\t}else if(atts.getValue(\"style\") != null){\n\t\t\tString value=atts.getValue(\"style\");\n\t\t\tif(value != null){\n\t\t\t\tString id=atts.getValue(\"id\");\n\t\t\t\thandleStyleAttribute(value,id);\n\t\t\t}\n\t\t}\n\t}else {\n\t\tString value=atts.getValue(XHTML_NS,\"style\");\n\t\tif(value != null){\n\t\t\tString id=atts.getValue(XHTML_NS,\"id\");\n\t\t\thandleStyleAttribute(value,id);\n\t\t}\n\t}\n}","Distance":0.4576271186440678,"Automatic":"public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {\n\tif(isRoot){\n\t\tthis.namespaceURI=namespaceURI;\n\t\tisRoot=false;\n\t}\n\tif(XHTML_NS.equals(namespaceURI)){\n\t\tif(\"base\".equals(localName)){\n\t\t\tString href=atts.getValue(\"href\");...\n\t\t\tif(href != null){\n\t\t\t\ttry {\n\t\t\t\t\tbaseURI=new URL(documentURI,href);\n\t\t\t\t\tdocumentURI=baseURI;\n\t\t\t\t} catch (MalformedURLException e){\n\t\t\t\t\treturn;\n\t\t\t\t} \n\t\t\t}\n\t\t}else if(\"link\".equals(localName)){\n\t\t\tString rel=atts.getValue(\"rel\");\n\t\t\tString type=atts.getValue(\"type\");\n\t\t\tString href=atts.getValue(\"href\");...\n\t\t\tif(type == null){\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tMimeType mt=null;\n\t\t\ttry {\n\t\t\t\tmt=new MimeType(type);\n\t\t\t} catch (MimeTypeFormatException mtfe){\n\t\t\t\treturn;\n\t\t\t} \n\t\t\tif(MimeType.TEXT_CSS.match(mt) != MimeType.MATCH_SPECIFIC_SUBTYPE){\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(href == null){\n\t\t\t\tint line=-1;...\n\t\t\t\tCssError er=new CssError(baseURI.toString(),line,new InvalidParamException(\"unrecognized.link\",ac));\n\t\t\t\tErrors ers=new Errors();...\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif((rel != null) && rel.toLowerCase().indexOf(\"stylesheet\") != -1){\n\t\t\t\tURL url;...\n\t\t\t\tString media=atts.getValue(\"media\");\n\t\t\t\tif(media == null){\n\t\t\t\t\tmedia=\"all\";\n\t\t\t\t}\n\t\t\t\tstyleSheetParser.parseURL(ac,url,atts.getValue(\"title\"),rel,media,StyleSheetOrigin.AUTHOR);...\n\t\t\t}\n\t\t}else if(\"style\".equals(localName)){\n\t\t\tmedia=atts.getValue(\"media\");\n\t\t\ttype=atts.getValue(\"type\");\n\t\t\ttitle=atts.getValue(\"title\");\n\t\t\tif(media == null){\n\t\t\t\tmedia=\"all\";\n\t\t\t}...\n\t\t}else if(atts.getValue(\"style\") != null){\n\t\t\tString value=atts.getValue(\"style\");\n\t\t\tif(value != null){\n\t\t\t\tString id=atts.getValue(\"id\");\n\t\t\t\thandleStyleAttribute(value,id);\n\t\t\t}\n\t\t}\n\t}else {\n\t\tString value=atts.getValue(XHTML_NS,\"style\");\n\t\tif(value != null){\n\t\t\tString id=atts.getValue(XHTML_NS,\"id\");\n\t\t\thandleStyleAttribute(value,id);\n\t\t}\n\t}\n}"},{"Origin":"public void handleImport(URL url,String file,boolean is_url,AtRuleMedia media){\n\tAtRuleImport importrule=new AtRuleImport(file,is_url,media);\n\tnewAtRule(importrule);\n\tendOfAtRule();\n\tif(url.getProtocol().equals(\"file\")){\n\t\tac.getFrame().addWarning(\"unsupported-import\");\n\t\treturn;\n\t}\n\ttry {\n\t\tURL importedURL=HTTPURL.getURL(url,file);\n\t\tString surl=importedURL.toString();\n\t\tif(visited == null){\n\t\t\tvisited=new Vector<String>(2);\n\t\t}else {\n\t\t\tif(visited.contains(surl)){\n\t\t\t\tCssError cerr=new CssError(new Exception(\"Import loop\" + \" detected in \" + surl));\n\t\t\t\tac.getFrame().addError(cerr);\n\t\t\t\treturn;\n\t\t\t}else if(visited.size() > 42){\n\t\t\t\tCssError cerr=new CssError(new Exception(\"Maximum number\" + \" of imports \" + \"reached\"));\n\t\t\t\tac.getFrame().addError(cerr);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tVector<String> newVisited=new Vector<String>(visited);\n\t\tnewVisited.addElement(surl);\n\t\tif(Util.importSecurity){\n\t\t\tthrow new FileNotFoundException(\"[SECURITY] You can't \" + \"import URL sorry.\");\n\t\t}\n\t\tURLConnection importURL=HTTPURL.getConnection(importedURL,ac);\n\t\tString charset=HTTPURL.getCharacterEncoding(ac,importURL);\n\t\tif(importURL instanceof HttpURLConnection){\n\t\t\tHttpURLConnection httpURL=(HttpURLConnection)importURL;\n\t\t\tString httpCL=httpURL.getHeaderField(\"Content-Location\");\n\t\t\tif(httpCL != null){\n\t\t\t\timportedURL=HTTPURL.getURL(importedURL,httpCL);\n\t\t\t}\n\t\t\tString mtype=httpURL.getContentType();\n\t\t\tif(mtype == null){\n\t\t\t\tthrow new FileNotFoundException(importURL.getURL() + \"No Media Type defined\");\n\t\t\t}else {\n\t\t\t\tif(mtype.toLowerCase().indexOf(\"text/html\") != -1){\n\t\t\t\t\tthrow new FileNotFoundException(importURL.getURL() + \": You can't import\" + \" an HTML document\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tFrame f=ac.getFrame();\n\t\ttry {\n\t\t\tCssFouffa cssFouffa=new CssFouffa(ac,HTTPURL.getInputStream(ac,importURL),importedURL,listeners,newVisited,properties,mode);\n\t\t\tcssFouffa.setOrigin(getOrigin());\n\t\t\tif(!media.isEmpty()){\n\t\t\t\tcssFouffa.setAtRule(media);\n\t\t\t}else {\n\t\t\t\tcssFouffa.setAtRule(getAtRule());\n\t\t\t}\n\t\t\tcssFouffa.parseStyle();\n\t\t} finally {\n\t\t\tac.setFrame(f);\n\t\t} \n\t} catch (Exception e){\n\t\tif(!Util.noErrorTrace){\n\t\t\tac.getFrame().addError(new CssError(e));\n\t\t}\n\t} \n}","Original_Lines":63,"Target_Lines":37,"Manual":"public void handleImport(URL url,String file,boolean is_url,AtRuleMedia media){\n\tAtRuleImport importrule=new AtRuleImport(file,is_url,media);\n\tnewAtRule(importrule);\n\tendOfAtRule();...\n\ttry {\n\t\tURL importedURL=HTTPURL.getURL(url,file);\n\t\tString surl=importedURL.toString();\n\t\tif(visited == null){\n\t\t\tvisited=new Vector<String>(2);\n\t\t}else {...\n\t\t}\n\t\tVector<String> newVisited=new Vector<String>(visited);\n\t\tnewVisited.addElement(surl);...\n\t\tURLConnection importURL=HTTPURL.getConnection(importedURL,ac);\n\t\tString charset=HTTPURL.getCharacterEncoding(ac,importURL);\n\t\tif(importURL instanceof HttpURLConnection){\n\t\t\tHttpURLConnection httpURL=(HttpURLConnection)importURL;\n\t\t\tString httpCL=httpURL.getHeaderField(\"Content-Location\");\n\t\t\tif(httpCL != null){\n\t\t\t\timportedURL=HTTPURL.getURL(importedURL,httpCL);\n\t\t\t}\n\t\t\tString mtype=httpURL.getContentType();...\n\t\t}\n\t\tFrame f=ac.getFrame();\n\t\ttry {\n\t\t\tCssFouffa cssFouffa=new CssFouffa(ac,HTTPURL.getInputStream(ac,importURL),importedURL,listeners,newVisited,properties,mode);\n\t\t\tcssFouffa.setOrigin(getOrigin());\n\t\t\tif(!media.isEmpty()){\n\t\t\t\tcssFouffa.setAtRule(media);\n\t\t\t}else {\n\t\t\t\tcssFouffa.setAtRule(getAtRule());\n\t\t\t}\n\t\t\tcssFouffa.parseStyle();\n\t\t} finally {\n\t\t\tac.setFrame(f);\n\t\t} \n\t} catch (Exception e){...\n\t} \n}","Distance":0.37142857142857144,"Automatic":"public void handleImport(URL url,String file,boolean is_url,AtRuleMedia media){\n\tAtRuleImport importrule=new AtRuleImport(file,is_url,media);\n\tnewAtRule(importrule);\n\tendOfAtRule();\n\tif(url.getProtocol().equals(\"file\")){...\n\t\treturn;\n\t}\n\ttry {\n\t\tURL importedURL=HTTPURL.getURL(url,file);\n\t\tString surl=importedURL.toString();\n\t\tif(visited == null){\n\t\t\tvisited=new Vector<String>(2);\n\t\t}else {\n\t\t\tif(visited.contains(surl)){\n\t\t\t\tCssError cerr=new CssError(new Exception(\"Import loop\" + \" detected in \" + surl));...\n\t\t\t\treturn;\n\t\t\t}else if(visited.size() > 42){\n\t\t\t\tCssError cerr=new CssError(new Exception(\"Maximum number\" + \" of imports \" + \"reached\"));...\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tVector<String> newVisited=new Vector<String>(visited);\n\t\tnewVisited.addElement(surl);...\n\t\tURLConnection importURL=HTTPURL.getConnection(importedURL,ac);\n\t\tString charset=HTTPURL.getCharacterEncoding(ac,importURL);\n\t\tif(importURL instanceof HttpURLConnection){\n\t\t\tHttpURLConnection httpURL=(HttpURLConnection)importURL;\n\t\t\tString httpCL=httpURL.getHeaderField(\"Content-Location\");...\n\t\t\tString mtype=httpURL.getContentType();...\n\t\t}\n\t\tFrame f=ac.getFrame();\n\t\ttry {\n\t\t\tCssFouffa cssFouffa=new CssFouffa(ac,HTTPURL.getInputStream(ac,importURL),importedURL,listeners,newVisited,properties,mode);\n\t\t\tcssFouffa.setOrigin(getOrigin());...\n\t\t\tcssFouffa.parseStyle();\n\t\t} finally {\n\t\t\tac.setFrame(f);\n\t\t} \n\t} catch (Exception e){...\n\t} \n}"},{"Origin":"public CssProperty handleDeclaration(String property,CssExpression expression,boolean important) throws InvalidParamException {\n\tCssProperty prop;\n\tif(Util.onDebug){\n\t\tSystem.err.println(\"Creating \" + property + \": \"+ expression);\n\t}\n\ttry {\n\t\tif(getMediaDeclaration().equals(\"on\") && (getAtRule() instanceof AtRuleMedia)){\n\t\t\tprop=properties.createMediaFeature(ac,getAtRule(),property,expression);\n\t\t}else {\n\t\t\tprop=properties.createProperty(ac,getAtRule(),property,expression);\n\t\t}\n\t} catch (InvalidParamException e){\n\t\tthrow e;\n\t} catch (Exception e){\n\t\tif(Util.onDebug){\n\t\t\te.printStackTrace();\n\t\t}\n\t\tthrow new InvalidParamException(e.toString(),ac);\n\t} \n\tif(important){\n\t\tprop.setImportant();\n\t}\n\tprop.setOrigin(origin);\n\tprop.setInfo(ac.getFrame().getLine(),ac.getFrame().getSourceFile());\n\treturn prop;\n}","Original_Lines":24,"Target_Lines":10,"Manual":"public CssProperty handleDeclaration(String property,CssExpression expression,boolean important) throws InvalidParamException {...\n\ttry {\n\t\tif(getMediaDeclaration().equals(\"on\") && (getAtRule() instanceof AtRuleMedia)){\n\t\t\tprop=properties.createMediaFeature(ac,getAtRule(),property,expression);\n\t\t}else {\n\t\t\tprop=properties.createProperty(ac,getAtRule(),property,expression);\n\t\t}\n\t} catch (InvalidParamException e){...\n\t} catch (Exception e){...\n\t} ...\n\treturn prop;\n}","Distance":0.16666666666666666,"Automatic":"public CssProperty handleDeclaration(String property,CssExpression expression,boolean important) throws InvalidParamException {\n\tCssProperty prop;...\n\ttry {\n\t\tif(getMediaDeclaration().equals(\"on\") && (getAtRule() instanceof AtRuleMedia)){\n\t\t\tprop=properties.createMediaFeature(ac,getAtRule(),property,expression);\n\t\t}else {\n\t\t\tprop=properties.createProperty(ac,getAtRule(),property,expression);\n\t\t}\n\t} catch (InvalidParamException e){...\n\t} catch (Exception e){...\n\t} ...\n\treturn prop;\n}"},{"Origin":"public synchronized CssProperty createMediaFeature(ApplContext ac,AtRule atRule,String property,CssExpression expression) throws Exception {\n\tString media=atRule.toString();\n\tint pos=-1;\n\tint pos2=media.toUpperCase().indexOf(\"AND\");\n\tif(pos2 == -1){\n\t\tpos2=media.length();\n\t}\n\tif(media.toUpperCase().indexOf(\"NOT\") != -1){\n\t\tpos=media.toUpperCase().indexOf(\"NOT\");\n\t\tmedia=media.substring(pos + 4,pos2);\n\t}else if(media.toUpperCase().indexOf(\"ONLY\") != -1){\n\t\tpos=media.toUpperCase().indexOf(\"ONLY\");\n\t\tmedia=media.substring(pos + 4,pos2);\n\t}else {\n\t\tpos=media.indexOf(\" \");\n\t\tmedia=media.substring(pos + 1,pos2);\n\t}\n\tmedia=media.trim();\n\tString classname=properties.getProperty(\"mediafeature\" + \".\" + property);\n\tif(classname == null){\n\t\tif(atRule instanceof AtRuleMedia && (!media.equals(\"all\"))){\n\t\t\tthrow new InvalidParamException(\"noexistence-media\",property,media,ac);\n\t\t}else {\n\t\t\tthrow new InvalidParamException(\"noexistence\",property,media,ac);\n\t\t}\n\t}\n\ttry {\n\t\tClass expressionclass=CssExpression.class;\n\t\tif(expression != null){\n\t\t\texpressionclass=expression.getClass();\n\t\t}\n\t\tClass[] parametersType={ac.getClass(),expressionclass};\n\t\tConstructor constructor=Class.forName(classname).getConstructor(parametersType);\n\t\tObject[] parameters={ac,expression};\n\t\treturn (CssProperty)constructor.newInstance(parameters);\n\t} catch (InvocationTargetException e){\n\t\tInvocationTargetException iv=e;\n\t\tException ex=(Exception)iv.getTargetException();\n\t\tthrow ex;\n\t} \n}","Original_Lines":39,"Target_Lines":29,"Manual":"public synchronized CssProperty createMediaFeature(ApplContext ac,AtRule atRule,String property,CssExpression expression) throws Exception {\n\tString media=atRule.toString();\n\tint pos=-1;\n\tint pos2=media.toUpperCase().indexOf(\"AND\");\n\tif(pos2 == -1){\n\t\tpos2=media.length();\n\t}\n\tif(media.toUpperCase().indexOf(\"NOT\") != -1){\n\t\tpos=media.toUpperCase().indexOf(\"NOT\");\n\t\tmedia=media.substring(pos + 4,pos2);\n\t}else if(media.toUpperCase().indexOf(\"ONLY\") != -1){\n\t\tpos=media.toUpperCase().indexOf(\"ONLY\");\n\t\tmedia=media.substring(pos + 4,pos2);\n\t}else {\n\t\tpos=media.indexOf(\" \");\n\t\tmedia=media.substring(pos + 1,pos2);\n\t}\n\tmedia=media.trim();\n\tString classname=properties.getProperty(\"mediafeature\" + \".\" + property);...\n\ttry {\n\t\tClass expressionclass=CssExpression.class;\n\t\tif(expression != null){\n\t\t\texpressionclass=expression.getClass();\n\t\t}\n\t\tClass[] parametersType={ac.getClass(),expressionclass};\n\t\tConstructor constructor=Class.forName(classname).getConstructor(parametersType);\n\t\tObject[] parameters={ac,expression};\n\t\treturn (CssProperty)constructor.newInstance(parameters);\n\t} catch (InvocationTargetException e){...\n\t} \n}","Distance":0.041666666666666664,"Automatic":"public synchronized CssProperty createMediaFeature(ApplContext ac,AtRule atRule,String property,CssExpression expression) throws Exception {\n\tString media=atRule.toString();\n\tint pos=-1;\n\tint pos2=media.toUpperCase().indexOf(\"AND\");\n\tif(pos2 == -1){\n\t\tpos2=media.length();\n\t}\n\tif(media.toUpperCase().indexOf(\"NOT\") != -1){\n\t\tpos=media.toUpperCase().indexOf(\"NOT\");\n\t\tmedia=media.substring(pos + 4,pos2);\n\t}else if(media.toUpperCase().indexOf(\"ONLY\") != -1){\n\t\tpos=media.toUpperCase().indexOf(\"ONLY\");\n\t\tmedia=media.substring(pos + 4,pos2);\n\t}else {\n\t\tpos=media.indexOf(\" \");\n\t\tmedia=media.substring(pos + 1,pos2);\n\t}\n\tmedia=media.trim();\n\tString classname=properties.getProperty(\"mediafeature\" + \".\" + property);...\n\ttry {\n\t\tClass expressionclass=CssExpression.class;\n\t\tif(expression != null){\n\t\t\texpressionclass=expression.getClass();\n\t\t}\n\t\tClass[] parametersType={ac.getClass(),expressionclass};\n\t\tConstructor constructor=Class.forName(classname).getConstructor(parametersType);\n\t\tObject[] parameters={ac,expression};\n\t\treturn (CssProperty)constructor.newInstance(parameters);\n\t} catch (InvocationTargetException e){...\n\t\tException ex=(Exception)iv.getTargetException();...\n\t} \n}"},{"Origin":"public synchronized CssProperty createProperty(ApplContext ac,AtRule atRule,String property,CssExpression expression) throws Exception {\n\tString classname=null;\n\tString media=atRule.toString();\n\tint pos=-1;\n\tString upperMedia=media.toUpperCase();\n\tint pos2=upperMedia.indexOf(\"AND \");\n\tif(pos2 == -1){\n\t\tpos2=media.length();\n\t}\n\tif((pos=upperMedia.indexOf(\"NOT\")) != -1){\n\t\tmedia=media.substring(pos + 4,pos2);\n\t}else if((pos=upperMedia.indexOf(\"ONLY\")) != -1){\n\t\tmedia=media.substring(pos + 4,pos2);\n\t}else {\n\t\tpos=media.indexOf(' ');\n\t\tmedia=media.substring(pos + 1,pos2);\n\t}\n\tmedia=media.trim();\n\tclassname=setClassName(atRule,media,ac,property);\n\tif(classname == null){\n\t\tArrayList<String> pfsOk=new ArrayList<String>();\n\t\tfor (int i=0; i < SORTEDPROFILES.length; ++i){\n\t\t\tString p=String.valueOf(SORTEDPROFILES[i]);\n\t\t\tif(!p.equals(ac.getCssVersion()) && PropertiesLoader.getProfile(p).containsKey(property)){\n\t\t\t\tpfsOk.add(p);\n\t\t\t}\n\t\t}\n\t\tif(pfsOk.size() > 0){\n\t\t\tthrow new InvalidParamException(\"noexistence\",new String[]{property,ac.getMsg().getString(ac.getCssVersion()),pfsOk.toString()},ac);\n\t\t}else {\n\t\t\tthrow new InvalidParamException(\"noexistence-at-all\",property,ac);\n\t\t}\n\t}\n\tCssIdent initial=new CssIdent(\"initial\");\n\ttry {\n\t\tif(expression.getValue().equals(initial) && ac.getCssVersion().equals(\"css3\")){\n\t\t\tClass[] parametersType={};\n\t\t\tConstructor constructor=Class.forName(classname).getConstructor(parametersType);\n\t\t\tObject[] parameters={};\n\t\t\treturn (CssProperty)constructor.newInstance(parameters);\n\t\t}else {\n\t\t\tClass[] parametersType={ac.getClass(),expression.getClass(),boolean.class};\n\t\t\tConstructor constructor=Class.forName(classname).getConstructor(parametersType);\n\t\t\tObject[] parameters={ac,expression,Boolean.TRUE};\n\t\t\treturn (CssProperty)constructor.newInstance(parameters);\n\t\t}\n\t} catch (InvocationTargetException e){\n\t\tInvocationTargetException iv=e;\n\t\tException ex=(Exception)iv.getTargetException();\n\t\tthrow ex;\n\t} \n}","Original_Lines":50,"Target_Lines":33,"Manual":"public synchronized CssProperty createProperty(ApplContext ac,AtRule atRule,String property,CssExpression expression) throws Exception {\n\tString classname=null;\n\tString media=atRule.toString();\n\tint pos=-1;\n\tString upperMedia=media.toUpperCase();\n\tint pos2=upperMedia.indexOf(\"AND \");\n\tif(pos2 == -1){\n\t\tpos2=media.length();\n\t}\n\tif((pos=upperMedia.indexOf(\"NOT\")) != -1){\n\t\tmedia=media.substring(pos + 4,pos2);\n\t}else if((pos=upperMedia.indexOf(\"ONLY\")) != -1){\n\t\tmedia=media.substring(pos + 4,pos2);\n\t}else {\n\t\tpos=media.indexOf(' ');\n\t\tmedia=media.substring(pos + 1,pos2);\n\t}\n\tmedia=media.trim();\n\tclassname=setClassName(atRule,media,ac,property);...\n\tCssIdent initial=new CssIdent(\"initial\");\n\ttry {\n\t\tif(expression.getValue().equals(initial) && ac.getCssVersion().equals(\"css3\")){\n\t\t\tClass[] parametersType={};\n\t\t\tConstructor constructor=Class.forName(classname).getConstructor(parametersType);\n\t\t\tObject[] parameters={};\n\t\t\treturn (CssProperty)constructor.newInstance(parameters);\n\t\t}else {\n\t\t\tClass[] parametersType={ac.getClass(),expression.getClass(),boolean.class};\n\t\t\tConstructor constructor=Class.forName(classname).getConstructor(parametersType);\n\t\t\tObject[] parameters={ac,expression,Boolean.TRUE};\n\t\t\treturn (CssProperty)constructor.newInstance(parameters);\n\t\t}\n\t} catch (InvocationTargetException e){...\n\t} \n}","Distance":0.1724137931034483,"Automatic":"public synchronized CssProperty createProperty(ApplContext ac,AtRule atRule,String property,CssExpression expression) throws Exception {\n\tString classname=null;\n\tString media=atRule.toString();\n\tint pos=-1;\n\tString upperMedia=media.toUpperCase();\n\tint pos2=upperMedia.indexOf(\"AND \");...\n\tif((pos=upperMedia.indexOf(\"NOT\")) != -1){\n\t\tmedia=media.substring(pos + 4,pos2);\n\t}else if((pos=upperMedia.indexOf(\"ONLY\")) != -1){\n\t\tmedia=media.substring(pos + 4,pos2);\n\t}else {\n\t\tpos=media.indexOf(' ');\n\t\tmedia=media.substring(pos + 1,pos2);\n\t}\n\tmedia=media.trim();\n\tclassname=setClassName(atRule,media,ac,property);\n\tif(classname == null){\n\t\tArrayList<String> pfsOk=new ArrayList<String>();...\n\t}\n\tCssIdent initial=new CssIdent(\"initial\");\n\ttry {\n\t\tif(expression.getValue().equals(initial) && ac.getCssVersion().equals(\"css3\")){\n\t\t\tClass[] parametersType={};\n\t\t\tConstructor constructor=Class.forName(classname).getConstructor(parametersType);\n\t\t\tObject[] parameters={};\n\t\t\treturn (CssProperty)constructor.newInstance(parameters);\n\t\t}else {\n\t\t\tClass[] parametersType={ac.getClass(),expression.getClass(),boolean.class};\n\t\t\tConstructor constructor=Class.forName(classname).getConstructor(parametersType);\n\t\t\tObject[] parameters={ac,expression,Boolean.TRUE};\n\t\t\treturn (CssProperty)constructor.newInstance(parameters);\n\t\t}\n\t} catch (InvocationTargetException e){\n\t\tInvocationTargetException iv=e;...\n\t} \n}"},{"Origin":"public ColorProfileSrc(ApplContext ac,CssExpression expression,boolean check) throws InvalidParamException {\n\tchar op=expression.getOperator();\n\tCssValue val=expression.getValue();\n\tif((val.toString().toLowerCase()).equals(\"srgb\")){\n\t\tcpSrc=sRGB;\n\t\texpression.next();\n\t}else if(val instanceof CssFunction){\n\t\tCssFunction fun=(CssFunction)val;\n\t\tCssExpression params=fun.getParameters();\n\t\tif(fun.getName().equals(\"local\")){\n\t\t\tif((params.getCount() == 1)){\n\t\t\t\tcpSrc=val;\n\t\t\t\texpression.next();\n\t\t\t}else {\n\t\t\t\tthrow new InvalidParamException(\"value\",params.getValue(),getPropertyName(),ac);\n\t\t\t}\n\t\t}else {\n\t\t\tthrow new InvalidParamException(\"value\",val,getPropertyName(),ac);\n\t\t}\n\t\tval=expression.getValue();\n\t\tif(val != null){\n\t\t\tif(op != SPACE){\n\t\t\t\tthrow new InvalidParamException(\"operator\",new Character(op),getPropertyName(),ac);\n\t\t\t}\n\t\t\tif(val instanceof CssURL){\n\t\t\t\tcpSrcs.addElement(cpSrc);\n\t\t\t\tcpSrcs.addElement(val);\n\t\t\t\tcpSrc=null;\n\t\t\t\texpression.next();\n\t\t\t}\n\t\t}\n\t}else if(val instanceof CssURL){\n\t\tcpSrc=val;\n\t\texpression.next();\n\t}else {\n\t\tthrow new InvalidParamException(\"cpSrc\",expression.getValue(),getPropertyName(),ac);\n\t}\n}","Original_Lines":36,"Target_Lines":27,"Manual":"public ColorProfileSrc(ApplContext ac,CssExpression expression,boolean check) throws InvalidParamException {\n\tchar op=expression.getOperator();\n\tCssValue val=expression.getValue();\n\tif((val.toString().toLowerCase()).equals(\"srgb\")){\n\t\tcpSrc=sRGB;\n\t\texpression.next();\n\t}else if(val instanceof CssFunction){\n\t\tCssFunction fun=(CssFunction)val;\n\t\tCssExpression params=fun.getParameters();\n\t\tif(fun.getName().equals(\"local\")){...\n\t\t}else {...\n\t\t}\n\t\tval=expression.getValue();\n\t\tif(val != null){\n\t\t\tif(op != SPACE){...\n\t\t\t}\n\t\t\tif(val instanceof CssURL){\n\t\t\t\tcpSrcs.addElement(cpSrc);\n\t\t\t\tcpSrcs.addElement(val);\n\t\t\t\tcpSrc=null;\n\t\t\t\texpression.next();\n\t\t\t}\n\t\t}\n\t}else if(val instanceof CssURL){\n\t\tcpSrc=val;\n\t\texpression.next();\n\t}else {...\n\t}\n}","Distance":0.30434782608695654,"Automatic":"public ColorProfileSrc(ApplContext ac,CssExpression expression,boolean check) throws InvalidParamException {\n\tchar op=expression.getOperator();\n\tCssValue val=expression.getValue();\n\tif((val.toString().toLowerCase()).equals(\"srgb\")){...\n\t\texpression.next();\n\t}else if(val instanceof CssFunction){\n\t\tCssFunction fun=(CssFunction)val;\n\t\tCssExpression params=fun.getParameters();\n\t\tif(fun.getName().equals(\"local\")){\n\t\t\tif((params.getCount() == 1)){...\n\t\t\t\texpression.next();\n\t\t\t}else {\n\t\t\t\tthrow new InvalidParamException(\"value\",params.getValue(),getPropertyName(),ac);\n\t\t\t}\n\t\t}else {...\n\t\t}\n\t\tval=expression.getValue();\n\t\tif(val != null){...\n\t\t\tif(val instanceof CssURL){\n\t\t\t\tcpSrcs.addElement(cpSrc);\n\t\t\t\tcpSrcs.addElement(val);...\n\t\t\t\texpression.next();\n\t\t\t}\n\t\t}\n\t}else if(val instanceof CssURL){...\n\t\texpression.next();\n\t}else {...\n\t}\n}"},{"Origin":"public EnableBackground(ApplContext ac,CssExpression expression,boolean check) throws InvalidParamException {\n\tthis.ac=ac;\n\tsetByUser();\n\tCssValue val=expression.getValue();\n\tchar op=SPACE;\n\tif(val instanceof CssIdent){\n\t\tif(val.equals(inherit)){\n\t\t\tvalue=inherit;\n\t\t\texpression.next();\n\t\t}else if(val.equals(accumulate)){\n\t\t\tvalue=accumulate;\n\t\t\texpression.next();\n\t\t}else {\n\t\t\tthrow new InvalidParamException(\"value\",val.toString(),getPropertyName(),ac);\n\t\t}\n\t}else if(val instanceof CssNumber){\n\t\tvalues.addElement(val);\n\t\texpression.next();\n\t\tval=expression.getValue();\n\t\top=expression.getOperator();\n\t\tif(val instanceof CssNumber){\n\t\t\tvalues.addElement(val);\n\t\t\texpression.next();\n\t\t}else {\n\t\t\tthrow new InvalidParamException(\"value\",val.toString(),getPropertyName(),ac);\n\t\t}\n\t\tval=expression.getValue();\n\t\top=expression.getOperator();\n\t\ttry {\n\t\t\tCssWidth width=new CssWidth(ac,expression);\n\t\t\tvalues.addElement(width);\n\t\t} catch (InvalidParamException e){\n\t\t\tthrow new InvalidParamException(\"value\",val.toString(),getPropertyName(),ac);\n\t\t} \n\t\tval=expression.getValue();\n\t\top=expression.getOperator();\n\t\ttry {\n\t\t\tCssWidth width=new CssWidth(ac,expression);\n\t\t\tvalues.addElement(width);\n\t\t\texpression.next();\n\t\t} catch (InvalidParamException e){\n\t\t\tthrow new InvalidParamException(\"value\",val.toString(),getPropertyName(),ac);\n\t\t} \n\t}else {\n\t\tthrow new InvalidParamException(\"value\",val.toString(),getPropertyName(),ac);\n\t}\n}","Original_Lines":45,"Target_Lines":36,"Manual":"public EnableBackground(ApplContext ac,CssExpression expression,boolean check) throws InvalidParamException {\n\tthis.ac=ac;\n\tsetByUser();\n\tCssValue val=expression.getValue();\n\tchar op=SPACE;\n\tif(val instanceof CssIdent){\n\t\tif(val.equals(inherit)){...\n\t\t}else if(val.equals(accumulate)){...\n\t\t}else {...\n\t\t}\n\t}else if(val instanceof CssNumber){\n\t\tvalues.addElement(val);\n\t\texpression.next();\n\t\tval=expression.getValue();\n\t\top=expression.getOperator();\n\t\tif(val instanceof CssNumber){\n\t\t\tvalues.addElement(val);\n\t\t\texpression.next();\n\t\t}else {...\n\t\t}\n\t\tval=expression.getValue();\n\t\top=expression.getOperator();\n\t\ttry {\n\t\t\tCssWidth width=new CssWidth(ac,expression);\n\t\t\tvalues.addElement(width);\n\t\t} catch (InvalidParamException e){...\n\t\t} \n\t\tval=expression.getValue();\n\t\top=expression.getOperator();\n\t\ttry {\n\t\t\tCssWidth width=new CssWidth(ac,expression);\n\t\t\tvalues.addElement(width);\n\t\t\texpression.next();\n\t\t} catch (InvalidParamException e){...\n\t\t} \n\t}else {...\n\t}\n}","Distance":0.2,"Automatic":"public EnableBackground(ApplContext ac,CssExpression expression,boolean check) throws InvalidParamException {...\n\tCssValue val=expression.getValue();\n\tchar op=SPACE;\n\tif(val instanceof CssIdent){\n\t\tif(val.equals(inherit)){\n\t\t\tvalue=inherit;\n\t\t\texpression.next();\n\t\t}else if(val.equals(accumulate)){\n\t\t\tvalue=accumulate;\n\t\t\texpression.next();\n\t\t}else {...\n\t\t}\n\t}else if(val instanceof CssNumber){\n\t\tvalues.addElement(val);\n\t\texpression.next();\n\t\tval=expression.getValue();\n\t\top=expression.getOperator();\n\t\tif(val instanceof CssNumber){\n\t\t\tvalues.addElement(val);\n\t\t\texpression.next();\n\t\t}else {...\n\t\t}\n\t\tval=expression.getValue();\n\t\top=expression.getOperator();\n\t\ttry {\n\t\t\tCssWidth width=new CssWidth(ac,expression);\n\t\t\tvalues.addElement(width);\n\t\t} catch (InvalidParamException e){...\n\t\t} \n\t\tval=expression.getValue();\n\t\top=expression.getOperator();\n\t\ttry {\n\t\t\tCssWidth width=new CssWidth(ac,expression);\n\t\t\tvalues.addElement(width);\n\t\t\texpression.next();\n\t\t} catch (InvalidParamException e){...\n\t\t} \n\t}else {...\n\t}\n}"},{"Origin":"public FloodColor(ApplContext ac,CssExpression expression,boolean check) throws InvalidParamException {\n\tthis.ac=ac;\n\tsetByUser();\n\tCssValue val=expression.getValue();\n\tboolean correct=true;\n\tString errorval=\"\";\n\tchar op=expression.getOperator();\n\tif(val.equals(inherit)){\n\t\tfloodColor=inherit;\n\t\texpression.next();\n\t}else if(val.equals(currentColor)){\n\t\tfloodColor=currentColor;\n\t\texpression.next();\n\t}else {\n\t\ttry {\n\t\t\tCssColor color=new CssColor(ac,expression);\n\t\t\tvalues.addElement(val);\n\t\t} catch (InvalidParamException e){\n\t\t\tcorrect=false;\n\t\t\terrorval=val.toString();\n\t\t} \n\t\top=expression.getOperator();\n\t\tval=expression.getValue();\n\t\tif(val != null){\n\t\t\tif(val instanceof CssFunction){\n\t\t\t\tCssValue function=val;\n\t\t\t\tif(!((CssFunction)val).getName().equals(\"icc-color\")){\n\t\t\t\t\tcorrect=false;\n\t\t\t\t\terrorval=val.toString();\n\t\t\t\t}else {\n\t\t\t\t\tCssExpression params=((CssFunction)val).getParameters();\n\t\t\t\t\top=params.getOperator();\n\t\t\t\t\tval=params.getValue();\n\t\t\t\t\tif(!(val instanceof CssIdent)){\n\t\t\t\t\t\tcorrect=false;\n\t\t\t\t\t\terrorval=val.toString();\n\t\t\t\t\t}\n\t\t\t\t\tparams.next();\n\t\t\t\t\top=params.getOperator();\n\t\t\t\t\tval=params.getValue();\n\t\t\t\t\tif(!params.end()){\n\t\t\t\t\t\tint counter=0;\n\t\t\t\t\t\twhile((op == COMMA || op == SPACE) && (counter < (params.getCount() - 1) && correct == true)){\n\t\t\t\t\t\t\tif((!(val instanceof CssNumber)) || (((CssNumber)val).getValue() < 0)){\n\t\t\t\t\t\t\t\tcorrect=false;\n\t\t\t\t\t\t\t\terrorval=val.toString();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tparams.next();\n\t\t\t\t\t\t\tcounter++;\n\t\t\t\t\t\t\tval=params.getValue();\n\t\t\t\t\t\t\top=params.getOperator();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(correct){\n\t\t\t\t\t\tparams.starts();\n\t\t\t\t\t\tvalues.addElement(function);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}else {\n\t\t\t\tcorrect=false;\n\t\t\t\terrorval=val.toString();\n\t\t\t}\n\t\t}else {\n\t\t\tcorrect=false;\n\t\t\terrorval=new String(\"\");\n\t\t}\n\t\texpression.next();\n\t}\n\tif(!correct){\n\t\tthrow new InvalidParamException(\"value\",errorval,getPropertyName(),ac);\n\t}\n}","Original_Lines":70,"Target_Lines":44,"Manual":"public FloodColor(ApplContext ac,CssExpression expression,boolean check) throws InvalidParamException {\n\tthis.ac=ac;\n\tsetByUser();\n\tCssValue val=expression.getValue();...\n\tif(val.equals(inherit)){...\n\t}else if(val.equals(currentColor)){...\n\t}else {\n\t\ttry {\n\t\t\tCssColor color=new CssColor(ac,expression);\n\t\t\tvalues.addElement(val);\n\t\t} catch (InvalidParamException e){...\n\t\t} \n\t\top=expression.getOperator();\n\t\tval=expression.getValue();\n\t\tif(val != null){\n\t\t\tif(val instanceof CssFunction){\n\t\t\t\tCssValue function=val;\n\t\t\t\tif(!((CssFunction)val).getName().equals(\"icc-color\")){...\n\t\t\t\t}else {\n\t\t\t\t\tCssExpression params=((CssFunction)val).getParameters();\n\t\t\t\t\top=params.getOperator();\n\t\t\t\t\tval=params.getValue();...\n\t\t\t\t\tparams.next();\n\t\t\t\t\top=params.getOperator();\n\t\t\t\t\tval=params.getValue();\n\t\t\t\t\tif(!params.end()){\n\t\t\t\t\t\tint counter=0;\n\t\t\t\t\t\twhile((op == COMMA || op == SPACE) && (counter < (params.getCount() - 1) && correct == true)){...\n\t\t\t\t\t\t\tparams.next();\n\t\t\t\t\t\t\tcounter++;\n\t\t\t\t\t\t\tval=params.getValue();\n\t\t\t\t\t\t\top=params.getOperator();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(correct){\n\t\t\t\t\t\tparams.starts();\n\t\t\t\t\t\tvalues.addElement(function);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}else {...\n\t\t\t}\n\t\t}else {...\n\t\t}\n\t\texpression.next();\n\t}...\n}","Distance":0.2702702702702703,"Automatic":"public FloodColor(ApplContext ac,CssExpression expression,boolean check) throws InvalidParamException {...\n\tsetByUser();\n\tCssValue val=expression.getValue();\n\tboolean correct=true;\n\tString errorval=\"\";\n\tchar op=expression.getOperator();\n\tif(val.equals(inherit)){\n\t\tfloodColor=inherit;\n\t\texpression.next();\n\t}else if(val.equals(currentColor)){...\n\t\texpression.next();\n\t}else {\n\t\ttry {\n\t\t\tCssColor color=new CssColor(ac,expression);\n\t\t\tvalues.addElement(val);\n\t\t} catch (InvalidParamException e){...\n\t\t} \n\t\top=expression.getOperator();\n\t\tval=expression.getValue();\n\t\tif(val != null){\n\t\t\tif(val instanceof CssFunction){\n\t\t\t\tCssValue function=val;\n\t\t\t\tif(!((CssFunction)val).getName().equals(\"icc-color\")){...\n\t\t\t\t}else {\n\t\t\t\t\tCssExpression params=((CssFunction)val).getParameters();\n\t\t\t\t\top=params.getOperator();\n\t\t\t\t\tval=params.getValue();...\n\t\t\t\t\tparams.next();\n\t\t\t\t\top=params.getOperator();\n\t\t\t\t\tval=params.getValue();\n\t\t\t\t\tif(!params.end()){\n\t\t\t\t\t\tint counter=0;\n\t\t\t\t\t\twhile((op == COMMA || op == SPACE) && (counter < (params.getCount() - 1) && correct == true)){...\n\t\t\t\t\t\t\tparams.next();\n\t\t\t\t\t\t\tcounter++;\n\t\t\t\t\t\t\tval=params.getValue();\n\t\t\t\t\t\t\top=params.getOperator();\n\t\t\t\t\t\t}\n\t\t\t\t\t}...\n\t\t\t\t}\n\t\t\t}else {...\n\t\t\t}\n\t\t}else {...\n\t\t}\n\t\texpression.next();\n\t}...\n}"},{"Origin":"private static NodePointer doStepPredicatesStandard(EvalContext context,NodePointer parent,Step[] steps,int currentStep){\n\tStep step=steps[currentStep];\n\tExpression[] predicates=step.getPredicates();\n\tint axis=step.getAxis();\n\tif(axis == Compiler.AXIS_SELF){\n\t\treturn doPredicate(context,parent,steps,currentStep,predicates,0);\n\t}\n\tExpression predicate=predicates[0];\n\tif(predicates.length == 1){\n\t\tNodeIterator it=getNodeIterator(context,parent,step);\n\t\tNodePointer pointer=null;\n\t\tif(it != null){\n\t\t\tif(predicate instanceof NameAttributeTest){\n\t\t\t\tString key=keyFromPredicate(context,predicate);\n\t\t\t\tfor (int i=1; it.setPosition(i); i++){\n\t\t\t\t\tNodePointer ptr=it.getNodePointer();\n\t\t\t\t\tif(isNameAttributeEqual(ptr,key)){\n\t\t\t\t\t\tpointer=ptr;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}else {\n\t\t\t\tint index=indexFromPredicate(context,predicate);\n\t\t\t\tif(it.setPosition(index + 1)){\n\t\t\t\t\tpointer=it.getNodePointer();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(pointer != null){\n\t\t\treturn doStep(context,pointer,steps,currentStep + 1);\n\t\t}\n\t}else {\n\t\tNodeIterator it=getNodeIterator(context,parent,step);\n\t\tif(it != null){\n\t\t\tList list=new ArrayList();\n\t\t\tfor (int i=1; it.setPosition(i); i++){\n\t\t\t\tlist.add(it.getNodePointer());\n\t\t\t}\n\t\t\tNodePointer pointer=doPredicatesStandard(context,list,steps,currentStep,predicates,0);\n\t\t\tif(pointer != null){\n\t\t\t\treturn pointer;\n\t\t\t}\n\t\t}\n\t}\n\treturn createNullPointer(context,parent,steps,currentStep);\n}","Original_Lines":44,"Target_Lines":25,"Manual":"private static NodePointer doStepPredicatesStandard(EvalContext context,NodePointer parent,Step[] steps,int currentStep){\n\tStep step=steps[currentStep];\n\tExpression[] predicates=step.getPredicates();...\n\tExpression predicate=predicates[0];\n\tif(predicates.length == 1){\n\t\tNodeIterator it=getNodeIterator(context,parent,step);...\n\t\tif(it != null){\n\t\t\tif(predicate instanceof NameAttributeTest){\n\t\t\t\tString key=keyFromPredicate(context,predicate);\n\t\t\t\tfor (int i=1; it.setPosition(i); i++){\n\t\t\t\t\tNodePointer ptr=it.getNodePointer();...\n\t\t\t\t}\n\t\t\t}else {\n\t\t\t\tint index=indexFromPredicate(context,predicate);...\n\t\t\t}\n\t\t}\n\t\tif(pointer != null){\n\t\t\treturn doStep(context,pointer,steps,currentStep + 1);\n\t\t}\n\t}else {\n\t\tNodeIterator it=getNodeIterator(context,parent,step);\n\t\tif(it != null){...\n\t\t\tNodePointer pointer=doPredicatesStandard(context,list,steps,currentStep,predicates,0);...\n\t\t}\n\t}\n\treturn createNullPointer(context,parent,steps,currentStep);\n}","Distance":0.25,"Automatic":"private static NodePointer doStepPredicatesStandard(EvalContext context,NodePointer parent,Step[] steps,int currentStep){\n\tStep step=steps[currentStep];\n\tExpression[] predicates=step.getPredicates();\n\tint axis=step.getAxis();...\n\tExpression predicate=predicates[0];\n\tif(predicates.length == 1){\n\t\tNodeIterator it=getNodeIterator(context,parent,step);\n\t\tNodePointer pointer=null;\n\t\tif(it != null){\n\t\t\tif(predicate instanceof NameAttributeTest){\n\t\t\t\tString key=keyFromPredicate(context,predicate);...\n\t\t\t}else {\n\t\t\t\tint index=indexFromPredicate(context,predicate);...\n\t\t\t}\n\t\t}\n\t\tif(pointer != null){\n\t\t\treturn doStep(context,pointer,steps,currentStep + 1);\n\t\t}\n\t}else {\n\t\tNodeIterator it=getNodeIterator(context,parent,step);\n\t\tif(it != null){\n\t\t\tList list=new ArrayList();...\n\t\t\tNodePointer pointer=doPredicatesStandard(context,list,steps,currentStep,predicates,0);...\n\t\t}\n\t}\n\treturn createNullPointer(context,parent,steps,currentStep);\n}"},{"Origin":"private static NodePointer doPredicateName(EvalContext context,NodePointer parent,Step[] steps,int currentStep,Expression[] predicates,int currentPredicate){\n\tExpression predicate=predicates[currentPredicate];\n\tString key=keyFromPredicate(context,predicate);\n\tNodePointer child=valuePointer(parent);\n\tif(child instanceof PropertyOwnerPointer){\n\t\tPropertyPointer pointer=((PropertyOwnerPointer)child).getPropertyPointer();\n\t\tpointer.setPropertyName(key);\n\t\tif(pointer.isActual()){\n\t\t\treturn doPredicate(context,pointer,steps,currentStep,predicates,currentPredicate + 1);\n\t\t}\n\t}else if(child.isCollection()){\n\t\tNodePointer bestMatch=null;\n\t\tint bestQuality=0;\n\t\tchild=(NodePointer)child.clone();\n\t\tint count=child.getLength();\n\t\tfor (int i=0; i < count; i++){\n\t\t\tchild.setIndex(i);\n\t\t\tNodePointer valuePointer=valuePointer(child);\n\t\t\tNodePointer pointer;\n\t\t\tif((valuePointer instanceof PropertyOwnerPointer) || valuePointer.isCollection()){\n\t\t\t\tpointer=doPredicateName(context,valuePointer,steps,currentStep,predicates,currentPredicate);\n\t\t\t}else if(isNameAttributeEqual(valuePointer,key)){\n\t\t\t\tpointer=doPredicate(context,valuePointer,steps,currentStep,predicates,currentPredicate + 1);\n\t\t\t}else {\n\t\t\t\tpointer=null;\n\t\t\t}\n\t\t\tif(pointer != null){\n\t\t\t\tint quality=computeQuality(pointer);\n\t\t\t\tif(quality == PERFECT_MATCH){\n\t\t\t\t\treturn pointer;\n\t\t\t\t}\n\t\t\t\tif(quality > bestQuality){\n\t\t\t\t\tbestMatch=(NodePointer)pointer.clone();\n\t\t\t\t\tbestQuality=quality;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(bestMatch != null){\n\t\t\treturn bestMatch;\n\t\t}\n\t}else {\n\t\tNodePointer found=doPredicatesStandard(context,Collections.singletonList(child),steps,currentStep,predicates,currentPredicate);\n\t\tif(found != null){\n\t\t\treturn found;\n\t\t}\n\t}\n\treturn createNullPointerForPredicates(context,child,steps,currentStep,predicates,currentPredicate);\n}","Original_Lines":46,"Target_Lines":29,"Manual":"private static NodePointer doPredicateName(EvalContext context,NodePointer parent,Step[] steps,int currentStep,Expression[] predicates,int currentPredicate){\n\tExpression predicate=predicates[currentPredicate];\n\tString key=keyFromPredicate(context,predicate);\n\tNodePointer child=valuePointer(parent);\n\tif(child instanceof PropertyOwnerPointer){\n\t\tPropertyPointer pointer=((PropertyOwnerPointer)child).getPropertyPointer();...\n\t\tif(pointer.isActual()){\n\t\t\treturn doPredicate(context,pointer,steps,currentStep,predicates,currentPredicate + 1);\n\t\t}\n\t}else if(child.isCollection()){...\n\t\tfor (int i=0; i < count; i++){\n\t\t\tchild.setIndex(i);\n\t\t\tNodePointer valuePointer=valuePointer(child);...\n\t\t\tif((valuePointer instanceof PropertyOwnerPointer) || valuePointer.isCollection()){\n\t\t\t\tpointer=doPredicateName(context,valuePointer,steps,currentStep,predicates,currentPredicate);\n\t\t\t}else if(isNameAttributeEqual(valuePointer,key)){\n\t\t\t\tpointer=doPredicate(context,valuePointer,steps,currentStep,predicates,currentPredicate + 1);\n\t\t\t}else {...\n\t\t\t}\n\t\t\tif(pointer != null){\n\t\t\t\tint quality=computeQuality(pointer);\n\t\t\t\tif(quality == PERFECT_MATCH){\n\t\t\t\t\treturn pointer;\n\t\t\t\t}...\n\t\t\t}\n\t\t}...\n\t}else {\n\t\tNodePointer found=doPredicatesStandard(context,Collections.singletonList(child),steps,currentStep,predicates,currentPredicate);...\n\t}\n\treturn createNullPointerForPredicates(context,child,steps,currentStep,predicates,currentPredicate);\n}","Distance":0.42857142857142855,"Automatic":"private static NodePointer doPredicateName(EvalContext context,NodePointer parent,Step[] steps,int currentStep,Expression[] predicates,int currentPredicate){\n\tExpression predicate=predicates[currentPredicate];\n\tString key=keyFromPredicate(context,predicate);\n\tNodePointer child=valuePointer(parent);\n\tif(child instanceof PropertyOwnerPointer){\n\t\tPropertyPointer pointer=((PropertyOwnerPointer)child).getPropertyPointer();\n\t\tpointer.setPropertyName(key);\n\t\tif(pointer.isActual()){\n\t\t\treturn doPredicate(context,pointer,steps,currentStep,predicates,currentPredicate + 1);\n\t\t}\n\t}else if(child.isCollection()){\n\t\tNodePointer bestMatch=null;\n\t\tint bestQuality=0;\n\t\tchild=(NodePointer)child.clone();\n\t\tint count=child.getLength();\n\t\tfor (int i=0; i < count; i++){...\n\t\t\tNodePointer valuePointer=valuePointer(child);\n\t\t\tNodePointer pointer;\n\t\t\tif((valuePointer instanceof PropertyOwnerPointer) || valuePointer.isCollection()){\n\t\t\t\tpointer=doPredicateName(context,valuePointer,steps,currentStep,predicates,currentPredicate);\n\t\t\t}else if(isNameAttributeEqual(valuePointer,key)){\n\t\t\t\tpointer=doPredicate(context,valuePointer,steps,currentStep,predicates,currentPredicate + 1);\n\t\t\t}else {\n\t\t\t\tpointer=null;\n\t\t\t}...\n\t\t}...\n\t}else {\n\t\tNodePointer found=doPredicatesStandard(context,Collections.singletonList(child),steps,currentStep,predicates,currentPredicate);...\n\t}\n\treturn createNullPointerForPredicates(context,child,steps,currentStep,predicates,currentPredicate);\n}"},{"Origin":"private boolean authenticate(String user,String passwd) throws MessagingException {\n\tString mechs=session.getProperty(\"mail.\" + name + \".auth.mechanisms\");\n\tif(mechs == null)\n\t\tmechs=defaultAuthenticationMechanisms;\n\tString authzid=getAuthorizationId();\n\tif(authzid == null)\n\t\tauthzid=user;\n\tif(enableSASL){\n\t\tif(debug)\n\t\t\tout.println(\"DEBUG SMTP: Authenticate with SASL\");\n\t\tif(sasllogin(getSASLMechanisms(),getSASLRealm(),authzid,user,passwd))\n\t\t\treturn true;\n\t\tif(debug)\n\t\t\tout.println(\"DEBUG SMTP: SASL authentication failed\");\n\t}\n\tif(debug){\n\t\tout.println(\"DEBUG SMTP: Attempt to authenticate\");\n\t\tout.println(\"DEBUG SMTP: check mechanisms: \" + mechs);\n\t}\n\tStringTokenizer st=new StringTokenizer(mechs);\n\twhile(st.hasMoreTokens()){\n\t\tString m=st.nextToken();\n\t\tString dprop=\"mail.\" + name + \".auth.\"+ m.toLowerCase(Locale.ENGLISH)+ \".disable\";\n\t\tboolean disabled=PropUtil.getBooleanSessionProperty(session,dprop,false);\n\t\tif(disabled){\n\t\t\tif(debug)\n\t\t\t\tout.println(\"DEBUG SMTP: mechanism \" + m + \" disabled by property: \"+ dprop);\n\t\t\tcontinue;\n\t\t}\n\t\tm=m.toUpperCase(Locale.ENGLISH);\n\t\tif(!supportsAuthentication(m)){\n\t\t\tif(debug)\n\t\t\t\tout.println(\"DEBUG SMTP: mechanism \" + m + \" not supported by server\");\n\t\t\tcontinue;\n\t\t}\n\t\tAuthenticator a=(Authenticator)authenticators.get(m);\n\t\tif(a == null){\n\t\t\tif(debug)\n\t\t\t\tout.println(\"DEBUG SMTP: \" + \"no authenticator for mechanism \" + m);\n\t\t\tcontinue;\n\t\t}\n\t\treturn a.authenticate(host,authzid,user,passwd);\n\t}\n\tthrow new AuthenticationFailedException(\"No authentication mechansims supported by both server and client\");\n}","Original_Lines":43,"Target_Lines":24,"Manual":"private boolean authenticate(String user,String passwd) throws MessagingException {\n\tString mechs=session.getProperty(\"mail.\" + name + \".auth.mechanisms\");...\n\tString authzid=getAuthorizationId();...\n\tif(enableSASL){...\n\t\tif(sasllogin(getSASLMechanisms(),getSASLRealm(),authzid,user,passwd))\n\t\t\treturn true;...\n\t}...\n\tStringTokenizer st=new StringTokenizer(mechs);\n\twhile(st.hasMoreTokens()){\n\t\tString m=st.nextToken();\n\t\tString dprop=\"mail.\" + name + \".auth.\"+ m.toLowerCase(Locale.ENGLISH)+ \".disable\";\n\t\tboolean disabled=PropUtil.getBooleanSessionProperty(session,dprop,false);\n\t\tif(disabled){...\n\t\t\tcontinue;\n\t\t}\n\t\tm=m.toUpperCase(Locale.ENGLISH);\n\t\tif(!supportsAuthentication(m)){...\n\t\t\tcontinue;\n\t\t}\n\t\tAuthenticator a=(Authenticator)authenticators.get(m);\n\t\tif(a == null){...\n\t\t\tcontinue;\n\t\t}\n\t\treturn a.authenticate(host,authzid,user,passwd);\n\t}...\n}","Distance":0.22727272727272727,"Automatic":"private boolean authenticate(String user,String passwd) throws MessagingException {\n\tString mechs=session.getProperty(\"mail.\" + name + \".auth.mechanisms\");...\n\tString authzid=getAuthorizationId();\n\tif(authzid == null)\n\t\tauthzid=user;\n\tif(enableSASL){...\n\t\tif(sasllogin(getSASLMechanisms(),getSASLRealm(),authzid,user,passwd))\n\t\t\treturn true;\n\t\tif(debug)...\n\t}...\n\tStringTokenizer st=new StringTokenizer(mechs);\n\twhile(st.hasMoreTokens()){\n\t\tString m=st.nextToken();\n\t\tString dprop=\"mail.\" + name + \".auth.\"+ m.toLowerCase(Locale.ENGLISH)+ \".disable\";\n\t\tboolean disabled=PropUtil.getBooleanSessionProperty(session,dprop,false);\n\t\tif(disabled){...\n\t\t\tcontinue;\n\t\t}\n\t\tm=m.toUpperCase(Locale.ENGLISH);...\n\t\tAuthenticator a=(Authenticator)authenticators.get(m);\n\t\tif(a == null){...\n\t\t\tcontinue;\n\t\t}\n\t\treturn a.authenticate(host,authzid,user,passwd);\n\t}...\n}"},{"Origin":"public synchronized void authntlm(String authzid,String u,String p) throws ProtocolException {\n\tVector v=new Vector();\n\tString tag=null;\n\tResponse r=null;\n\tboolean done=false;\n\tString type1Msg=null;\n\tint flags=PropUtil.getIntProperty(props,\"mail.\" + name + \".auth.ntlm.flags\",0);\n\tString domain=props.getProperty(\"mail.\" + name + \".auth.ntlm.domain\",\"\");\n\tNtlm ntlm=new Ntlm(domain,getLocalHost(),u,p,debug ? out : null);\n\ttry {\n\t\tif(noauthdebug){\n\t\t\tout.println(\"DEBUG IMAP: AUTHENTICATE NTLM command trace suppressed\");\n\t\t\tsuspendTracing();\n\t\t}\n\t\ttry {\n\t\t\ttag=writeCommand(\"AUTHENTICATE NTLM\",null);\n\t\t} catch (Exception ex){\n\t\t\tr=Response.byeResponse(ex);\n\t\t\tdone=true;\n\t\t} \n\t\tOutputStream os=getOutputStream();\n\t\tboolean first=true;\n\t\twhile(!done){\n\t\t\ttry {\n\t\t\t\tr=readResponse();\n\t\t\t\tif(r.isContinuation()){\n\t\t\t\t\tString s;\n\t\t\t\t\tif(first){\n\t\t\t\t\t\ts=ntlm.generateType1Msg(flags);\n\t\t\t\t\t\tfirst=false;\n\t\t\t\t\t}else {\n\t\t\t\t\t\ts=ntlm.generateType3Msg(r.getRest());\n\t\t\t\t\t}\n\t\t\t\t\tos.write(ASCIIUtility.getBytes(s));\n\t\t\t\t\tos.write(CRLF);\n\t\t\t\t\tos.flush();\n\t\t\t\t}else if(r.isTagged() && r.getTag().equals(tag))\n\t\t\t\t\tdone=true;\n\t\t\t\telse if(r.isBYE())\n\t\t\t\t\tdone=true;\n\t\t\t\telse \n\t\t\t\t\tv.addElement(r);\n\t\t\t} catch (Exception ioex){\n\t\t\t\tr=Response.byeResponse(ioex);\n\t\t\t\tdone=true;\n\t\t\t} \n\t\t}\n\t} finally {\n\t\tresumeTracing();\n\t} \n\tResponse[] responses=new Response[v.size()];\n\tv.copyInto(responses);\n\tnotifyResponseHandlers(responses);\n\tif(noauthdebug)\n\t\tout.println(\"DEBUG IMAP: AUTHENTICATE NTLM command result: \" + r);\n\thandleResult(r);\n\tsetCapabilities(r);\n\tauthenticated=true;\n}","Original_Lines":57,"Target_Lines":30,"Manual":"public synchronized void authntlm(String authzid,String u,String p) throws ProtocolException {...\n\tint flags=PropUtil.getIntProperty(props,\"mail.\" + name + \".auth.ntlm.flags\",0);\n\tString domain=props.getProperty(\"mail.\" + name + \".auth.ntlm.domain\",\"\");\n\tNtlm ntlm=new Ntlm(domain,getLocalHost(),u,p,debug ? out : null);\n\ttry {...\n\t\ttry {\n\t\t\ttag=writeCommand(\"AUTHENTICATE NTLM\",null);\n\t\t} catch (Exception ex){...\n\t\t} \n\t\tOutputStream os=getOutputStream();\n\t\tboolean first=true;\n\t\twhile(!done){\n\t\t\ttry {\n\t\t\t\tr=readResponse();\n\t\t\t\tif(r.isContinuation()){...\n\t\t\t\t\tos.write(ASCIIUtility.getBytes(s));...\n\t\t\t\t}else if(r.isTagged() && r.getTag().equals(tag))\n\t\t\t\t\tdone=true;\n\t\t\t\telse if(r.isBYE())\n\t\t\t\t\tdone=true;\n\t\t\t\telse \n\t\t\t\t\tv.addElement(r);\n\t\t\t} catch (Exception ioex){...\n\t\t\t} \n\t\t}\n\t} finally {\n\t\tresumeTracing();\n\t} \n\tResponse[] responses=new Response[v.size()];\n\tv.copyInto(responses);\n\tnotifyResponseHandlers(responses);...\n}","Distance":0.41935483870967744,"Automatic":"public synchronized void authntlm(String authzid,String u,String p) throws ProtocolException {\n\tVector v=new Vector();\n\tString tag=null;\n\tResponse r=null;\n\tboolean done=false;\n\tString type1Msg=null;\n\tint flags=PropUtil.getIntProperty(props,\"mail.\" + name + \".auth.ntlm.flags\",0);\n\tString domain=props.getProperty(\"mail.\" + name + \".auth.ntlm.domain\",\"\");\n\tNtlm ntlm=new Ntlm(domain,getLocalHost(),u,p,debug ? out : null);\n\ttry {...\n\t\tOutputStream os=getOutputStream();\n\t\tboolean first=true;\n\t\twhile(!done){\n\t\t\ttry {\n\t\t\t\tr=readResponse();\n\t\t\t\tif(r.isContinuation()){\n\t\t\t\t\tString s;...\n\t\t\t\t\tos.write(ASCIIUtility.getBytes(s));...\n\t\t\t\t\tos.flush();\n\t\t\t\t}else if(r.isTagged() && r.getTag().equals(tag))...\n\t\t\t\telse if(r.isBYE())...\n\t\t\t\telse \n\t\t\t\t\tv.addElement(r);\n\t\t\t} catch (Exception ioex){...\n\t\t\t} \n\t\t}\n\t} finally {\n\t\tresumeTracing();\n\t} \n\tResponse[] responses=new Response[v.size()];\n\tv.copyInto(responses);\n\tnotifyResponseHandlers(responses);...\n\thandleResult(r);...\n}"},{"Origin":"public synchronized void authplain(String authzid,String u,String p) throws ProtocolException {\n\tVector v=new Vector();\n\tString tag=null;\n\tResponse r=null;\n\tboolean done=false;\n\ttry {\n\t\tif(noauthdebug){\n\t\t\tout.println(\"DEBUG IMAP: AUTHENTICATE PLAIN command trace suppressed\");\n\t\t\tsuspendTracing();\n\t\t}\n\t\ttry {\n\t\t\ttag=writeCommand(\"AUTHENTICATE PLAIN\",null);\n\t\t} catch (Exception ex){\n\t\t\tr=Response.byeResponse(ex);\n\t\t\tdone=true;\n\t\t} \n\t\tOutputStream os=getOutputStream();\n\t\tByteArrayOutputStream bos=new ByteArrayOutputStream();\n\t\tOutputStream b64os=new BASE64EncoderStream(bos,Integer.MAX_VALUE);\n\t\twhile(!done){\n\t\t\ttry {\n\t\t\t\tr=readResponse();\n\t\t\t\tif(r.isContinuation()){\n\t\t\t\t\tfinal String nullByte=\"\\0\";\n\t\t\t\t\tString s=(authzid == null ? \"\" : authzid) + nullByte + u+ nullByte+ p;\n\t\t\t\t\tb64os.write(ASCIIUtility.getBytes(s));\n\t\t\t\t\tb64os.flush();\n\t\t\t\t\tbos.write(CRLF);\n\t\t\t\t\tos.write(bos.toByteArray());\n\t\t\t\t\tos.flush();\n\t\t\t\t\tbos.reset();\n\t\t\t\t}else if(r.isTagged() && r.getTag().equals(tag))\n\t\t\t\t\tdone=true;\n\t\t\t\telse if(r.isBYE())\n\t\t\t\t\tdone=true;\n\t\t\t\telse \n\t\t\t\t\tv.addElement(r);\n\t\t\t} catch (Exception ioex){\n\t\t\t\tr=Response.byeResponse(ioex);\n\t\t\t\tdone=true;\n\t\t\t} \n\t\t}\n\t} finally {\n\t\tresumeTracing();\n\t} \n\tResponse[] responses=new Response[v.size()];\n\tv.copyInto(responses);\n\tnotifyResponseHandlers(responses);\n\tif(noauthdebug)\n\t\tout.println(\"DEBUG IMAP: AUTHENTICATE PLAIN command result: \" + r);\n\thandleResult(r);\n\tsetCapabilities(r);\n\tauthenticated=true;\n}","Original_Lines":52,"Target_Lines":28,"Manual":"public synchronized void authplain(String authzid,String u,String p) throws ProtocolException {...\n\ttry {...\n\t\ttry {\n\t\t\ttag=writeCommand(\"AUTHENTICATE PLAIN\",null);\n\t\t} catch (Exception ex){...\n\t\t} ...\n\t\tByteArrayOutputStream bos=new ByteArrayOutputStream();\n\t\tOutputStream b64os=new BASE64EncoderStream(bos,Integer.MAX_VALUE);\n\t\twhile(!done){\n\t\t\ttry {\n\t\t\t\tr=readResponse();\n\t\t\t\tif(r.isContinuation()){...\n\t\t\t\t\tString s=(authzid == null ? \"\" : authzid) + nullByte + u+ nullByte+ p;\n\t\t\t\t\tb64os.write(ASCIIUtility.getBytes(s));...\n\t\t\t\t}else if(r.isTagged() && r.getTag().equals(tag))\n\t\t\t\t\tdone=true;\n\t\t\t\telse if(r.isBYE())\n\t\t\t\t\tdone=true;\n\t\t\t\telse \n\t\t\t\t\tv.addElement(r);\n\t\t\t} catch (Exception ioex){...\n\t\t\t} \n\t\t}\n\t} finally {\n\t\tresumeTracing();\n\t} \n\tResponse[] responses=new Response[v.size()];\n\tv.copyInto(responses);\n\tnotifyResponseHandlers(responses);...\n}","Distance":0.42857142857142855,"Automatic":"public synchronized void authplain(String authzid,String u,String p) throws ProtocolException {\n\tVector v=new Vector();\n\tString tag=null;\n\tResponse r=null;\n\tboolean done=false;\n\ttry {...\n\t\tOutputStream os=getOutputStream();\n\t\tByteArrayOutputStream bos=new ByteArrayOutputStream();\n\t\tOutputStream b64os=new BASE64EncoderStream(bos,Integer.MAX_VALUE);\n\t\twhile(!done){\n\t\t\ttry {\n\t\t\t\tr=readResponse();\n\t\t\t\tif(r.isContinuation()){\n\t\t\t\t\tfinal String nullByte=\"\\0\";\n\t\t\t\t\tString s=(authzid == null ? \"\" : authzid) + nullByte + u+ nullByte+ p;\n\t\t\t\t\tb64os.write(ASCIIUtility.getBytes(s));...\n\t\t\t\t\tbos.write(CRLF);...\n\t\t\t\t}else if(r.isTagged() && r.getTag().equals(tag))...\n\t\t\t\telse if(r.isBYE())...\n\t\t\t\telse \n\t\t\t\t\tv.addElement(r);\n\t\t\t} catch (Exception ioex){...\n\t\t\t} \n\t\t}\n\t} finally {\n\t\tresumeTracing();\n\t} \n\tResponse[] responses=new Response[v.size()];\n\tv.copyInto(responses);\n\tnotifyResponseHandlers(responses);...\n\thandleResult(r);...\n}"},{"Origin":"public HttpContext service(HttpRequest request,HttpResponse response) throws IOException, HttpException {\n\tString host=request.getHost();\n\tif(_requestsPerGC > 0 && _gcRequests++ > _requestsPerGC){\n\t\t_gcRequests=0;\n\t\tSystem.gc();\n\t}\n\twhile(true){\n\t\tPathMap contextMap=(PathMap)_virtualHostMap.get(host);\n\t\tif(contextMap != null){\n\t\t\tList contextLists=contextMap.getMatches(request.getPath());\n\t\t\tif(contextLists != null){\n\t\t\t\tif(log.isTraceEnabled())\n\t\t\t\t\tlog.trace(\"Contexts at \" + request.getPath() + \": \"+ contextLists);\n\t\t\t\tfor (int i=0; i < contextLists.size(); i++){\n\t\t\t\t\tMap.Entry entry=(Map.Entry)contextLists.get(i);\n\t\t\t\t\tList contextList=(List)entry.getValue();\n\t\t\t\t\tfor (int j=0; j < contextList.size(); j++){\n\t\t\t\t\t\tHttpContext context=(HttpContext)contextList.get(j);\n\t\t\t\t\t\tif(log.isDebugEnabled())\n\t\t\t\t\t\t\tlog.debug(\"Try \" + context + \",\"+ j);\n\t\t\t\t\t\tcontext.handle(request,response);\n\t\t\t\t\t\tif(request.isHandled())\n\t\t\t\t\t\t\treturn context;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(host == null)\n\t\t\tbreak;\n\t\thost=null;\n\t}\n\tsynchronized (this){\n\t\tif(_notFoundContext == null){\n\t\t\t_notFoundContext=new HttpContext();\n\t\t\t_notFoundContext.setContextPath(\"/\");\n\t\t\t_notFoundContext.setHttpServer(this);\n\t\t\ttry {\n\t\t\t\t_notFoundContext.addHandler((NotFoundHandler)Class.forName(\"org.openqa.jetty.http.handler.RootNotFoundHandler\").newInstance());\n\t\t\t} catch (Exception e){\n\t\t\t\t_notFoundContext.addHandler(new NotFoundHandler());\n\t\t\t} \n\t\t\taddComponent(_notFoundContext);\n\t\t\ttry {\n\t\t\t\t_notFoundContext.start();\n\t\t\t} catch (Exception e){\n\t\t\t\tlog.warn(LogSupport.EXCEPTION,e);\n\t\t\t} \n\t\t}\n\t\t_notFoundContext.handle(request,response);\n\t\tif(!request.isHandled())\n\t\t\tresponse.sendError(HttpResponse.__404_Not_Found);\n\t\treturn _notFoundContext;\n\t}\n}","Original_Lines":52,"Target_Lines":30,"Manual":"public HttpContext service(HttpRequest request,HttpResponse response) throws IOException, HttpException {\n\tString host=request.getHost();...\n\twhile(true){\n\t\tPathMap contextMap=(PathMap)_virtualHostMap.get(host);\n\t\tif(contextMap != null){\n\t\t\tList contextLists=contextMap.getMatches(request.getPath());\n\t\t\tif(contextLists != null){...\n\t\t\t\tfor (int i=0; i < contextLists.size(); i++){\n\t\t\t\t\tMap.Entry entry=(Map.Entry)contextLists.get(i);\n\t\t\t\t\tList contextList=(List)entry.getValue();\n\t\t\t\t\tfor (int j=0; j < contextList.size(); j++){\n\t\t\t\t\t\tHttpContext context=(HttpContext)contextList.get(j);...\n\t\t\t\t\t\tcontext.handle(request,response);\n\t\t\t\t\t\tif(request.isHandled())\n\t\t\t\t\t\t\treturn context;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}...\n\t}\n\tsynchronized (this){\n\t\tif(_notFoundContext == null){...\n\t\t\ttry {\n\t\t\t\t_notFoundContext.addHandler((NotFoundHandler)Class.forName(\"org.openqa.jetty.http.handler.RootNotFoundHandler\").newInstance());\n\t\t\t} catch (Exception e){...\n\t\t\t} ...\n\t\t}...\n\t\tif(!request.isHandled())\n\t\t\tresponse.sendError(HttpResponse.__404_Not_Found);\n\t\treturn _notFoundContext;\n\t}\n}","Distance":0.42857142857142855,"Automatic":"public HttpContext service(HttpRequest request,HttpResponse response) throws IOException, HttpException {\n\tString host=request.getHost();...\n\twhile(true){\n\t\tPathMap contextMap=(PathMap)_virtualHostMap.get(host);\n\t\tif(contextMap != null){\n\t\t\tList contextLists=contextMap.getMatches(request.getPath());\n\t\t\tif(contextLists != null){...\n\t\t\t\tfor (int i=0; i < contextLists.size(); i++){...\n\t\t\t\t\tList contextList=(List)entry.getValue();\n\t\t\t\t\tfor (int j=0; j < contextList.size(); j++){\n\t\t\t\t\t\tHttpContext context=(HttpContext)contextList.get(j);...\n\t\t\t\t\t\tif(request.isHandled())\n\t\t\t\t\t\t\treturn context;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(host == null)\n\t\t\tbreak;\n\t\thost=null;\n\t}\n\tsynchronized (this){\n\t\tif(_notFoundContext == null){\n\t\t\t_notFoundContext=new HttpContext();\n\t\t\t_notFoundContext.setContextPath(\"/\");\n\t\t\t_notFoundContext.setHttpServer(this);...\n\t\t}\n\t\t_notFoundContext.handle(request,response);\n\t\tif(!request.isHandled())\n\t\t\tresponse.sendError(HttpResponse.__404_Not_Found);...\n\t}\n}"},{"Origin":"XObject execute(final XPathContext xpathContext,final int contextNode,final PrefixResolver namespaceContext) throws TransformerException {\n\txpathContext.pushNamespaceContext(namespaceContext);\n\txpathContext.pushCurrentNodeAndExpression(contextNode,contextNode);\n\tXObject xobj=null;\n\ttry {\n\t\txobj=mainExp_.execute(xpathContext);\n\t} catch (final TransformerException te){\n\t\tte.setLocator(mainExp_);\n\t\tfinal ErrorListener el=xpathContext.getErrorListener();\n\t\tif(null != el){\n\t\t\tel.error(te);\n\t\t}else {\n\t\t\tthrow te;\n\t\t}\n\t} catch (Exception e){\n\t\twhile(e instanceof WrappedRuntimeException){\n\t\t\te=((WrappedRuntimeException)e).getException();\n\t\t}\n\t\tString msg=e.getMessage();\n\t\tif(msg == null || msg.length() == 0){\n\t\t\tmsg=XPATHMessages.createXPATHMessage(XPATHErrorResources.ER_XPATH_ERROR,null);\n\t\t}\n\t\tfinal TransformerException te=new TransformerException(msg,mainExp_,e);\n\t\tfinal ErrorListener el=xpathContext.getErrorListener();\n\t\tif(null != el){\n\t\t\tel.fatalError(te);\n\t\t}else {\n\t\t\tthrow te;\n\t\t}\n\t} finally {\n\t\txpathContext.popNamespaceContext();\n\t\txpathContext.popCurrentNodeAndExpression();\n\t} \n\treturn xobj;\n}","Original_Lines":33,"Target_Lines":11,"Manual":"XObject execute(final XPathContext xpathContext,final int contextNode,final PrefixResolver namespaceContext) throws TransformerException {\n\txpathContext.pushNamespaceContext(namespaceContext);\n\txpathContext.pushCurrentNodeAndExpression(contextNode,contextNode);...\n\ttry {\n\t\txobj=mainExp_.execute(xpathContext);\n\t} catch (final TransformerException te){...\n\t} catch (Exception e){...\n\t} finally {\n\t\txpathContext.popNamespaceContext();\n\t\txpathContext.popCurrentNodeAndExpression();\n\t} \n\treturn xobj;\n}","Distance":0.125,"Automatic":"XObject execute(final XPathContext xpathContext,final int contextNode,final PrefixResolver namespaceContext) throws TransformerException {\n\txpathContext.pushNamespaceContext(namespaceContext);\n\txpathContext.pushCurrentNodeAndExpression(contextNode,contextNode);\n\tXObject xobj=null;\n\ttry {\n\t\txobj=mainExp_.execute(xpathContext);\n\t} catch (final TransformerException te){...\n\t} catch (Exception e){...\n\t} finally {\n\t\txpathContext.popNamespaceContext();\n\t\txpathContext.popCurrentNodeAndExpression();\n\t} \n\treturn xobj;\n}"},{"Origin":"public static boolean check(List constraints,Authenticator authenticator,UserRealm realm,String pathInContext,HttpRequest request,HttpResponse response) throws HttpException, IOException {\n\tint dataConstraint=DC_NONE;\n\tObject roles=null;\n\tboolean unauthenticated=false;\n\tboolean forbidden=false;\n\tfor (int c=0; c < constraints.size(); c++){\n\t\tSecurityConstraint sc=(SecurityConstraint)constraints.get(c);\n\t\tif(!sc.forMethod(request.getMethod()))\n\t\t\tcontinue;\n\t\tif(dataConstraint > DC_UNSET && sc.hasDataConstraint()){\n\t\t\tif(sc.getDataConstraint() > dataConstraint)\n\t\t\t\tdataConstraint=sc.getDataConstraint();\n\t\t}else \n\t\t\tdataConstraint=DC_UNSET;\n\t\tif(!unauthenticated && !forbidden){\n\t\t\tif(sc.getAuthenticate()){\n\t\t\t\tif(sc.isAnyRole()){\n\t\t\t\t\troles=ANY_ROLE;\n\t\t\t\t}else {\n\t\t\t\t\tList scr=sc.getRoles();\n\t\t\t\t\tif(scr == null || scr.size() == 0){\n\t\t\t\t\t\tforbidden=true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}else {\n\t\t\t\t\t\tif(roles != ANY_ROLE){\n\t\t\t\t\t\t\troles=LazyList.addCollection(roles,scr);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}else \n\t\t\t\tunauthenticated=true;\n\t\t}\n\t}\n\tif(forbidden && (!(authenticator instanceof FormAuthenticator) || !((FormAuthenticator)authenticator).isLoginOrErrorPage(pathInContext))){\n\t\tHttpContext.sendContextError(response,HttpResponse.__403_Forbidden,null);\n\t\treturn false;\n\t}\n\tif(dataConstraint > DC_NONE){\n\t\tHttpConnection connection=request.getHttpConnection();\n\t\tHttpListener listener=connection.getListener();\n\t\tswitch (dataConstraint){\n\t\tcase SecurityConstraint.DC_INTEGRAL:\n\t\t\tif(listener.isIntegral(connection))\n\t\t\t\tbreak;\n\t\t\tif(listener.getIntegralPort() > 0){\n\t\t\t\tString url=listener.getIntegralScheme() + \"://\" + request.getHost()+ \":\"+ listener.getIntegralPort()+ request.getPath();\n\t\t\t\tif(request.getQuery() != null)\n\t\t\t\t\turl+=\"?\" + request.getQuery();\n\t\t\t\tresponse.setContentLength(0);\n\t\t\t\tresponse.sendRedirect(url);\n\t\t\t}else \n\t\t\t\tHttpContext.sendContextError(response,HttpResponse.__403_Forbidden,null);\n\t\t\treturn false;\n\t\tcase SecurityConstraint.DC_CONFIDENTIAL:\n\t\t\tif(listener.isConfidential(connection))\n\t\t\t\tbreak;\n\t\t\tif(listener.getConfidentialPort() > 0){\n\t\t\t\tString url=listener.getConfidentialScheme() + \"://\" + request.getHost()+ \":\"+ listener.getConfidentialPort()+ request.getPath();\n\t\t\t\tif(request.getQuery() != null)\n\t\t\t\t\turl+=\"?\" + request.getQuery();\n\t\t\t\tresponse.setContentLength(0);\n\t\t\t\tresponse.sendRedirect(url);\n\t\t\t}else \n\t\t\t\tHttpContext.sendContextError(response,HttpResponse.__403_Forbidden,null);\n\t\t\treturn false;\n\t\tdefault :\n\t\t\tHttpContext.sendContextError(response,HttpResponse.__403_Forbidden,null);\n\t\t\treturn false;\n\t\t}\n\t}\n\tif(!unauthenticated && roles != null){\n\t\tif(realm == null){\n\t\t\tHttpContext.sendContextError(response,HttpResponse.__500_Internal_Server_Error,\"Configuration error\");\n\t\t\treturn false;\n\t\t}\n\t\tPrincipal user=null;\n\t\tif(request.getAuthType() != null && request.getAuthUser() != null){\n\t\t\tuser=request.getUserPrincipal();\n\t\t\tif(user == null)\n\t\t\t\tuser=realm.authenticate(request.getAuthUser(),null,request);\n\t\t\tif(user == null && authenticator != null)\n\t\t\t\tuser=authenticator.authenticate(realm,pathInContext,request,response);\n\t\t}else if(authenticator != null){\n\t\t\tuser=authenticator.authenticate(realm,pathInContext,request,response);\n\t\t}else {\n\t\t\tlog.warn(\"Mis-configured Authenticator for \" + request.getPath());\n\t\t\tHttpContext.sendContextError(response,HttpResponse.__500_Internal_Server_Error,\"Configuration error\");\n\t\t}\n\t\tif(user == null)\n\t\t\treturn false;\n\t\telse if(user == __NOBODY)\n\t\t\treturn true;\n\t\tif(roles != ANY_ROLE){\n\t\t\tboolean inRole=false;\n\t\t\tfor (int r=LazyList.size(roles); r-- > 0; ){\n\t\t\t\tif(realm.isUserInRole(user,(String)LazyList.get(roles,r))){\n\t\t\t\t\tinRole=true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(!inRole){\n\t\t\t\tlog.warn(\"AUTH FAILURE: role for \" + user.getName());\n\t\t\t\tif(\"BASIC\".equalsIgnoreCase(authenticator.getAuthMethod()))\n\t\t\t\t\t((BasicAuthenticator)authenticator).sendChallenge(realm,response);\n\t\t\t\telse \n\t\t\t\t\tHttpContext.sendContextError(response,HttpResponse.__403_Forbidden,\"User not in required role\");\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}else {\n\t\trequest.setUserPrincipal(HttpRequest.__NOT_CHECKED);\n\t}\n\treturn true;\n}","Original_Lines":112,"Target_Lines":81,"Manual":"public static boolean check(List constraints,Authenticator authenticator,UserRealm realm,String pathInContext,HttpRequest request,HttpResponse response) throws HttpException, IOException {\n\tint dataConstraint=DC_NONE;...\n\tfor (int c=0; c < constraints.size(); c++){\n\t\tSecurityConstraint sc=(SecurityConstraint)constraints.get(c);...\n\t\tif(dataConstraint > DC_UNSET && sc.hasDataConstraint()){\n\t\t\tif(sc.getDataConstraint() > dataConstraint)\n\t\t\t\tdataConstraint=sc.getDataConstraint();\n\t\t}else \n\t\t\tdataConstraint=DC_UNSET;\n\t\tif(!unauthenticated && !forbidden){\n\t\t\tif(sc.getAuthenticate()){\n\t\t\t\tif(sc.isAnyRole()){\n\t\t\t\t\troles=ANY_ROLE;\n\t\t\t\t}else {...\n\t\t\t\t}\n\t\t\t}else \n\t\t\t\tunauthenticated=true;\n\t\t}\n\t}\n\tif(forbidden && (!(authenticator instanceof FormAuthenticator) || !((FormAuthenticator)authenticator).isLoginOrErrorPage(pathInContext))){...\n\t}\n\tif(dataConstraint > DC_NONE){\n\t\tHttpConnection connection=request.getHttpConnection();\n\t\tHttpListener listener=connection.getListener();\n\t\tswitch (dataConstraint){\n\t\tcase SecurityConstraint.DC_INTEGRAL:...\n\t\t\tif(listener.getIntegralPort() > 0){\n\t\t\t\tString url=listener.getIntegralScheme() + \"://\" + request.getHost()+ \":\"+ listener.getIntegralPort()+ request.getPath();...\n\t\t\t\tresponse.setContentLength(0);\n\t\t\t\tresponse.sendRedirect(url);\n\t\t\t}else \n\t\t\t\tHttpContext.sendContextError(response,HttpResponse.__403_Forbidden,null);\n\t\t\treturn false;\n\t\tcase SecurityConstraint.DC_CONFIDENTIAL:...\n\t\t\tif(listener.getConfidentialPort() > 0){\n\t\t\t\tString url=listener.getConfidentialScheme() + \"://\" + request.getHost()+ \":\"+ listener.getConfidentialPort()+ request.getPath();...\n\t\t\t\tresponse.setContentLength(0);\n\t\t\t\tresponse.sendRedirect(url);\n\t\t\t}else \n\t\t\t\tHttpContext.sendContextError(response,HttpResponse.__403_Forbidden,null);\n\t\t\treturn false;\n\t\tdefault :\n\t\t\tHttpContext.sendContextError(response,HttpResponse.__403_Forbidden,null);\n\t\t\treturn false;\n\t\t}\n\t}\n\tif(!unauthenticated && roles != null){\n\t\tif(realm == null){\n\t\t\tHttpContext.sendContextError(response,HttpResponse.__500_Internal_Server_Error,\"Configuration error\");\n\t\t\treturn false;\n\t\t}...\n\t\tif(request.getAuthType() != null && request.getAuthUser() != null){\n\t\t\tuser=request.getUserPrincipal();\n\t\t\tif(user == null)\n\t\t\t\tuser=realm.authenticate(request.getAuthUser(),null,request);\n\t\t\tif(user == null && authenticator != null)\n\t\t\t\tuser=authenticator.authenticate(realm,pathInContext,request,response);\n\t\t}else if(authenticator != null){\n\t\t\tuser=authenticator.authenticate(realm,pathInContext,request,response);\n\t\t}else {...\n\t\t\tHttpContext.sendContextError(response,HttpResponse.__500_Internal_Server_Error,\"Configuration error\");\n\t\t}...\n\t\tif(roles != ANY_ROLE){\n\t\t\tboolean inRole=false;\n\t\t\tfor (int r=LazyList.size(roles); r-- > 0; ){\n\t\t\t\tif(realm.isUserInRole(user,(String)LazyList.get(roles,r))){\n\t\t\t\t\tinRole=true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(!inRole){...\n\t\t\t\tif(\"BASIC\".equalsIgnoreCase(authenticator.getAuthMethod()))\n\t\t\t\t\t((BasicAuthenticator)authenticator).sendChallenge(realm,response);\n\t\t\t\telse \n\t\t\t\t\tHttpContext.sendContextError(response,HttpResponse.__403_Forbidden,\"User not in required role\");\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}else {\n\t\trequest.setUserPrincipal(HttpRequest.__NOT_CHECKED);\n\t}\n\treturn true;\n}","Distance":0.3670886075949367,"Automatic":"public static boolean check(List constraints,Authenticator authenticator,UserRealm realm,String pathInContext,HttpRequest request,HttpResponse response) throws HttpException, IOException {\n\tint dataConstraint=DC_NONE;\n\tObject roles=null;\n\tboolean unauthenticated=false;\n\tboolean forbidden=false;\n\tfor (int c=0; c < constraints.size(); c++){\n\t\tSecurityConstraint sc=(SecurityConstraint)constraints.get(c);\n\t\tif(!sc.forMethod(request.getMethod()))\n\t\t\tcontinue;\n\t\tif(dataConstraint > DC_UNSET && sc.hasDataConstraint()){\n\t\t\tif(sc.getDataConstraint() > dataConstraint)\n\t\t\t\tdataConstraint=sc.getDataConstraint();\n\t\t}else \n\t\t\tdataConstraint=DC_UNSET;...\n\t}...\n\tif(dataConstraint > DC_NONE){\n\t\tHttpConnection connection=request.getHttpConnection();\n\t\tHttpListener listener=connection.getListener();\n\t\tswitch (dataConstraint){\n\t\tcase SecurityConstraint.DC_INTEGRAL:\n\t\t\tif(listener.isIntegral(connection))\n\t\t\t\tbreak;\n\t\t\tif(listener.getIntegralPort() > 0){\n\t\t\t\tString url=listener.getIntegralScheme() + \"://\" + request.getHost()+ \":\"+ listener.getIntegralPort()+ request.getPath();\n\t\t\t\tif(request.getQuery() != null)\n\t\t\t\t\turl+=\"?\" + request.getQuery();\n\t\t\t\tresponse.setContentLength(0);\n\t\t\t\tresponse.sendRedirect(url);\n\t\t\t}else \n\t\t\t\tHttpContext.sendContextError(response,HttpResponse.__403_Forbidden,null);\n\t\t\treturn false;\n\t\tcase SecurityConstraint.DC_CONFIDENTIAL:\n\t\t\tif(listener.isConfidential(connection))\n\t\t\t\tbreak;\n\t\t\tif(listener.getConfidentialPort() > 0){\n\t\t\t\tString url=listener.getConfidentialScheme() + \"://\" + request.getHost()+ \":\"+ listener.getConfidentialPort()+ request.getPath();\n\t\t\t\tif(request.getQuery() != null)\n\t\t\t\t\turl+=\"?\" + request.getQuery();\n\t\t\t\tresponse.setContentLength(0);\n\t\t\t\tresponse.sendRedirect(url);\n\t\t\t}else \n\t\t\t\tHttpContext.sendContextError(response,HttpResponse.__403_Forbidden,null);...\n\t\tdefault :\n\t\t\tHttpContext.sendContextError(response,HttpResponse.__403_Forbidden,null);\n\t\t\treturn false;\n\t\t}\n\t}\n\tif(!unauthenticated && roles != null){\n\t\tif(realm == null){\n\t\t\tHttpContext.sendContextError(response,HttpResponse.__500_Internal_Server_Error,\"Configuration error\");\n\t\t\treturn false;\n\t\t}\n\t\tPrincipal user=null;\n\t\tif(request.getAuthType() != null && request.getAuthUser() != null){\n\t\t\tuser=request.getUserPrincipal();\n\t\t\tif(user == null)\n\t\t\t\tuser=realm.authenticate(request.getAuthUser(),null,request);\n\t\t\tif(user == null && authenticator != null)\n\t\t\t\tuser=authenticator.authenticate(realm,pathInContext,request,response);\n\t\t}else if(authenticator != null){\n\t\t\tuser=authenticator.authenticate(realm,pathInContext,request,response);\n\t\t}else {\n\t\t\tlog.warn(\"Mis-configured Authenticator for \" + request.getPath());\n\t\t\tHttpContext.sendContextError(response,HttpResponse.__500_Internal_Server_Error,\"Configuration error\");\n\t\t}\n\t\tif(user == null)\n\t\t\treturn false;\n\t\telse if(user == __NOBODY)\n\t\t\treturn true;\n\t\tif(roles != ANY_ROLE){\n\t\t\tboolean inRole=false;...\n\t\t\tif(!inRole){...\n\t\t\t\tif(\"BASIC\".equalsIgnoreCase(authenticator.getAuthMethod()))\n\t\t\t\t\t((BasicAuthenticator)authenticator).sendChallenge(realm,response);\n\t\t\t\telse \n\t\t\t\t\tHttpContext.sendContextError(response,HttpResponse.__403_Forbidden,\"User not in required role\");\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}else {\n\t\trequest.setUserPrincipal(HttpRequest.__NOT_CHECKED);\n\t}...\n}"},{"Origin":"public void loadFromGridYml(String resource){\n\tInputStream in=Thread.currentThread().getContextClassLoader().getResourceAsStream(resource);\n\tif(in == null){\n\t\ttry {\n\t\t\tin=new FileInputStream(resource);\n\t\t} catch (FileNotFoundException e){\n\t\t} \n\t}\n\tif(in == null){\n\t\tthrow new InvalidParameterException(resource + \" is not a valid resource.\");\n\t}\n\tYaml yaml=new Yaml();\n\tMap<String,Object> config=(Map<String,Object>)yaml.load(in);\n\tMap<String,Object> hub=(Map<String,Object>)config.get(\"hub\");\n\tList<Map<String,String>> environments=(List<Map<String,String>>)hub.get(\"environments\");\n\tInteger p=(Integer)hub.get(\"port\");\n\tif(p != null){\n\t\tthis.port=p;\n\t}\n\tfor (Map<String,String> environment : environments){\n\t\tgetGrid1Mapping().put(environment.get(\"name\"),environment.get(\"browser\"));\n\t}\n\tInteger poll=(Integer)hub.get(\"remoteControlPollingIntervalInSeconds\");\n\tif(poll != null){\n\t\tallParams.put(RegistrationRequest.NODE_POLLING,poll.intValue() * 1000);\n\t\tcleanupCycle=poll.intValue() * 1000;\n\t}\n\tInteger timeout=(Integer)hub.get(\"sessionMaxIdleTimeInSeconds\");\n\tif(timeout != null){\n\t\ttimeout=timeout.intValue() * 1000;\n\t}\n\tInteger port=(Integer)hub.get(RegistrationRequest.PORT);\n\tif(port != null){\n\t\tport=port.intValue();\n\t}\n\tInteger newSessionWait=(Integer)hub.get(\"newSessionMaxWaitTimeInSeconds\");\n\tif(newSessionWait != null){\n\t\tnewSessionWaitTimeout=newSessionWait.intValue() * 1000;\n\t}\n\tallParams.put(RegistrationRequest.MAX_SESSION,1);\n}","Original_Lines":39,"Target_Lines":27,"Manual":"public void loadFromGridYml(String resource){\n\tInputStream in=Thread.currentThread().getContextClassLoader().getResourceAsStream(resource);...\n\tYaml yaml=new Yaml();\n\tMap<String,Object> config=(Map<String,Object>)yaml.load(in);\n\tMap<String,Object> hub=(Map<String,Object>)config.get(\"hub\");\n\tList<Map<String,String>> environments=(List<Map<String,String>>)hub.get(\"environments\");\n\tInteger p=(Integer)hub.get(\"port\");...\n\tfor (Map<String,String> environment : environments){\n\t\tgetGrid1Mapping().put(environment.get(\"name\"),environment.get(\"browser\"));\n\t}\n\tInteger poll=(Integer)hub.get(\"remoteControlPollingIntervalInSeconds\");\n\tif(poll != null){\n\t\tallParams.put(RegistrationRequest.NODE_POLLING,poll.intValue() * 1000);\n\t\tcleanupCycle=poll.intValue() * 1000;\n\t}\n\tInteger timeout=(Integer)hub.get(\"sessionMaxIdleTimeInSeconds\");\n\tif(timeout != null){\n\t\ttimeout=timeout.intValue() * 1000;\n\t}\n\tInteger port=(Integer)hub.get(RegistrationRequest.PORT);\n\tif(port != null){\n\t\tport=port.intValue();\n\t}\n\tInteger newSessionWait=(Integer)hub.get(\"newSessionMaxWaitTimeInSeconds\");\n\tif(newSessionWait != null){\n\t\tnewSessionWaitTimeout=newSessionWait.intValue() * 1000;\n\t}\n\tallParams.put(RegistrationRequest.MAX_SESSION,1);\n}","Distance":0,"Automatic":"public void loadFromGridYml(String resource){\n\tInputStream in=Thread.currentThread().getContextClassLoader().getResourceAsStream(resource);...\n\tYaml yaml=new Yaml();\n\tMap<String,Object> config=(Map<String,Object>)yaml.load(in);\n\tMap<String,Object> hub=(Map<String,Object>)config.get(\"hub\");\n\tList<Map<String,String>> environments=(List<Map<String,String>>)hub.get(\"environments\");\n\tInteger p=(Integer)hub.get(\"port\");...\n\tfor (Map<String,String> environment : environments){\n\t\tgetGrid1Mapping().put(environment.get(\"name\"),environment.get(\"browser\"));\n\t}\n\tInteger poll=(Integer)hub.get(\"remoteControlPollingIntervalInSeconds\");\n\tif(poll != null){\n\t\tallParams.put(RegistrationRequest.NODE_POLLING,poll.intValue() * 1000);\n\t\tcleanupCycle=poll.intValue() * 1000;\n\t}\n\tInteger timeout=(Integer)hub.get(\"sessionMaxIdleTimeInSeconds\");\n\tif(timeout != null){\n\t\ttimeout=timeout.intValue() * 1000;\n\t}\n\tInteger port=(Integer)hub.get(RegistrationRequest.PORT);\n\tif(port != null){\n\t\tport=port.intValue();\n\t}\n\tInteger newSessionWait=(Integer)hub.get(\"newSessionMaxWaitTimeInSeconds\");\n\tif(newSessionWait != null){\n\t\tnewSessionWaitTimeout=newSessionWait.intValue() * 1000;\n\t}\n\tallParams.put(RegistrationRequest.MAX_SESSION,1);\n}"},{"Origin":"public String getListHTML(String base,boolean parent) throws IOException {\n\tif(!isDirectory())\n\t\treturn null;\n\tString[] ls=list();\n\tif(ls == null)\n\t\treturn null;\n\tArrays.sort(ls);\n\tString title=\"Directory: \" + URI.decodePath(base);\n\ttitle=StringUtil.replace(StringUtil.replace(title,\"<\",\"&lt;\"),\">\",\"&gt;\");\n\tStringBuffer buf=new StringBuffer(4096);\n\tbuf.append(\"<HTML><HEAD><TITLE>\");\n\tbuf.append(title);\n\tbuf.append(\"<\/TITLE><\/HEAD><BODY>\\n<H1>\");\n\tbuf.append(title);\n\tbuf.append(\"<\/H1><TABLE BORDER=0>\");\n\tif(parent){\n\t\tbuf.append(\"<TR><TD><A HREF=\");\n\t\tbuf.append(URI.encodePath(URI.addPaths(base,\"../\")));\n\t\tbuf.append(\">Parent Directory<\/A><\/TD><TD><\/TD><TD><\/TD><\/TR>\\n\");\n\t}\n\tDateFormat dfmt=DateFormat.getDateTimeInstance(DateFormat.MEDIUM,DateFormat.MEDIUM);\n\tfor (int i=0; i < ls.length; i++){\n\t\tString encoded=URI.encodePath(ls[i]);\n\t\tResource item=addPath(encoded);\n\t\tbuf.append(\"<TR><TD><A HREF=\\\"\");\n\t\tString path=URI.addPaths(base,encoded);\n\t\tif(item.isDirectory() && !path.endsWith(\"/\"))\n\t\t\tpath=URI.addPaths(path,\"/\");\n\t\tbuf.append(path);\n\t\tbuf.append(\"\\\">\");\n\t\tbuf.append(StringUtil.replace(StringUtil.replace(ls[i],\"<\",\"&lt;\"),\">\",\"&gt;\"));\n\t\tbuf.append(\"&nbsp;\");\n\t\tbuf.append(\"<\/TD><TD ALIGN=right>\");\n\t\tbuf.append(item.length());\n\t\tbuf.append(\" bytes&nbsp;<\/TD><TD>\");\n\t\tbuf.append(dfmt.format(new Date(item.lastModified())));\n\t\tbuf.append(\"<\/TD><\/TR>\\n\");\n\t}\n\tbuf.append(\"<\/TABLE>\\n\");\n\tbuf.append(\"<\/BODY><\/HTML>\\n\");\n\treturn buf.toString();\n}","Original_Lines":40,"Target_Lines":21,"Manual":"public String getListHTML(String base,boolean parent) throws IOException {...\n\tString[] ls=list();...\n\tArrays.sort(ls);\n\tString title=\"Directory: \" + URI.decodePath(base);\n\ttitle=StringUtil.replace(StringUtil.replace(title,\"<\",\"&lt;\"),\">\",\"&gt;\");\n\tStringBuffer buf=new StringBuffer(4096);...\n\tif(parent){...\n\t\tbuf.append(URI.encodePath(URI.addPaths(base,\"../\")));...\n\t}\n\tDateFormat dfmt=DateFormat.getDateTimeInstance(DateFormat.MEDIUM,DateFormat.MEDIUM);\n\tfor (int i=0; i < ls.length; i++){\n\t\tString encoded=URI.encodePath(ls[i]);\n\t\tResource item=addPath(encoded);...\n\t\tString path=URI.addPaths(base,encoded);\n\t\tif(item.isDirectory() && !path.endsWith(\"/\"))\n\t\t\tpath=URI.addPaths(path,\"/\");\n\t\tbuf.append(path);...\n\t\tbuf.append(StringUtil.replace(StringUtil.replace(ls[i],\"<\",\"&lt;\"),\">\",\"&gt;\"));...\n\t\tbuf.append(item.length());...\n\t\tbuf.append(dfmt.format(new Date(item.lastModified())));...\n\t}...\n\treturn buf.toString();\n}","Distance":0.34782608695652173,"Automatic":"public String getListHTML(String base,boolean parent) throws IOException {\n\tif(!isDirectory())\n\t\treturn null;\n\tString[] ls=list();\n\tif(ls == null)\n\t\treturn null;\n\tArrays.sort(ls);\n\tString title=\"Directory: \" + URI.decodePath(base);\n\ttitle=StringUtil.replace(StringUtil.replace(title,\"<\",\"&lt;\"),\">\",\"&gt;\");\n\tStringBuffer buf=new StringBuffer(4096);...\n\tif(parent){...\n\t\tbuf.append(URI.encodePath(URI.addPaths(base,\"../\")));...\n\t}\n\tDateFormat dfmt=DateFormat.getDateTimeInstance(DateFormat.MEDIUM,DateFormat.MEDIUM);\n\tfor (int i=0; i < ls.length; i++){\n\t\tString encoded=URI.encodePath(ls[i]);\n\t\tResource item=addPath(encoded);...\n\t\tString path=URI.addPaths(base,encoded);\n\t\tif(item.isDirectory() && !path.endsWith(\"/\"))\n\t\t\tpath=URI.addPaths(path,\"/\");...\n\t\tbuf.append(dfmt.format(new Date(item.lastModified())));...\n\t}...\n}"},{"Origin":"protected void scandir(File dir,String vpath,boolean fast){\n\tif(dir == null){\n\t\tthrow new BuildException(\"dir must not be null.\");\n\t}else if(!dir.exists()){\n\t\tthrow new BuildException(dir + \" doesn't exists.\");\n\t}else if(!dir.isDirectory()){\n\t\tthrow new BuildException(dir + \" is not a directory.\");\n\t}\n\tif(fast && hasBeenScanned(vpath)){\n\t\treturn;\n\t}\n\tsetState(\"Scan directory: %s\",vpath);\n\tString[] newfiles=dir.list();\n\tif(newfiles == null){\n\t\tthrow new BuildException(\"IO error scanning directory \" + dir.getAbsolutePath());\n\t}\n\tif(!followSymlinks){\n\t\tList<String> noLinks=new ArrayList<String>();\n\t\tfor (int i=0; i < newfiles.length; i++){\n\t\t\ttry {\n\t\t\t\tif(FILE_UTILS.isSymbolicLink(dir,newfiles[i])){\n\t\t\t\t\tString name=vpath + newfiles[i];\n\t\t\t\t\tFile file=new File(dir,newfiles[i]);\n\t\t\t\t\t(file.isDirectory() ? dirsExcluded : filesExcluded).add(name);\n\t\t\t\t}else {\n\t\t\t\t\tnoLinks.add(newfiles[i]);\n\t\t\t\t}\n\t\t\t} catch (IOException ioe){\n\t\t\t\tString msg=\"IOException caught while checking \" + \"for links, couldn't get canonical path!\";\n\t\t\t\tSystem.err.println(msg);\n\t\t\t\tnoLinks.add(newfiles[i]);\n\t\t\t} \n\t\t}\n\t\tnewfiles=noLinks.toArray(new String[noLinks.size()]);\n\t}\n\tfor (int i=0; i < newfiles.length; i++){\n\t\tString name=vpath + newfiles[i];\n\t\tFile file=new File(dir,newfiles[i]);\n\t\tif(file.isDirectory()){\n\t\t\tif(isIncluded(name)){\n\t\t\t\taccountForIncludedDir(name,file,fast);\n\t\t\t}else {\n\t\t\t\teverythingIncluded=false;\n\t\t\t\tdirsNotIncluded.add(name);\n\t\t\t\tif(fast && couldHoldIncluded(name) && !contentsExcluded(name)){\n\t\t\t\t\tscandir(file,name + File.separator,fast);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(!fast){\n\t\t\t\tscandir(file,name + File.separator,fast);\n\t\t\t}\n\t\t}else if(file.isFile()){\n\t\t\tif(isIncluded(name)){\n\t\t\t\taccountForIncludedFile(name,file,dir);\n\t\t\t}else {\n\t\t\t\teverythingIncluded=false;\n\t\t\t\tfilesNotIncluded.add(name);\n\t\t\t}\n\t\t}\n\t}\n}","Original_Lines":59,"Target_Lines":37,"Manual":"protected void scandir(File dir,String vpath,boolean fast){...\n\tsetState(\"Scan directory: %s\",vpath);\n\tString[] newfiles=dir.list();...\n\tif(!followSymlinks){\n\t\tList<String> noLinks=new ArrayList<String>();\n\t\tfor (int i=0; i < newfiles.length; i++){\n\t\t\ttry {\n\t\t\t\tif(FILE_UTILS.isSymbolicLink(dir,newfiles[i])){...\n\t\t\t\t\t(file.isDirectory() ? dirsExcluded : filesExcluded).add(name);\n\t\t\t\t}else {\n\t\t\t\t\tnoLinks.add(newfiles[i]);\n\t\t\t\t}\n\t\t\t} catch (IOException ioe){...\n\t\t\t} \n\t\t}\n\t\tnewfiles=noLinks.toArray(new String[noLinks.size()]);\n\t}\n\tfor (int i=0; i < newfiles.length; i++){\n\t\tString name=vpath + newfiles[i];\n\t\tFile file=new File(dir,newfiles[i]);\n\t\tif(file.isDirectory()){\n\t\t\tif(isIncluded(name)){\n\t\t\t\taccountForIncludedDir(name,file,fast);\n\t\t\t}else {...\n\t\t\t\tif(fast && couldHoldIncluded(name) && !contentsExcluded(name)){\n\t\t\t\t\tscandir(file,name + File.separator,fast);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(!fast){\n\t\t\t\tscandir(file,name + File.separator,fast);\n\t\t\t}\n\t\t}else if(file.isFile()){\n\t\t\tif(isIncluded(name)){\n\t\t\t\taccountForIncludedFile(name,file,dir);\n\t\t\t}else {...\n\t\t\t}\n\t\t}\n\t}\n}","Distance":0.25925925925925924,"Automatic":"protected void scandir(File dir,String vpath,boolean fast){...\n\tString[] newfiles=dir.list();...\n\tif(!followSymlinks){\n\t\tList<String> noLinks=new ArrayList<String>();\n\t\tfor (int i=0; i < newfiles.length; i++){\n\t\t\ttry {\n\t\t\t\tif(FILE_UTILS.isSymbolicLink(dir,newfiles[i])){\n\t\t\t\t\tString name=vpath + newfiles[i];\n\t\t\t\t\tFile file=new File(dir,newfiles[i]);\n\t\t\t\t\t(file.isDirectory() ? dirsExcluded : filesExcluded).add(name);\n\t\t\t\t}else {...\n\t\t\t\t}\n\t\t\t} catch (IOException ioe){...\n\t\t\t} \n\t\t}...\n\t}\n\tfor (int i=0; i < newfiles.length; i++){\n\t\tString name=vpath + newfiles[i];\n\t\tFile file=new File(dir,newfiles[i]);\n\t\tif(file.isDirectory()){\n\t\t\tif(isIncluded(name)){\n\t\t\t\taccountForIncludedDir(name,file,fast);\n\t\t\t}else {...\n\t\t\t\tdirsNotIncluded.add(name);\n\t\t\t\tif(fast && couldHoldIncluded(name) && !contentsExcluded(name)){\n\t\t\t\t\tscandir(file,name + File.separator,fast);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(!fast){\n\t\t\t\tscandir(file,name + File.separator,fast);\n\t\t\t}\n\t\t}else if(file.isFile()){\n\t\t\tif(isIncluded(name)){\n\t\t\t\taccountForIncludedFile(name,file,dir);\n\t\t\t}else {...\n\t\t\t\tfilesNotIncluded.add(name);\n\t\t\t}\n\t\t}\n\t}\n}"},{"Origin":"public DiffScope processDiffUnit(DiffUnit diffUnit,DiffPointProcessor processor){\n\tString scopedPath=diffUnit.getScopedPath();\n\tfor (Iterator<Pattern> it=excludes.iterator(); it.hasNext(); ){\n\t\tPattern pattern=it.next();\n\t\tif(pattern.matcher(scopedPath).matches()){\n\t\t\tlog.debug(\"Skipping unit due to exclude: \" + scopedPath);\n\t\t\treturn null;\n\t\t}\n\t}\n\tlog.debug(\"Processing unit \" + scopedPath);\n\tboolean leftExists=diffUnit.leftExists();\n\tboolean rightExists=diffUnit.rightExists();\n\tboolean leftIsDir=diffUnit.leftIsDir();\n\tboolean rightIsDir=diffUnit.rightIsDir();\n\tif(leftExists && !rightExists){\n\t\tDiffPoint diffPoint=new DiffPoint(diffUnit,\"Exists in left only\");\n\t\tprocessor.processDiffPoint(diffPoint);\n\t}else if(rightExists && !leftExists){\n\t\tDiffPoint diffPoint=new DiffPoint(diffUnit,\"Exists in right only\");\n\t\tprocessor.processDiffPoint(diffPoint);\n\t}else if(leftIsDir != rightIsDir){\n\t\tDiffPoint diffPoint=new DiffPoint(diffUnit,\"Dir/File mismatch\");\n\t\tprocessor.processDiffPoint(diffPoint);\n\t}else if(!leftIsDir && !rightIsDir){\n\t\tboolean foundHandler=false;\n\t\tfor (Iterator<Map.Entry<String,DiffUnitProcessor>> it=fileHandlers.entrySet().iterator(); it.hasNext(); ){\n\t\t\tMap.Entry<String,DiffUnitProcessor> entry=it.next();\n\t\t\tString regex=entry.getKey();\n\t\t\tif(scopedPath.matches(regex)){\n\t\t\t\tDiffUnitProcessor fileHandler=entry.getValue();\n\t\t\t\tDiffScope childScope=fileHandler.processDiffUnit(diffUnit,processor);\n\t\t\t\tif(childScope != null){\n\t\t\t\t\tchildScope.scan(this,processor);\n\t\t\t\t}\n\t\t\t\tfoundHandler=true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(!foundHandler){\n\t\t\tlog.error(\"No applicable handler found for path: \" + scopedPath);\n\t\t}\n\t}\n\treturn null;\n}","Original_Lines":42,"Target_Lines":31,"Manual":"public DiffScope processDiffUnit(DiffUnit diffUnit,DiffPointProcessor processor){\n\tString scopedPath=diffUnit.getScopedPath();\n\tfor (Iterator<Pattern> it=excludes.iterator(); it.hasNext(); ){\n\t\tPattern pattern=it.next();\n\t\tif(pattern.matcher(scopedPath).matches()){...\n\t\t\treturn null;\n\t\t}\n\t}...\n\tif(leftExists && !rightExists){\n\t\tDiffPoint diffPoint=new DiffPoint(diffUnit,\"Exists in left only\");\n\t\tprocessor.processDiffPoint(diffPoint);\n\t}else if(rightExists && !leftExists){\n\t\tDiffPoint diffPoint=new DiffPoint(diffUnit,\"Exists in right only\");\n\t\tprocessor.processDiffPoint(diffPoint);\n\t}else if(leftIsDir != rightIsDir){\n\t\tDiffPoint diffPoint=new DiffPoint(diffUnit,\"Dir/File mismatch\");\n\t\tprocessor.processDiffPoint(diffPoint);\n\t}else if(!leftIsDir && !rightIsDir){\n\t\tboolean foundHandler=false;\n\t\tfor (Iterator<Map.Entry<String,DiffUnitProcessor>> it=fileHandlers.entrySet().iterator(); it.hasNext(); ){\n\t\t\tMap.Entry<String,DiffUnitProcessor> entry=it.next();\n\t\t\tString regex=entry.getKey();\n\t\t\tif(scopedPath.matches(regex)){\n\t\t\t\tDiffUnitProcessor fileHandler=entry.getValue();\n\t\t\t\tDiffScope childScope=fileHandler.processDiffUnit(diffUnit,processor);\n\t\t\t\tif(childScope != null){\n\t\t\t\t\tchildScope.scan(this,processor);\n\t\t\t\t}...\n\t\t\t}\n\t\t}...\n\t}\n\treturn null;\n}","Distance":0.3225806451612903,"Automatic":"public DiffScope processDiffUnit(DiffUnit diffUnit,DiffPointProcessor processor){\n\tString scopedPath=diffUnit.getScopedPath();...\n\tboolean leftExists=diffUnit.leftExists();\n\tboolean rightExists=diffUnit.rightExists();\n\tboolean leftIsDir=diffUnit.leftIsDir();\n\tboolean rightIsDir=diffUnit.rightIsDir();\n\tif(leftExists && !rightExists){\n\t\tDiffPoint diffPoint=new DiffPoint(diffUnit,\"Exists in left only\");\n\t\tprocessor.processDiffPoint(diffPoint);\n\t}else if(rightExists && !leftExists){\n\t\tDiffPoint diffPoint=new DiffPoint(diffUnit,\"Exists in right only\");\n\t\tprocessor.processDiffPoint(diffPoint);\n\t}else if(leftIsDir != rightIsDir){\n\t\tDiffPoint diffPoint=new DiffPoint(diffUnit,\"Dir/File mismatch\");\n\t\tprocessor.processDiffPoint(diffPoint);\n\t}else if(!leftIsDir && !rightIsDir){\n\t\tboolean foundHandler=false;\n\t\tfor (Iterator<Map.Entry<String,DiffUnitProcessor>> it=fileHandlers.entrySet().iterator(); it.hasNext(); ){\n\t\t\tMap.Entry<String,DiffUnitProcessor> entry=it.next();\n\t\t\tString regex=entry.getKey();\n\t\t\tif(scopedPath.matches(regex)){\n\t\t\t\tDiffUnitProcessor fileHandler=entry.getValue();\n\t\t\t\tDiffScope childScope=fileHandler.processDiffUnit(diffUnit,processor);\n\t\t\t\tif(childScope != null){\n\t\t\t\t\tchildScope.scan(this,processor);\n\t\t\t\t}\n\t\t\t\tfoundHandler=true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}...\n\t}\n\treturn null;\n}"},{"Origin":"protected void slowScan(){\n\tsynchronized (slowScanLock){\n\t\tif(haveSlowResults){\n\t\t\treturn;\n\t\t}\n\t\tif(slowScanning){\n\t\t\twhile(slowScanning){\n\t\t\t\ttry {\n\t\t\t\t\tslowScanLock.wait();\n\t\t\t\t} catch (InterruptedException e){\n\t\t\t\t} \n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tslowScanning=true;\n\t}\n\ttry {\n\t\tsynchronized (this){\n\t\t\tfor (String excluded : dirsExcluded){\n\t\t\t\tif(!couldHoldIncluded(excluded)){\n\t\t\t\t\tscandir(new File(basedir,excluded),excluded + File.separator,false);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (String notIncluded : dirsNotIncluded){\n\t\t\t\tif(!couldHoldIncluded(notIncluded)){\n\t\t\t\t\tscandir(new File(basedir,notIncluded),notIncluded + File.separator,false);\n\t\t\t\t}\n\t\t\t}\n\t\t\tclearCaches();\n\t\t}\n\t} finally {\n\t\tsynchronized (slowScanLock){\n\t\t\thaveSlowResults=true;\n\t\t\tslowScanning=false;\n\t\t\tslowScanLock.notifyAll();\n\t\t}\n\t} \n}","Original_Lines":36,"Target_Lines":28,"Manual":"protected void slowScan(){\n\tsynchronized (slowScanLock){...\n\t\tif(slowScanning){\n\t\t\twhile(slowScanning){\n\t\t\t\ttry {\n\t\t\t\t\tslowScanLock.wait();\n\t\t\t\t} catch (InterruptedException e){\n\t\t\t\t} \n\t\t\t}...\n\t\t}...\n\t}\n\ttry {\n\t\tsynchronized (this){\n\t\t\tfor (String excluded : dirsExcluded){\n\t\t\t\tif(!couldHoldIncluded(excluded)){\n\t\t\t\t\tscandir(new File(basedir,excluded),excluded + File.separator,false);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (String notIncluded : dirsNotIncluded){\n\t\t\t\tif(!couldHoldIncluded(notIncluded)){\n\t\t\t\t\tscandir(new File(basedir,notIncluded),notIncluded + File.separator,false);\n\t\t\t\t}\n\t\t\t}...\n\t\t}\n\t} finally {\n\t\tsynchronized (slowScanLock){...\n\t\t\tslowScanLock.notifyAll();\n\t\t}\n\t} \n}","Distance":0.11764705882352941,"Automatic":"protected void slowScan(){\n\tsynchronized (slowScanLock){...\n\t\tif(slowScanning){\n\t\t\twhile(slowScanning){\n\t\t\t\ttry {\n\t\t\t\t\tslowScanLock.wait();\n\t\t\t\t} catch (InterruptedException e){\n\t\t\t\t} \n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tslowScanning=true;\n\t}\n\ttry {\n\t\tsynchronized (this){\n\t\t\tfor (String excluded : dirsExcluded){\n\t\t\t\tif(!couldHoldIncluded(excluded)){\n\t\t\t\t\tscandir(new File(basedir,excluded),excluded + File.separator,false);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (String notIncluded : dirsNotIncluded){\n\t\t\t\tif(!couldHoldIncluded(notIncluded)){\n\t\t\t\t\tscandir(new File(basedir,notIncluded),notIncluded + File.separator,false);\n\t\t\t\t}\n\t\t\t}...\n\t\t}\n\t} finally {\n\t\tsynchronized (slowScanLock){...\n\t\t\tslowScanLock.notifyAll();\n\t\t}\n\t} \n}"},{"Origin":"public void scan() throws IllegalStateException {\n\tsynchronized (scanLock){\n\t\tif(scanning){\n\t\t\twhile(scanning){\n\t\t\t\ttry {\n\t\t\t\t\tscanLock.wait();\n\t\t\t\t} catch (InterruptedException e){\n\t\t\t\t\tcontinue;\n\t\t\t\t} \n\t\t\t}\n\t\t\tif(illegal != null){\n\t\t\t\tthrow illegal;\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tscanning=true;\n\t}\n\ttry {\n\t\tsynchronized (this){\n\t\t\tillegal=null;\n\t\t\tclearResults();\n\t\t\tif(basedir == null){\n\t\t\t\tillegal=new IllegalStateException(\"No basedir set\");\n\t\t\t}else {\n\t\t\t\tif(!basedir.exists()){\n\t\t\t\t\tillegal=new IllegalStateException(\"basedir \" + basedir + \" does not exist\");\n\t\t\t\t}\n\t\t\t\tif(!basedir.isDirectory()){\n\t\t\t\t\tillegal=new IllegalStateException(\"basedir \" + basedir + \" is not a directory\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(illegal != null){\n\t\t\t\tthrow illegal;\n\t\t\t}\n\t\t\tif(isIncluded(\"\")){\n\t\t\t\tif(!isExcluded(\"\")){\n\t\t\t\t\tif(isSelected(\"\",basedir)){\n\t\t\t\t\t\tdirsIncluded.add(\"\");\n\t\t\t\t\t}else {\n\t\t\t\t\t\tdirsDeselected.add(\"\");\n\t\t\t\t\t}\n\t\t\t\t}else {\n\t\t\t\t\tdirsExcluded.add(\"\");\n\t\t\t\t}\n\t\t\t}else {\n\t\t\t\tdirsNotIncluded.add(\"\");\n\t\t\t}\n\t\t\tcheckIncludePatterns();\n\t\t\tclearCaches();\n\t\t}\n\t} finally {\n\t\tsynchronized (scanLock){\n\t\t\tscanning=false;\n\t\t\tscanLock.notifyAll();\n\t\t}\n\t} \n}","Original_Lines":55,"Target_Lines":31,"Manual":"public void scan() throws IllegalStateException {\n\tsynchronized (scanLock){\n\t\tif(scanning){\n\t\t\twhile(scanning){\n\t\t\t\ttry {...\n\t\t\t\t} catch (InterruptedException e){...\n\t\t\t\t} \n\t\t\t}...\n\t\t\treturn;\n\t\t}...\n\t}\n\ttry {\n\t\tsynchronized (this){...\n\t\t\tif(isIncluded(\"\")){\n\t\t\t\tif(!isExcluded(\"\")){\n\t\t\t\t\tif(isSelected(\"\",basedir)){\n\t\t\t\t\t\tdirsIncluded.add(\"\");\n\t\t\t\t\t}else {\n\t\t\t\t\t\tdirsDeselected.add(\"\");\n\t\t\t\t\t}\n\t\t\t\t}else {\n\t\t\t\t\tdirsExcluded.add(\"\");\n\t\t\t\t}\n\t\t\t}else {\n\t\t\t\tdirsNotIncluded.add(\"\");\n\t\t\t}...\n\t\t}\n\t} finally {\n\t\tsynchronized (scanLock){...\n\t\t\tscanLock.notifyAll();\n\t\t}\n\t} \n}","Distance":0.1111111111111111,"Automatic":"public void scan() throws IllegalStateException {\n\tsynchronized (scanLock){\n\t\tif(scanning){\n\t\t\twhile(scanning){\n\t\t\t\ttry {\n\t\t\t\t\tscanLock.wait();\n\t\t\t\t} catch (InterruptedException e){\n\t\t\t\t\tcontinue;\n\t\t\t\t} \n\t\t\t}...\n\t\t\treturn;\n\t\t}...\n\t}\n\ttry {\n\t\tsynchronized (this){...\n\t\t\tif(isIncluded(\"\")){\n\t\t\t\tif(!isExcluded(\"\")){\n\t\t\t\t\tif(isSelected(\"\",basedir)){\n\t\t\t\t\t\tdirsIncluded.add(\"\");\n\t\t\t\t\t}else {\n\t\t\t\t\t\tdirsDeselected.add(\"\");\n\t\t\t\t\t}\n\t\t\t\t}else {\n\t\t\t\t\tdirsExcluded.add(\"\");\n\t\t\t\t}\n\t\t\t}else {\n\t\t\t\tdirsNotIncluded.add(\"\");\n\t\t\t}...\n\t\t}\n\t} finally {\n\t\tsynchronized (scanLock){...\n\t\t\tscanLock.notifyAll();\n\t\t}\n\t} \n}"},{"Origin":"public void run(){\n\tURL link;\n\tint original;\n\tint index;\n\tString href;\n\tURL[][] urls;\n\twhile(true){\n\t\ttry {\n\t\t\tlink=null;\n\t\t\toriginal=-1;\n\t\t\tsynchronized (mUrls){\n\t\t\t\tif(0 != mUrls.size()){\n\t\t\t\t\toriginal=mUrls.size();\n\t\t\t\t\tindex=(int)(Math.random() * original);\n\t\t\t\t\tlink=mUrls.remove(index);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(null != link){\n\t\t\t\tupdateQueueSize(original,mUrls.size());\n\t\t\t\thref=link.toString();\n\t\t\t\tsetCurrentURL(href);\n\t\t\t\tmVisited.put(href,link);\n\t\t\t\tupdateVisitedSize(mVisited.size() - 1,mVisited.size());\n\t\t\t\turls=getImageLinks(link);\n\t\t\t\tfetch(urls[0]);\n\t\t\t\tappend(filter(urls[1]));\n\t\t\t}else \n\t\t\t\tThread.sleep(100);\n\t\t\tif(!mActive)\n\t\t\t\tsynchronized (mUrls){\n\t\t\t\t\tmUrls.wait();\n\t\t\t\t}\n\t\t} catch (Throwable t){\n\t\t\tt.printStackTrace();\n\t\t} \n\t}\n}","Original_Lines":35,"Target_Lines":19,"Manual":"public void run(){...\n\twhile(true){\n\t\ttry {...\n\t\t\tsynchronized (mUrls){\n\t\t\t\tif(0 != mUrls.size()){\n\t\t\t\t\toriginal=mUrls.size();\n\t\t\t\t\tindex=(int)(Math.random() * original);\n\t\t\t\t\tlink=mUrls.remove(index);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(null != link){\n\t\t\t\tupdateQueueSize(original,mUrls.size());...\n\t\t\t\tupdateVisitedSize(mVisited.size() - 1,mVisited.size());\n\t\t\t\turls=getImageLinks(link);\n\t\t\t\tfetch(urls[0]);\n\t\t\t\tappend(filter(urls[1]));\n\t\t\t}else ......\n\t\t} catch (Throwable t){...\n\t\t} \n\t}\n}","Distance":0.6818181818181818,"Automatic":"public void run(){\n\tURL link;\n\tint original;\n\tint index;\n\tString href;\n\tURL[][] urls;\n\twhile(true){\n\t\ttry {\n\t\t\tlink=null;\n\t\t\toriginal=-1;...\n\t\t\tif(null != link){\n\t\t\t\tupdateQueueSize(original,mUrls.size());...\n\t\t\t\tsetCurrentURL(href);...\n\t\t\t\tupdateVisitedSize(mVisited.size() - 1,mVisited.size());\n\t\t\t\turls=getImageLinks(link);\n\t\t\t\tfetch(urls[0]);...\n\t\t\t}else ...\n\t\t\tif(!mActive)...\n\t\t} catch (Throwable t){...\n\t\t} \n\t}\n}"},{"Origin":"public static void main(String[] argv) throws IOException, SAXException {\n\tint optind=getopts(options,argv);\n\tif(hasOption(options,\"--help\")){\n\t\tdoHelp();\n\t\treturn;\n\t}\n\tif(hasOption(options,\"--version\")){\n\t\tSystem.err.println(\"TagSoup version 1.2.1\");\n\t\treturn;\n\t}\n\tif(argv.length == optind){\n\t\tprocess(\"\",System.out);\n\t}else if(hasOption(options,\"--files\")){\n\t\tfor (int i=optind; i < argv.length; i++){\n\t\t\tString src=argv[i];\n\t\t\tString dst;\n\t\t\tint j=src.lastIndexOf('.');\n\t\t\tif(j == -1)\n\t\t\t\tdst=src + \".xhtml\";\n\t\t\telse if(src.endsWith(\".xhtml\"))\n\t\t\t\tdst=src + \"_\";\n\t\t\telse \n\t\t\t\tdst=src.substring(0,j) + \".xhtml\";\n\t\t\tSystem.err.println(\"src: \" + src + \" dst: \"+ dst);\n\t\t\tOutputStream os=new FileOutputStream(dst);\n\t\t\tprocess(src,os);\n\t\t}\n\t}else {\n\t\tfor (int i=optind; i < argv.length; i++){\n\t\t\tSystem.err.println(\"src: \" + argv[i]);\n\t\t\tprocess(argv[i],System.out);\n\t\t}\n\t}\n}","Original_Lines":32,"Target_Lines":21,"Manual":"public static void main(String[] argv) throws IOException, SAXException {\n\tint optind=getopts(options,argv);...\n\tif(argv.length == optind){\n\t\tprocess(\"\",System.out);\n\t}else if(hasOption(options,\"--files\")){\n\t\tfor (int i=optind; i < argv.length; i++){\n\t\t\tString src=argv[i];...\n\t\t\tint j=src.lastIndexOf('.');\n\t\t\tif(j == -1)\n\t\t\t\tdst=src + \".xhtml\";\n\t\t\telse if(src.endsWith(\".xhtml\"))\n\t\t\t\tdst=src + \"_\";\n\t\t\telse \n\t\t\t\tdst=src.substring(0,j) + \".xhtml\";...\n\t\t\tOutputStream os=new FileOutputStream(dst);\n\t\t\tprocess(src,os);\n\t\t}\n\t}else {\n\t\tfor (int i=optind; i < argv.length; i++){...\n\t\t\tprocess(argv[i],System.out);\n\t\t}\n\t}\n}","Distance":0.3157894736842105,"Automatic":"public static void main(String[] argv) throws IOException, SAXException {\n\tint optind=getopts(options,argv);\n\tif(hasOption(options,\"--help\")){...\n\t\treturn;\n\t}...\n\tif(argv.length == optind){\n\t\tprocess(\"\",System.out);\n\t}else if(hasOption(options,\"--files\")){\n\t\tfor (int i=optind; i < argv.length; i++){\n\t\t\tString src=argv[i];\n\t\t\tString dst;\n\t\t\tint j=src.lastIndexOf('.');\n\t\t\tif(j == -1)\n\t\t\t\tdst=src + \".xhtml\";\n\t\t\telse if(src.endsWith(\".xhtml\"))\n\t\t\t\tdst=src + \"_\";\n\t\t\telse \n\t\t\t\tdst=src.substring(0,j) + \".xhtml\";...\n\t\t\tOutputStream os=new FileOutputStream(dst);...\n\t\t}\n\t}else {...\n\t}\n}"},{"Origin":"protected void doSAX(Node node) throws ParserException, SAXException {\n\tTag tag;\n\tTag end;\n\tif(node instanceof Remark){\n\t\tString text=mParser.getLexer().getPage().getText(node.getStartPosition(),node.getEndPosition());\n\t\tmContentHandler.ignorableWhitespace(text.toCharArray(),0,text.length());\n\t}else if(node instanceof Text){\n\t\tString text=mParser.getLexer().getPage().getText(node.getStartPosition(),node.getEndPosition());\n\t\ttext=Translate.decode(text);\n\t\tmContentHandler.characters(text.toCharArray(),0,text.length());\n\t}else if(node instanceof Tag){\n\t\ttag=(Tag)node;\n\t\tif(mNameSpaces)\n\t\t\tmSupport.processName(tag.getTagName(),mParts,false);\n\t\telse {\n\t\t\tmParts[0]=\"\";\n\t\t\tmParts[1]=\"\";\n\t\t}\n\t\tif(mNameSpacePrefixes)\n\t\t\tmParts[2]=tag.getTagName();\n\t\telse if(mNameSpaces)\n\t\t\tmParts[2]=\"\";\n\t\telse \n\t\t\tmParts[2]=tag.getTagName();\n\t\tmContentHandler.startElement(mParts[0],mParts[1],mParts[2],new Attributes(tag,mSupport,mParts));\n\t\tNodeList children=tag.getChildren();\n\t\tif(null != children)\n\t\t\tfor (int i=0; i < children.size(); i++)\n\t\t\t\tdoSAX(children.elementAt(i));\n\t\tend=tag.getEndTag();\n\t\tif(null != end){\n\t\t\tif(mNameSpaces)\n\t\t\t\tmSupport.processName(end.getTagName(),mParts,false);\n\t\t\telse {\n\t\t\t\tmParts[0]=\"\";\n\t\t\t\tmParts[1]=\"\";\n\t\t\t}\n\t\t\tif(mNameSpacePrefixes)\n\t\t\t\tmParts[2]=end.getTagName();\n\t\t\telse if(mNameSpaces)\n\t\t\t\tmParts[2]=\"\";\n\t\t\telse \n\t\t\t\tmParts[2]=end.getTagName();\n\t\t\tmContentHandler.endElement(mParts[0],mParts[1],mParts[2]);\n\t\t}\n\t}\n}","Original_Lines":45,"Target_Lines":26,"Manual":"protected void doSAX(Node node) throws ParserException, SAXException {...\n\tif(node instanceof Remark){\n\t\tString text=mParser.getLexer().getPage().getText(node.getStartPosition(),node.getEndPosition());\n\t\tmContentHandler.ignorableWhitespace(text.toCharArray(),0,text.length());\n\t}else if(node instanceof Text){\n\t\tString text=mParser.getLexer().getPage().getText(node.getStartPosition(),node.getEndPosition());\n\t\ttext=Translate.decode(text);\n\t\tmContentHandler.characters(text.toCharArray(),0,text.length());\n\t}else if(node instanceof Tag){...\n\t\tif(mNameSpaces)\n\t\t\tmSupport.processName(tag.getTagName(),mParts,false);\n\t\telse {...\n\t\t}...\n\t\tmContentHandler.startElement(mParts[0],mParts[1],mParts[2],new Attributes(tag,mSupport,mParts));\n\t\tNodeList children=tag.getChildren();\n\t\tif(null != children)\n\t\t\tfor (int i=0; i < children.size(); i++)\n\t\t\t\tdoSAX(children.elementAt(i));\n\t\tend=tag.getEndTag();\n\t\tif(null != end){\n\t\t\tif(mNameSpaces)\n\t\t\t\tmSupport.processName(end.getTagName(),mParts,false);\n\t\t\telse {...\n\t\t\t}...\n\t\t\tmContentHandler.endElement(mParts[0],mParts[1],mParts[2]);\n\t\t}\n\t}\n}","Distance":0.5,"Automatic":"protected void doSAX(Node node) throws ParserException, SAXException {\n\tTag tag;\n\tTag end;\n\tif(node instanceof Remark){\n\t\tString text=mParser.getLexer().getPage().getText(node.getStartPosition(),node.getEndPosition());\n\t\tmContentHandler.ignorableWhitespace(text.toCharArray(),0,text.length());\n\t}else if(node instanceof Text){\n\t\tString text=mParser.getLexer().getPage().getText(node.getStartPosition(),node.getEndPosition());\n\t\ttext=Translate.decode(text);\n\t\tmContentHandler.characters(text.toCharArray(),0,text.length());\n\t}else if(node instanceof Tag){\n\t\ttag=(Tag)node;...\n\t\tif(mNameSpacePrefixes)...\n\t\telse if(mNameSpaces)...\n\t\telse ......\n\t\tNodeList children=tag.getChildren();\n\t\tif(null != children)\n\t\t\tfor (int i=0; i < children.size(); i++)\n\t\t\t\tdoSAX(children.elementAt(i));...\n\t\tif(null != end){...\n\t\t\tif(mNameSpacePrefixes)...\n\t\t\telse if(mNameSpaces)\n\t\t\t\tmParts[2]=\"\";\n\t\t\telse ...\n\t\t\tmContentHandler.endElement(mParts[0],mParts[1],mParts[2]);\n\t\t}\n\t}\n}"},{"Origin":"protected Socket _openDataConnection_(String command,String arg) throws IOException {\n\tif(__dataConnectionMode != ACTIVE_LOCAL_DATA_CONNECTION_MODE && __dataConnectionMode != PASSIVE_LOCAL_DATA_CONNECTION_MODE){\n\t\treturn null;\n\t}\n\tfinal boolean isInet6Address=getRemoteAddress() instanceof Inet6Address;\n\tSocket socket;\n\tif(__dataConnectionMode == ACTIVE_LOCAL_DATA_CONNECTION_MODE){\n\t\tServerSocket server=_serverSocketFactory_.createServerSocket(getActivePort(),1,getHostAddress());\n\t\ttry {\n\t\t\tif(isInet6Address){\n\t\t\t\tif(!FTPReply.isPositiveCompletion(eprt(getReportHostAddress(),server.getLocalPort()))){\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}else {\n\t\t\t\tif(!FTPReply.isPositiveCompletion(port(getReportHostAddress(),server.getLocalPort()))){\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif((__restartOffset > 0) && !restart(__restartOffset)){\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif(!FTPReply.isPositivePreliminary(sendCommand(command,arg))){\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif(__dataTimeout >= 0){\n\t\t\t\tserver.setSoTimeout(__dataTimeout);\n\t\t\t}\n\t\t\tsocket=server.accept();\n\t\t} finally {\n\t\t\tserver.close();\n\t\t} \n\t}else {\n\t\tboolean attemptEPSV=isUseEPSVwithIPv4() || isInet6Address;\n\t\tif(attemptEPSV && epsv() == FTPReply.ENTERING_EPSV_MODE){\n\t\t\t_parseExtendedPassiveModeReply(_replyLines.get(0));\n\t\t}else {\n\t\t\tif(isInet6Address){\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif(pasv() != FTPReply.ENTERING_PASSIVE_MODE){\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\t_parsePassiveModeReply(_replyLines.get(0));\n\t\t}\n\t\tsocket=_socketFactory_.createSocket();\n\t\tsocket.connect(new InetSocketAddress(__passiveHost,__passivePort),connectTimeout);\n\t\tif((__restartOffset > 0) && !restart(__restartOffset)){\n\t\t\tsocket.close();\n\t\t\treturn null;\n\t\t}\n\t\tif(!FTPReply.isPositivePreliminary(sendCommand(command,arg))){\n\t\t\tsocket.close();\n\t\t\treturn null;\n\t\t}\n\t}\n\tif(__remoteVerificationEnabled && !verifyRemote(socket)){\n\t\tsocket.close();\n\t\tthrow new IOException(\"Host attempting data connection \" + socket.getInetAddress().getHostAddress() + \" is not same as server \"+ getRemoteAddress().getHostAddress());\n\t}\n\tif(__dataTimeout >= 0){\n\t\tsocket.setSoTimeout(__dataTimeout);\n\t}\n\treturn socket;\n}","Original_Lines":62,"Target_Lines":32,"Manual":"protected Socket _openDataConnection_(String command,String arg) throws IOException {...\n\tfinal boolean isInet6Address=getRemoteAddress() instanceof Inet6Address;...\n\tif(__dataConnectionMode == ACTIVE_LOCAL_DATA_CONNECTION_MODE){\n\t\tServerSocket server=_serverSocketFactory_.createServerSocket(getActivePort(),1,getHostAddress());\n\t\ttry {\n\t\t\tif(isInet6Address){\n\t\t\t\tif(!FTPReply.isPositiveCompletion(eprt(getReportHostAddress(),server.getLocalPort()))){...\n\t\t\t\t}\n\t\t\t}else {\n\t\t\t\tif(!FTPReply.isPositiveCompletion(port(getReportHostAddress(),server.getLocalPort()))){...\n\t\t\t\t}\n\t\t\t}...\n\t\t\tif(__dataTimeout >= 0){\n\t\t\t\tserver.setSoTimeout(__dataTimeout);\n\t\t\t}\n\t\t\tsocket=server.accept();\n\t\t} finally {\n\t\t\tserver.close();\n\t\t} \n\t}else {\n\t\tboolean attemptEPSV=isUseEPSVwithIPv4() || isInet6Address;\n\t\tif(attemptEPSV && epsv() == FTPReply.ENTERING_EPSV_MODE){\n\t\t\t_parseExtendedPassiveModeReply(_replyLines.get(0));\n\t\t}else {...\n\t\t\t_parsePassiveModeReply(_replyLines.get(0));\n\t\t}\n\t\tsocket=_socketFactory_.createSocket();\n\t\tsocket.connect(new InetSocketAddress(__passiveHost,__passivePort),connectTimeout);...\n\t}...\n\tif(__dataTimeout >= 0){\n\t\tsocket.setSoTimeout(__dataTimeout);\n\t}\n\treturn socket;\n}","Distance":0.5517241379310345,"Automatic":"protected Socket _openDataConnection_(String command,String arg) throws IOException {\n\tif(__dataConnectionMode != ACTIVE_LOCAL_DATA_CONNECTION_MODE && __dataConnectionMode != PASSIVE_LOCAL_DATA_CONNECTION_MODE){\n\t\treturn null;\n\t}\n\tfinal boolean isInet6Address=getRemoteAddress() instanceof Inet6Address;\n\tSocket socket;\n\tif(__dataConnectionMode == ACTIVE_LOCAL_DATA_CONNECTION_MODE){\n\t\tServerSocket server=_serverSocketFactory_.createServerSocket(getActivePort(),1,getHostAddress());\n\t\ttry {...\n\t\t\tif((__restartOffset > 0) && !restart(__restartOffset)){\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif(!FTPReply.isPositivePreliminary(sendCommand(command,arg))){\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif(__dataTimeout >= 0){\n\t\t\t\tserver.setSoTimeout(__dataTimeout);\n\t\t\t}\n\t\t\tsocket=server.accept();\n\t\t} finally {...\n\t\t} \n\t}else {\n\t\tboolean attemptEPSV=isUseEPSVwithIPv4() || isInet6Address;\n\t\tif(attemptEPSV && epsv() == FTPReply.ENTERING_EPSV_MODE){\n\t\t\t_parseExtendedPassiveModeReply(_replyLines.get(0));\n\t\t}else {\n\t\t\tif(isInet6Address){\n\t\t\t\treturn null;\n\t\t\t}...\n\t\t\t_parsePassiveModeReply(_replyLines.get(0));\n\t\t}\n\t\tsocket=_socketFactory_.createSocket();\n\t\tsocket.connect(new InetSocketAddress(__passiveHost,__passivePort),connectTimeout);...\n\t}...\n}"},{"Origin":"@Override protected Socket _openDataConnection_(int command,String arg) throws IOException {\n\tSocket socket=super._openDataConnection_(command,arg);\n\t_prepareDataSocket_(socket);\n\tif(socket instanceof SSLSocket){\n\t\tSSLSocket sslSocket=(SSLSocket)socket;\n\t\tsslSocket.setUseClientMode(isClientMode);\n\t\tsslSocket.setEnableSessionCreation(isCreation);\n\t\tif(!isClientMode){\n\t\t\tsslSocket.setNeedClientAuth(isNeedClientAuth);\n\t\t\tsslSocket.setWantClientAuth(isWantClientAuth);\n\t\t}\n\t\tif(suites != null){\n\t\t\tsslSocket.setEnabledCipherSuites(suites);\n\t\t}\n\t\tif(protocols != null){\n\t\t\tsslSocket.setEnabledProtocols(protocols);\n\t\t}\n\t\tsslSocket.startHandshake();\n\t}\n\treturn socket;\n}","Original_Lines":19,"Target_Lines":9,"Manual":"@Override protected Socket _openDataConnection_(int command,String arg) throws IOException {\n\tSocket socket=super._openDataConnection_(command,arg);\n\t_prepareDataSocket_(socket);\n\tif(socket instanceof SSLSocket){\n\t\tSSLSocket sslSocket=(SSLSocket)socket;\n\t\tsslSocket.setUseClientMode(isClientMode);\n\t\tsslSocket.setEnableSessionCreation(isCreation);...\n\t\tsslSocket.startHandshake();\n\t}\n\treturn socket;\n}","Distance":0,"Automatic":"@Override protected Socket _openDataConnection_(int command,String arg) throws IOException {\n\tSocket socket=super._openDataConnection_(command,arg);\n\t_prepareDataSocket_(socket);\n\tif(socket instanceof SSLSocket){\n\t\tSSLSocket sslSocket=(SSLSocket)socket;\n\t\tsslSocket.setUseClientMode(isClientMode);\n\t\tsslSocket.setEnableSessionCreation(isCreation);...\n\t\tsslSocket.startHandshake();\n\t}\n\treturn socket;\n}"},{"Origin":"@Override protected char[] escape(int cp){\n\tif(cp < safeOctets.length && safeOctets[cp]){\n\t\treturn null;\n\t}else if(cp == ' ' && plusForSpace){\n\t\treturn URI_ESCAPED_SPACE;\n\t}else if(cp <= 0x7F){\n\t\tchar[] dest=new char[3];\n\t\tdest[0]='%';\n\t\tdest[2]=UPPER_HEX_DIGITS[cp & 0xF];\n\t\tdest[1]=UPPER_HEX_DIGITS[cp >>> 4];\n\t\treturn dest;\n\t}else if(cp <= 0x7ff){\n\t\tchar[] dest=new char[6];\n\t\tdest[0]='%';\n\t\tdest[3]='%';\n\t\tdest[5]=UPPER_HEX_DIGITS[cp & 0xF];\n\t\tcp>>>=4;\n\t\tdest[4]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];\n\t\tcp>>>=2;\n\t\tdest[2]=UPPER_HEX_DIGITS[cp & 0xF];\n\t\tcp>>>=4;\n\t\tdest[1]=UPPER_HEX_DIGITS[0xC | cp];\n\t\treturn dest;\n\t}else if(cp <= 0xffff){\n\t\tchar[] dest=new char[9];\n\t\tdest[0]='%';\n\t\tdest[1]='E';\n\t\tdest[3]='%';\n\t\tdest[6]='%';\n\t\tdest[8]=UPPER_HEX_DIGITS[cp & 0xF];\n\t\tcp>>>=4;\n\t\tdest[7]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];\n\t\tcp>>>=2;\n\t\tdest[5]=UPPER_HEX_DIGITS[cp & 0xF];\n\t\tcp>>>=4;\n\t\tdest[4]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];\n\t\tcp>>>=2;\n\t\tdest[2]=UPPER_HEX_DIGITS[cp];\n\t\treturn dest;\n\t}else if(cp <= 0x10ffff){\n\t\tchar[] dest=new char[12];\n\t\tdest[0]='%';\n\t\tdest[1]='F';\n\t\tdest[3]='%';\n\t\tdest[6]='%';\n\t\tdest[9]='%';\n\t\tdest[11]=UPPER_HEX_DIGITS[cp & 0xF];\n\t\tcp>>>=4;\n\t\tdest[10]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];\n\t\tcp>>>=2;\n\t\tdest[8]=UPPER_HEX_DIGITS[cp & 0xF];\n\t\tcp>>>=4;\n\t\tdest[7]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];\n\t\tcp>>>=2;\n\t\tdest[5]=UPPER_HEX_DIGITS[cp & 0xF];\n\t\tcp>>>=4;\n\t\tdest[4]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];\n\t\tcp>>>=2;\n\t\tdest[2]=UPPER_HEX_DIGITS[cp & 0x7];\n\t\treturn dest;\n\t}else {\n\t\tthrow new IllegalArgumentException(\"Invalid unicode character value \" + cp);\n\t}\n}","Original_Lines":62,"Target_Lines":18,"Manual":"@Override protected char[] escape(int cp){\n\tif(cp < safeOctets.length && safeOctets[cp]){\n\t\treturn null;\n\t}else if(cp == ' ' && plusForSpace){\n\t\treturn URI_ESCAPED_SPACE;\n\t}else if(cp <= 0x7F){\n\t\tchar[] dest=new char[3];...\n\t\treturn dest;\n\t}else if(cp <= 0x7ff){\n\t\tchar[] dest=new char[6];...\n\t\treturn dest;\n\t}else if(cp <= 0xffff){\n\t\tchar[] dest=new char[9];...\n\t\treturn dest;\n\t}else if(cp <= 0x10ffff){\n\t\tchar[] dest=new char[12];...\n\t\treturn dest;\n\t}else {...\n\t}\n}","Distance":0.2222222222222222,"Automatic":"@Override protected char[] escape(int cp){\n\tif(cp < safeOctets.length && safeOctets[cp]){\n\t\treturn null;\n\t}else if(cp == ' ' && plusForSpace){\n\t\treturn URI_ESCAPED_SPACE;\n\t}else if(cp <= 0x7F){\n\t\tchar[] dest=new char[3];...\n\t\treturn dest;\n\t}else if(cp <= 0x7ff){\n\t\tchar[] dest=new char[6];...\n\t\tcp>>>=4;...\n\t\tcp>>>=2;...\n\t\treturn dest;\n\t}else if(cp <= 0xffff){\n\t\tchar[] dest=new char[9];...\n\t}else if(cp <= 0x10ffff){\n\t\tchar[] dest=new char[12];...\n\t}else {...\n\t}\n}"},{"Origin":"public Page submit(final SubmittableElement submitElement) throws IOException {\n\tfinal HtmlPage htmlPage=(HtmlPage)getPage();\n\tif(htmlPage.getWebClient().isJavaScriptEnabled()){\n\t\tif(submitElement != null){\n\t\t\tisPreventDefault_=false;\n\t\t\tfinal ScriptResult scriptResult=fireEvent(Event.TYPE_SUBMIT);\n\t\t\tif(isPreventDefault_){\n\t\t\t\treturn scriptResult.getNewPage();\n\t\t\t}\n\t\t}\n\t\tfinal String action=getActionAttribute();\n\t\tif(TextUtil.startsWithIgnoreCase(action,JAVASCRIPT_PREFIX)){\n\t\t\treturn htmlPage.executeJavaScriptIfPossible(action,\"Form action\",getStartLineNumber()).getNewPage();\n\t\t}\n\t}else {\n\t\tif(TextUtil.startsWithIgnoreCase(getActionAttribute(),JAVASCRIPT_PREFIX)){\n\t\t\treturn htmlPage;\n\t\t}\n\t}\n\tfinal List<NameValuePair> parameters=getParameterListForSubmit(submitElement);\n\tfinal HttpMethod method;\n\tfinal String methodAttribute=getMethodAttribute();\n\tif(\"post\".equalsIgnoreCase(methodAttribute)){\n\t\tmethod=HttpMethod.POST;\n\t}else {\n\t\tif(!\"get\".equalsIgnoreCase(methodAttribute) && methodAttribute.trim().length() > 0){\n\t\t\tnotifyIncorrectness(\"Incorrect submit method >\" + getMethodAttribute() + \"<. Using >GET<.\");\n\t\t}\n\t\tmethod=HttpMethod.GET;\n\t}\n\tString actionUrl=getActionAttribute();\n\tif(HttpMethod.GET == method){\n\t\tfinal String anchor=StringUtils.substringAfter(actionUrl,\"#\");\n\t\tactionUrl=StringUtils.substringBefore(actionUrl,\"#\");\n\t\tfinal NameValuePair[] pairs=new NameValuePair[parameters.size()];\n\t\tparameters.toArray(pairs);\n\t\tfinal String queryFromFields=EncodingUtil.formUrlEncode(pairs,getPage().getPageEncoding());\n\t\tactionUrl=StringUtils.substringBefore(actionUrl,\"?\");\n\t\tfinal BrowserVersion browserVersion=getPage().getWebClient().getBrowserVersion();\n\t\tif(!(browserVersion.isIE() && browserVersion.getBrowserVersionNumeric() >= 7) || queryFromFields.length() > 0){\n\t\t\tactionUrl+=\"?\" + queryFromFields;\n\t\t}\n\t\tif(anchor.length() > 0){\n\t\t\tactionUrl+=\"#\" + anchor;\n\t\t}\n\t\tparameters.clear();\n\t}\n\tfinal URL url;\n\ttry {\n\t\tif(actionUrl.length() == 0){\n\t\t\turl=htmlPage.getWebResponse().getRequestSettings().getUrl();\n\t\t}else if(actionUrl.startsWith(\"?\")){\n\t\t\tString urlString=htmlPage.getWebResponse().getRequestSettings().getUrl().toExternalForm();\n\t\t\tif(urlString.indexOf('?') != -1){\n\t\t\t\turlString=urlString.substring(0,urlString.indexOf('?'));\n\t\t\t}\n\t\t\turl=new URL(urlString + actionUrl);\n\t\t}else {\n\t\t\turl=htmlPage.getFullyQualifiedUrl(actionUrl);\n\t\t}\n\t} catch (final MalformedURLException e){\n\t\tthrow new IllegalArgumentException(\"Not a valid url: \" + actionUrl);\n\t} \n\tfinal WebRequestSettings settings=new WebRequestSettings(url,method);\n\tsettings.setRequestParameters(parameters);\n\tsettings.setEncodingType(FormEncodingType.getInstance(getEnctypeAttribute()));\n\tsettings.setCharset(getSubmitCharset());\n\tsettings.setAdditionalHeader(\"Referer\",htmlPage.getWebResponse().getRequestSettings().getUrl().toExternalForm());\n\tfinal WebWindow webWindow=htmlPage.getEnclosingWindow();\n\treturn htmlPage.getWebClient().getPage(webWindow,htmlPage.getResolvedTarget(getTargetAttribute()),settings);\n}","Original_Lines":69,"Target_Lines":54,"Manual":"public Page submit(final SubmittableElement submitElement) throws IOException {\n\tfinal HtmlPage htmlPage=(HtmlPage)getPage();\n\tif(htmlPage.getWebClient().isJavaScriptEnabled()){\n\t\tif(submitElement != null){...\n\t\t\tfinal ScriptResult scriptResult=fireEvent(Event.TYPE_SUBMIT);...\n\t\t}\n\t\tfinal String action=getActionAttribute();\n\t\tif(TextUtil.startsWithIgnoreCase(action,JAVASCRIPT_PREFIX)){\n\t\t\treturn htmlPage.executeJavaScriptIfPossible(action,\"Form action\",getStartLineNumber()).getNewPage();\n\t\t}\n\t}else {\n\t\tif(TextUtil.startsWithIgnoreCase(getActionAttribute(),JAVASCRIPT_PREFIX)){\n\t\t\treturn htmlPage;\n\t\t}\n\t}\n\tfinal List<NameValuePair> parameters=getParameterListForSubmit(submitElement);\n\tfinal HttpMethod method;\n\tfinal String methodAttribute=getMethodAttribute();\n\tif(\"post\".equalsIgnoreCase(methodAttribute)){\n\t\tmethod=HttpMethod.POST;\n\t}else {\n\t\tif(!\"get\".equalsIgnoreCase(methodAttribute) && methodAttribute.trim().length() > 0){\n\t\t\tnotifyIncorrectness(\"Incorrect submit method >\" + getMethodAttribute() + \"<. Using >GET<.\");\n\t\t}\n\t\tmethod=HttpMethod.GET;\n\t}\n\tString actionUrl=getActionAttribute();\n\tif(HttpMethod.GET == method){\n\t\tfinal String anchor=StringUtils.substringAfter(actionUrl,\"#\");\n\t\tactionUrl=StringUtils.substringBefore(actionUrl,\"#\");\n\t\tfinal NameValuePair[] pairs=new NameValuePair[parameters.size()];\n\t\tparameters.toArray(pairs);\n\t\tfinal String queryFromFields=EncodingUtil.formUrlEncode(pairs,getPage().getPageEncoding());\n\t\tactionUrl=StringUtils.substringBefore(actionUrl,\"?\");\n\t\tfinal BrowserVersion browserVersion=getPage().getWebClient().getBrowserVersion();\n\t\tif(!(browserVersion.isIE() && browserVersion.getBrowserVersionNumeric() >= 7) || queryFromFields.length() > 0){\n\t\t\tactionUrl+=\"?\" + queryFromFields;\n\t\t}...\n\t}\n\tfinal URL url;\n\ttry {\n\t\tif(actionUrl.length() == 0){\n\t\t\turl=htmlPage.getWebResponse().getRequestSettings().getUrl();\n\t\t}else if(actionUrl.startsWith(\"?\")){\n\t\t\tString urlString=htmlPage.getWebResponse().getRequestSettings().getUrl().toExternalForm();\n\t\t\tif(urlString.indexOf('?') != -1){\n\t\t\t\turlString=urlString.substring(0,urlString.indexOf('?'));\n\t\t\t}\n\t\t\turl=new URL(urlString + actionUrl);\n\t\t}else {\n\t\t\turl=htmlPage.getFullyQualifiedUrl(actionUrl);\n\t\t}\n\t} catch (final MalformedURLException e){...\n\t} ...\n\treturn htmlPage.getWebClient().getPage(webWindow,htmlPage.getResolvedTarget(getTargetAttribute()),settings);\n}","Distance":0.2765957446808511,"Automatic":"public Page submit(final SubmittableElement submitElement) throws IOException {\n\tfinal HtmlPage htmlPage=(HtmlPage)getPage();\n\tif(htmlPage.getWebClient().isJavaScriptEnabled()){\n\t\tif(submitElement != null){\n\t\t\tisPreventDefault_=false;\n\t\t\tfinal ScriptResult scriptResult=fireEvent(Event.TYPE_SUBMIT);\n\t\t\tif(isPreventDefault_){\n\t\t\t\treturn scriptResult.getNewPage();\n\t\t\t}\n\t\t}\n\t\tfinal String action=getActionAttribute();\n\t\tif(TextUtil.startsWithIgnoreCase(action,JAVASCRIPT_PREFIX)){\n\t\t\treturn htmlPage.executeJavaScriptIfPossible(action,\"Form action\",getStartLineNumber()).getNewPage();\n\t\t}\n\t}else {\n\t\tif(TextUtil.startsWithIgnoreCase(getActionAttribute(),JAVASCRIPT_PREFIX)){\n\t\t\treturn htmlPage;\n\t\t}\n\t}\n\tfinal List<NameValuePair> parameters=getParameterListForSubmit(submitElement);\n\tfinal HttpMethod method;\n\tfinal String methodAttribute=getMethodAttribute();...\n\tString actionUrl=getActionAttribute();\n\tif(HttpMethod.GET == method){\n\t\tfinal String anchor=StringUtils.substringAfter(actionUrl,\"#\");\n\t\tactionUrl=StringUtils.substringBefore(actionUrl,\"#\");\n\t\tfinal NameValuePair[] pairs=new NameValuePair[parameters.size()];\n\t\tparameters.toArray(pairs);\n\t\tfinal String queryFromFields=EncodingUtil.formUrlEncode(pairs,getPage().getPageEncoding());\n\t\tactionUrl=StringUtils.substringBefore(actionUrl,\"?\");\n\t\tfinal BrowserVersion browserVersion=getPage().getWebClient().getBrowserVersion();\n\t\tif(!(browserVersion.isIE() && browserVersion.getBrowserVersionNumeric() >= 7) || queryFromFields.length() > 0){\n\t\t\tactionUrl+=\"?\" + queryFromFields;\n\t\t}...\n\t}\n\tfinal URL url;\n\ttry {\n\t\tif(actionUrl.length() == 0){\n\t\t\turl=htmlPage.getWebResponse().getRequestSettings().getUrl();\n\t\t}else if(actionUrl.startsWith(\"?\")){\n\t\t\tString urlString=htmlPage.getWebResponse().getRequestSettings().getUrl().toExternalForm();\n\t\t\tif(urlString.indexOf('?') != -1){\n\t\t\t\turlString=urlString.substring(0,urlString.indexOf('?'));\n\t\t\t}\n\t\t\turl=new URL(urlString + actionUrl);\n\t\t}else {\n\t\t\turl=htmlPage.getFullyQualifiedUrl(actionUrl);\n\t\t}\n\t} catch (final MalformedURLException e){...\n\t} \n\tfinal WebRequestSettings settings=new WebRequestSettings(url,method);\n\tsettings.setRequestParameters(parameters);\n\tsettings.setEncodingType(FormEncodingType.getInstance(getEnctypeAttribute()));\n\tsettings.setCharset(getSubmitCharset());\n\tsettings.setAdditionalHeader(\"Referer\",htmlPage.getWebResponse().getRequestSettings().getUrl().toExternalForm());...\n\treturn htmlPage.getWebClient().getPage(webWindow,htmlPage.getResolvedTarget(getTargetAttribute()),settings);\n}"},{"Origin":"public void submit(String buttonName,String buttonValue){\n\tList<HtmlElement> l=new LinkedList<HtmlElement>();\n\tl.addAll(getForm().getInputsByName(buttonName));\n\tl.addAll(getForm().getButtonsByName(buttonName));\n\ttry {\n\t\tfor (int i=0; i < l.size(); i++){\n\t\t\tObject o=l.get(i);\n\t\t\tif(o instanceof HtmlSubmitInput){\n\t\t\t\tHtmlSubmitInput inpt=(HtmlSubmitInput)o;\n\t\t\t\tif(inpt.getValueAttribute().equals(buttonValue)){\n\t\t\t\t\tinpt.click();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(o instanceof HtmlImageInput){\n\t\t\t\tHtmlImageInput inpt=(HtmlImageInput)o;\n\t\t\t\tif(inpt.getValueAttribute().equals(buttonValue)){\n\t\t\t\t\tinpt.click();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(o instanceof HtmlButton){\n\t\t\t\tHtmlButton inpt=(HtmlButton)o;\n\t\t\t\tif(inpt.getTypeAttribute().equals(\"submit\") && inpt.getValueAttribute().equals(buttonValue)){\n\t\t\t\t\tinpt.click();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} catch (FailingHttpStatusCodeException e){\n\t\tif(!ignoreFailingStatusCodes){\n\t\t\tthrow new TestingEngineResponseException(e.getStatusCode(),e);\n\t\t}\n\t\treturn;\n\t} catch (IOException e){\n\t\tthrow new RuntimeException(\"HtmlUnit Error submitting form using submit button with name [\" + buttonName + \"] and value [\"+ buttonValue+ \"]\",e);\n\t} \n\tthrow new RuntimeException(\"No submit button found in current form with name [\" + buttonName + \"] and value [\"+ buttonValue+ \"].\");\n}","Original_Lines":37,"Target_Lines":19,"Manual":"public void submit(String buttonName,String buttonValue){\n\tList<HtmlElement> l=new LinkedList<HtmlElement>();\n\tl.addAll(getForm().getInputsByName(buttonName));\n\tl.addAll(getForm().getButtonsByName(buttonName));\n\ttry {\n\t\tfor (int i=0; i < l.size(); i++){\n\t\t\tObject o=l.get(i);\n\t\t\tif(o instanceof HtmlSubmitInput){\n\t\t\t\tHtmlSubmitInput inpt=(HtmlSubmitInput)o;...\n\t\t\t}\n\t\t\tif(o instanceof HtmlImageInput){\n\t\t\t\tHtmlImageInput inpt=(HtmlImageInput)o;...\n\t\t\t}\n\t\t\tif(o instanceof HtmlButton){\n\t\t\t\tHtmlButton inpt=(HtmlButton)o;...\n\t\t\t}\n\t\t}\n\t} catch (FailingHttpStatusCodeException e){...\n\t} catch (IOException e){...\n\t} ...\n}","Distance":0.3333333333333333,"Automatic":"public void submit(String buttonName,String buttonValue){\n\tList<HtmlElement> l=new LinkedList<HtmlElement>();\n\tl.addAll(getForm().getInputsByName(buttonName));\n\tl.addAll(getForm().getButtonsByName(buttonName));\n\ttry {\n\t\tfor (int i=0; i < l.size(); i++){\n\t\t\tObject o=l.get(i);\n\t\t\tif(o instanceof HtmlSubmitInput){\n\t\t\t\tHtmlSubmitInput inpt=(HtmlSubmitInput)o;...\n\t\t\t}\n\t\t\tif(o instanceof HtmlImageInput){\n\t\t\t\tHtmlImageInput inpt=(HtmlImageInput)o;\n\t\t\t\tif(inpt.getValueAttribute().equals(buttonValue)){...\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}...\n\t\t}\n\t} catch (FailingHttpStatusCodeException e){...\n\t\treturn;\n\t} catch (IOException e){...\n\t} ...\n}"},{"Origin":"protected SortedMap<String,SortedSet<String>> loadSignificantParametersForSignatureBaseString(HttpServletRequest request){\n\tSortedMap<String,SortedSet<String>> significantParameters=new TreeMap<String,SortedSet<String>>();\n\tEnumeration parameterNames=request.getParameterNames();\n\twhile(parameterNames.hasMoreElements()){\n\t\tString parameterName=(String)parameterNames.nextElement();\n\t\tString[] values=request.getParameterValues(parameterName);\n\t\tif(values == null){\n\t\t\tvalues=new String[]{\"\"};\n\t\t}\n\t\tfor (String parameterValue : values){\n\t\t\tif(parameterValue == null){\n\t\t\t\tparameterValue=\"\";\n\t\t\t}\n\t\t\tparameterName=oauthEncode(parameterName);\n\t\t\tparameterValue=oauthEncode(parameterValue);\n\t\t\tSortedSet<String> significantValues=significantParameters.get(parameterName);\n\t\t\tif(significantValues == null){\n\t\t\t\tsignificantValues=new TreeSet<String>();\n\t\t\t\tsignificantParameters.put(parameterName,significantValues);\n\t\t\t}\n\t\t\tsignificantValues.add(parameterValue);\n\t\t}\n\t}\n\tMap<String,String> oauthParams=parseParameters(request);\n\toauthParams.remove(\"realm\");\n\tSet<String> parsedParams=oauthParams.keySet();\n\tfor (String parameterName : parsedParams){\n\t\tString parameterValue=oauthParams.get(parameterName);\n\t\tif(parameterValue == null){\n\t\t\tparameterValue=\"\";\n\t\t}\n\t\tparameterName=oauthEncode(parameterName);\n\t\tparameterValue=oauthEncode(parameterValue);\n\t\tSortedSet<String> significantValues=significantParameters.get(parameterName);\n\t\tif(significantValues == null){\n\t\t\tsignificantValues=new TreeSet<String>();\n\t\t\tsignificantParameters.put(parameterName,significantValues);\n\t\t}\n\t\tsignificantValues.add(parameterValue);\n\t}\n\tsignificantParameters.remove(OAuthConsumerParameter.oauth_signature.toString());\n\treturn significantParameters;\n}","Original_Lines":41,"Target_Lines":24,"Manual":"protected SortedMap<String,SortedSet<String>> loadSignificantParametersForSignatureBaseString(HttpServletRequest request){\n\tSortedMap<String,SortedSet<String>> significantParameters=new TreeMap<String,SortedSet<String>>();\n\tEnumeration parameterNames=request.getParameterNames();\n\twhile(parameterNames.hasMoreElements()){\n\t\tString parameterName=(String)parameterNames.nextElement();\n\t\tString[] values=request.getParameterValues(parameterName);...\n\t\tfor (String parameterValue : values){...\n\t\t\tparameterName=oauthEncode(parameterName);\n\t\t\tparameterValue=oauthEncode(parameterValue);\n\t\t\tSortedSet<String> significantValues=significantParameters.get(parameterName);...\n\t\t\tsignificantValues.add(parameterValue);\n\t\t}\n\t}\n\tMap<String,String> oauthParams=parseParameters(request);\n\toauthParams.remove(\"realm\");\n\tSet<String> parsedParams=oauthParams.keySet();\n\tfor (String parameterName : parsedParams){\n\t\tString parameterValue=oauthParams.get(parameterName);...\n\t\tparameterName=oauthEncode(parameterName);\n\t\tparameterValue=oauthEncode(parameterValue);\n\t\tSortedSet<String> significantValues=significantParameters.get(parameterName);...\n\t\tsignificantValues.add(parameterValue);\n\t}\n\tsignificantParameters.remove(OAuthConsumerParameter.oauth_signature.toString());\n\treturn significantParameters;\n}","Distance":0,"Automatic":"protected SortedMap<String,SortedSet<String>> loadSignificantParametersForSignatureBaseString(HttpServletRequest request){\n\tSortedMap<String,SortedSet<String>> significantParameters=new TreeMap<String,SortedSet<String>>();\n\tEnumeration parameterNames=request.getParameterNames();\n\twhile(parameterNames.hasMoreElements()){\n\t\tString parameterName=(String)parameterNames.nextElement();\n\t\tString[] values=request.getParameterValues(parameterName);...\n\t\tfor (String parameterValue : values){...\n\t\t\tparameterName=oauthEncode(parameterName);\n\t\t\tparameterValue=oauthEncode(parameterValue);\n\t\t\tSortedSet<String> significantValues=significantParameters.get(parameterName);...\n\t\t\tsignificantValues.add(parameterValue);\n\t\t}\n\t}\n\tMap<String,String> oauthParams=parseParameters(request);\n\toauthParams.remove(\"realm\");\n\tSet<String> parsedParams=oauthParams.keySet();\n\tfor (String parameterName : parsedParams){\n\t\tString parameterValue=oauthParams.get(parameterName);...\n\t\tparameterName=oauthEncode(parameterName);\n\t\tparameterValue=oauthEncode(parameterValue);\n\t\tSortedSet<String> significantValues=significantParameters.get(parameterName);...\n\t\tsignificantValues.add(parameterValue);\n\t}\n\tsignificantParameters.remove(OAuthConsumerParameter.oauth_signature.toString());\n\treturn significantParameters;\n}"},{"Origin":"public static MultivaluedMap<String,String> getEntityParameters(ClientRequest request,Providers providers){\n\tObject entity=request.getEntity();\n\tString method=request.getMethod();\n\tMediaType mediaType=getMediaType(request);\n\tif(entity == null || method == null || !method.equalsIgnoreCase(\"POST\") || mediaType == null || !mediaType.equals(MediaType.APPLICATION_FORM_URLENCODED_TYPE)){\n\t\treturn new MultivaluedMapImpl();\n\t}\n\tif(entity instanceof MultivaluedMap){\n\t\treturn (MultivaluedMap)entity;\n\t}\n\tType entityType=entity.getClass();\n\tif(entity instanceof GenericEntity){\n\t\tfinal GenericEntity generic=(GenericEntity)entity;\n\t\tentityType=generic.getType();\n\t\tentity=generic.getEntity();\n\t}\n\tfinal Class entityClass=entity.getClass();\n\tByteArrayOutputStream out=new ByteArrayOutputStream();\n\tMessageBodyWriter writer=providers.getMessageBodyWriter(entityClass,entityType,EMPTY_ANNOTATIONS,MediaType.APPLICATION_FORM_URLENCODED_TYPE);\n\ttry {\n\t\twriter.writeTo(entity,entityClass,entityType,EMPTY_ANNOTATIONS,MediaType.APPLICATION_FORM_URLENCODED_TYPE,null,out);\n\t} catch (WebApplicationException wae){\n\t\tthrow new IllegalStateException(wae);\n\t} catch (IOException ioe){\n\t\tthrow new IllegalStateException(ioe);\n\t} \n\tByteArrayInputStream in=new ByteArrayInputStream(out.toByteArray());\n\tMessageBodyReader reader=providers.getMessageBodyReader(MultivaluedMap.class,MultivaluedMap.class,EMPTY_ANNOTATIONS,MediaType.APPLICATION_FORM_URLENCODED_TYPE);\n\ttry {\n\t\treturn (MultivaluedMap<String,String>)reader.readFrom(MultivaluedMap.class,MultivaluedMap.class,EMPTY_ANNOTATIONS,MediaType.APPLICATION_FORM_URLENCODED_TYPE,null,in);\n\t} catch (IOException ioe){\n\t\tthrow new IllegalStateException(ioe);\n\t} \n}","Original_Lines":32,"Target_Lines":19,"Manual":"public static MultivaluedMap<String,String> getEntityParameters(ClientRequest request,Providers providers){\n\tObject entity=request.getEntity();\n\tString method=request.getMethod();\n\tMediaType mediaType=getMediaType(request);\n\tif(entity == null || method == null || !method.equalsIgnoreCase(\"POST\") || mediaType == null || !mediaType.equals(MediaType.APPLICATION_FORM_URLENCODED_TYPE)){\n\t\treturn new MultivaluedMapImpl();\n\t}...\n\tByteArrayOutputStream out=new ByteArrayOutputStream();\n\tMessageBodyWriter writer=providers.getMessageBodyWriter(entityClass,entityType,EMPTY_ANNOTATIONS,MediaType.APPLICATION_FORM_URLENCODED_TYPE);\n\ttry {\n\t\twriter.writeTo(entity,entityClass,entityType,EMPTY_ANNOTATIONS,MediaType.APPLICATION_FORM_URLENCODED_TYPE,null,out);\n\t} catch (WebApplicationException wae){...\n\t} catch (IOException ioe){...\n\t} \n\tByteArrayInputStream in=new ByteArrayInputStream(out.toByteArray());\n\tMessageBodyReader reader=providers.getMessageBodyReader(MultivaluedMap.class,MultivaluedMap.class,EMPTY_ANNOTATIONS,MediaType.APPLICATION_FORM_URLENCODED_TYPE);\n\ttry {\n\t\treturn (MultivaluedMap<String,String>)reader.readFrom(MultivaluedMap.class,MultivaluedMap.class,EMPTY_ANNOTATIONS,MediaType.APPLICATION_FORM_URLENCODED_TYPE,null,in);\n\t} catch (IOException ioe){...\n\t} \n}","Distance":0.3888888888888889,"Automatic":"public static MultivaluedMap<String,String> getEntityParameters(ClientRequest request,Providers providers){\n\tObject entity=request.getEntity();\n\tString method=request.getMethod();\n\tMediaType mediaType=getMediaType(request);\n\tif(entity == null || method == null || !method.equalsIgnoreCase(\"POST\") || mediaType == null || !mediaType.equals(MediaType.APPLICATION_FORM_URLENCODED_TYPE)){\n\t\treturn new MultivaluedMapImpl();\n\t}\n\tif(entity instanceof MultivaluedMap){\n\t\treturn (MultivaluedMap)entity;\n\t}\n\tType entityType=entity.getClass();...\n\tfinal Class entityClass=entity.getClass();\n\tByteArrayOutputStream out=new ByteArrayOutputStream();\n\tMessageBodyWriter writer=providers.getMessageBodyWriter(entityClass,entityType,EMPTY_ANNOTATIONS,MediaType.APPLICATION_FORM_URLENCODED_TYPE);...\n\tByteArrayInputStream in=new ByteArrayInputStream(out.toByteArray());\n\tMessageBodyReader reader=providers.getMessageBodyReader(MultivaluedMap.class,MultivaluedMap.class,EMPTY_ANNOTATIONS,MediaType.APPLICATION_FORM_URLENCODED_TYPE);\n\ttry {\n\t\treturn (MultivaluedMap<String,String>)reader.readFrom(MultivaluedMap.class,MultivaluedMap.class,EMPTY_ANNOTATIONS,MediaType.APPLICATION_FORM_URLENCODED_TYPE,null,in);\n\t} catch (IOException ioe){\n\t\tthrow new IllegalStateException(ioe);\n\t} \n}"},{"Origin":"protected OAuthConsumerToken getTokenFromProvider(ProtectedResourceDetails details,URL tokenURL,String httpMethod,OAuthConsumerToken requestToken,Map<String,String> additionalParameters){\n\tboolean isAccessToken=requestToken != null;\n\tif(!isAccessToken){\n\t\trequestToken=new OAuthConsumerToken();\n\t\trequestToken.setNonce(getNonceFactory().generateNonce());\n\t}\n\tInputStream inputStream=readResource(details,tokenURL,httpMethod,requestToken,additionalParameters);\n\tString tokenInfo;\n\ttry {\n\t\tByteArrayOutputStream out=new ByteArrayOutputStream();\n\t\tbyte[] buffer=new byte[1024];\n\t\tint len=inputStream.read(buffer);\n\t\twhile(len >= 0){\n\t\t\tout.write(buffer,0,len);\n\t\t\tlen=inputStream.read(buffer);\n\t\t}\n\t\ttokenInfo=new String(out.toByteArray(),\"UTF-8\");\n\t} catch (IOException e){\n\t\tthrow new OAuthRequestFailedException(\"Unable to read the token.\",e);\n\t} \n\tStringTokenizer tokenProperties=new StringTokenizer(tokenInfo,\"&\");\n\tMap<String,String> tokenPropertyValues=new TreeMap<String,String>();\n\twhile(tokenProperties.hasMoreElements()){\n\t\ttry {\n\t\t\tString tokenProperty=(String)tokenProperties.nextElement();\n\t\t\tint equalsIndex=tokenProperty.indexOf('=');\n\t\t\tif(equalsIndex > 0){\n\t\t\t\tString propertyName=OAuthCodec.oauthDecode(tokenProperty.substring(0,equalsIndex));\n\t\t\t\tString propertyValue=OAuthCodec.oauthDecode(tokenProperty.substring(equalsIndex + 1));\n\t\t\t\ttokenPropertyValues.put(propertyName,propertyValue);\n\t\t\t}else {\n\t\t\t\ttokenProperty=OAuthCodec.oauthDecode(tokenProperty);\n\t\t\t\ttokenPropertyValues.put(tokenProperty,null);\n\t\t\t}\n\t\t} catch (DecoderException e){\n\t\t\tthrow new OAuthRequestFailedException(\"Unable to decode token parameters.\");\n\t\t} \n\t}\n\tString tokenValue=tokenPropertyValues.remove(OAuthProviderParameter.oauth_token.toString());\n\tif(tokenValue == null){\n\t\tthrow new OAuthRequestFailedException(\"OAuth provider failed to return a token.\");\n\t}\n\tString tokenSecret=tokenPropertyValues.remove(OAuthProviderParameter.oauth_token_secret.toString());\n\tif(tokenSecret == null){\n\t\tthrow new OAuthRequestFailedException(\"OAuth provider failed to return a token secret.\");\n\t}\n\tOAuthConsumerToken consumerToken=new OAuthConsumerToken();\n\tconsumerToken.setValue(tokenValue);\n\tconsumerToken.setSecret(tokenSecret);\n\tconsumerToken.setNonce(requestToken.getNonce());\n\tconsumerToken.setResourceId(details.getId());\n\tconsumerToken.setAccessToken(isAccessToken);\n\tif(!tokenPropertyValues.isEmpty()){\n\t\tconsumerToken.setAdditionalParameters(tokenPropertyValues);\n\t}\n\treturn consumerToken;\n}","Original_Lines":55,"Target_Lines":37,"Manual":"protected OAuthConsumerToken getTokenFromProvider(ProtectedResourceDetails details,URL tokenURL,String httpMethod,OAuthConsumerToken requestToken,Map<String,String> additionalParameters){\n\tboolean isAccessToken=requestToken != null;\n\tif(!isAccessToken){\n\t\trequestToken=new OAuthConsumerToken();\n\t\trequestToken.setNonce(getNonceFactory().generateNonce());\n\t}\n\tInputStream inputStream=readResource(details,tokenURL,httpMethod,requestToken,additionalParameters);...\n\ttry {\n\t\tByteArrayOutputStream out=new ByteArrayOutputStream();...\n\t\ttokenInfo=new String(out.toByteArray(),\"UTF-8\");\n\t} catch (IOException e){...\n\t} \n\tStringTokenizer tokenProperties=new StringTokenizer(tokenInfo,\"&\");\n\tMap<String,String> tokenPropertyValues=new TreeMap<String,String>();\n\twhile(tokenProperties.hasMoreElements()){\n\t\ttry {\n\t\t\tString tokenProperty=(String)tokenProperties.nextElement();\n\t\t\tint equalsIndex=tokenProperty.indexOf('=');\n\t\t\tif(equalsIndex > 0){\n\t\t\t\tString propertyName=OAuthCodec.oauthDecode(tokenProperty.substring(0,equalsIndex));\n\t\t\t\tString propertyValue=OAuthCodec.oauthDecode(tokenProperty.substring(equalsIndex + 1));\n\t\t\t\ttokenPropertyValues.put(propertyName,propertyValue);\n\t\t\t}else {\n\t\t\t\ttokenProperty=OAuthCodec.oauthDecode(tokenProperty);\n\t\t\t\ttokenPropertyValues.put(tokenProperty,null);\n\t\t\t}\n\t\t} catch (DecoderException e){...\n\t\t} \n\t}\n\tString tokenValue=tokenPropertyValues.remove(OAuthProviderParameter.oauth_token.toString());...\n\tString tokenSecret=tokenPropertyValues.remove(OAuthProviderParameter.oauth_token_secret.toString());...\n\tOAuthConsumerToken consumerToken=new OAuthConsumerToken();\n\tconsumerToken.setValue(tokenValue);\n\tconsumerToken.setSecret(tokenSecret);\n\tconsumerToken.setNonce(requestToken.getNonce());\n\tconsumerToken.setResourceId(details.getId());\n\tconsumerToken.setAccessToken(isAccessToken);...\n\treturn consumerToken;\n}","Distance":0.125,"Automatic":"protected OAuthConsumerToken getTokenFromProvider(ProtectedResourceDetails details,URL tokenURL,String httpMethod,OAuthConsumerToken requestToken,Map<String,String> additionalParameters){\n\tboolean isAccessToken=requestToken != null;\n\tif(!isAccessToken){\n\t\trequestToken=new OAuthConsumerToken();\n\t\trequestToken.setNonce(getNonceFactory().generateNonce());\n\t}\n\tInputStream inputStream=readResource(details,tokenURL,httpMethod,requestToken,additionalParameters);\n\tString tokenInfo;\n\ttry {\n\t\tByteArrayOutputStream out=new ByteArrayOutputStream();\n\t\tbyte[] buffer=new byte[1024];\n\t\tint len=inputStream.read(buffer);...\n\t} catch (IOException e){...\n\t} \n\tStringTokenizer tokenProperties=new StringTokenizer(tokenInfo,\"&\");\n\tMap<String,String> tokenPropertyValues=new TreeMap<String,String>();\n\twhile(tokenProperties.hasMoreElements()){\n\t\ttry {\n\t\t\tString tokenProperty=(String)tokenProperties.nextElement();\n\t\t\tint equalsIndex=tokenProperty.indexOf('=');\n\t\t\tif(equalsIndex > 0){\n\t\t\t\tString propertyName=OAuthCodec.oauthDecode(tokenProperty.substring(0,equalsIndex));\n\t\t\t\tString propertyValue=OAuthCodec.oauthDecode(tokenProperty.substring(equalsIndex + 1));\n\t\t\t\ttokenPropertyValues.put(propertyName,propertyValue);\n\t\t\t}else {\n\t\t\t\ttokenProperty=OAuthCodec.oauthDecode(tokenProperty);\n\t\t\t\ttokenPropertyValues.put(tokenProperty,null);\n\t\t\t}\n\t\t} catch (DecoderException e){...\n\t\t} \n\t}\n\tString tokenValue=tokenPropertyValues.remove(OAuthProviderParameter.oauth_token.toString());...\n\tString tokenSecret=tokenPropertyValues.remove(OAuthProviderParameter.oauth_token_secret.toString());...\n\tOAuthConsumerToken consumerToken=new OAuthConsumerToken();\n\tconsumerToken.setValue(tokenValue);\n\tconsumerToken.setSecret(tokenSecret);\n\tconsumerToken.setNonce(requestToken.getNonce());\n\tconsumerToken.setResourceId(details.getId());\n\tconsumerToken.setAccessToken(isAccessToken);...\n\treturn consumerToken;\n}"},{"Origin":"protected void retrieveToken(OAuthConsumer consumer,String endpointUrl,HttpParameters customOAuthParams) throws OAuthMessageSignerException, OAuthCommunicationException, OAuthNotAuthorizedException, OAuthExpectationFailedException {\n\tMap<String,String> defaultHeaders=getRequestHeaders();\n\tif(consumer.getConsumerKey() == null || consumer.getConsumerSecret() == null){\n\t\tthrow new OAuthExpectationFailedException(\"Consumer key or secret not set\");\n\t}\n\tHttpRequest request=null;\n\tHttpResponse response=null;\n\ttry {\n\t\trequest=createRequest(endpointUrl);\n\t\tfor (String header : defaultHeaders.keySet()){\n\t\t\trequest.setHeader(header,defaultHeaders.get(header));\n\t\t}\n\t\tif(customOAuthParams != null && !customOAuthParams.isEmpty()){\n\t\t\tconsumer.setAdditionalParameters(customOAuthParams);\n\t\t}\n\t\tif(this.listener != null){\n\t\t\tthis.listener.prepareRequest(request);\n\t\t}\n\t\tconsumer.sign(request);\n\t\tif(this.listener != null){\n\t\t\tthis.listener.prepareSubmission(request);\n\t\t}\n\t\tresponse=sendRequest(request);\n\t\tint statusCode=response.getStatusCode();\n\t\tboolean requestHandled=false;\n\t\tif(this.listener != null){\n\t\t\trequestHandled=this.listener.onResponseReceived(request,response);\n\t\t}\n\t\tif(requestHandled){\n\t\t\treturn;\n\t\t}\n\t\tif(statusCode >= 300){\n\t\t\thandleUnexpectedResponse(statusCode,response);\n\t\t}\n\t\tHttpParameters responseParams=OAuth.decodeForm(response.getContent());\n\t\tString token=responseParams.getFirst(OAuth.OAUTH_TOKEN);\n\t\tString secret=responseParams.getFirst(OAuth.OAUTH_TOKEN_SECRET);\n\t\tresponseParams.remove(OAuth.OAUTH_TOKEN);\n\t\tresponseParams.remove(OAuth.OAUTH_TOKEN_SECRET);\n\t\tsetResponseParameters(responseParams);\n\t\tif(token == null || secret == null){\n\t\t\tthrow new OAuthExpectationFailedException(\"Request token or token secret not set in server reply. \" + \"The service provider you use is probably buggy.\");\n\t\t}\n\t\tconsumer.setTokenWithSecret(token,secret);\n\t} catch (OAuthNotAuthorizedException e){\n\t\tthrow e;\n\t} catch (OAuthExpectationFailedException e){\n\t\tthrow e;\n\t} catch (Exception e){\n\t\tthrow new OAuthCommunicationException(e);\n\t} finally {\n\t\ttry {\n\t\t\tcloseConnection(request,response);\n\t\t} catch (Exception e){\n\t\t\tthrow new OAuthCommunicationException(e);\n\t\t} \n\t} \n}","Original_Lines":56,"Target_Lines":40,"Manual":"protected void retrieveToken(OAuthConsumer consumer,String endpointUrl,HttpParameters customOAuthParams) throws OAuthMessageSignerException, OAuthCommunicationException, OAuthNotAuthorizedException, OAuthExpectationFailedException {\n\tMap<String,String> defaultHeaders=getRequestHeaders();...\n\tHttpRequest request=null;\n\tHttpResponse response=null;\n\ttry {\n\t\trequest=createRequest(endpointUrl);\n\t\tfor (String header : defaultHeaders.keySet()){\n\t\t\trequest.setHeader(header,defaultHeaders.get(header));\n\t\t}\n\t\tif(customOAuthParams != null && !customOAuthParams.isEmpty()){\n\t\t\tconsumer.setAdditionalParameters(customOAuthParams);\n\t\t}\n\t\tif(this.listener != null){\n\t\t\tthis.listener.prepareRequest(request);\n\t\t}\n\t\tconsumer.sign(request);\n\t\tif(this.listener != null){\n\t\t\tthis.listener.prepareSubmission(request);\n\t\t}\n\t\tresponse=sendRequest(request);\n\t\tint statusCode=response.getStatusCode();\n\t\tboolean requestHandled=false;\n\t\tif(this.listener != null){\n\t\t\trequestHandled=this.listener.onResponseReceived(request,response);\n\t\t}...\n\t\tHttpParameters responseParams=OAuth.decodeForm(response.getContent());\n\t\tString token=responseParams.getFirst(OAuth.OAUTH_TOKEN);\n\t\tString secret=responseParams.getFirst(OAuth.OAUTH_TOKEN_SECRET);\n\t\tresponseParams.remove(OAuth.OAUTH_TOKEN);\n\t\tresponseParams.remove(OAuth.OAUTH_TOKEN_SECRET);\n\t\tsetResponseParameters(responseParams);...\n\t\tconsumer.setTokenWithSecret(token,secret);\n\t} catch (OAuthNotAuthorizedException e){...\n\t} catch (OAuthExpectationFailedException e){...\n\t} catch (Exception e){...\n\t} finally {\n\t\ttry {\n\t\t\tcloseConnection(request,response);\n\t\t} catch (Exception e){...\n\t\t} \n\t} \n}","Distance":0.21875,"Automatic":"protected void retrieveToken(OAuthConsumer consumer,String endpointUrl,HttpParameters customOAuthParams) throws OAuthMessageSignerException, OAuthCommunicationException, OAuthNotAuthorizedException, OAuthExpectationFailedException {\n\tMap<String,String> defaultHeaders=getRequestHeaders();...\n\tHttpRequest request=null;\n\tHttpResponse response=null;\n\ttry {\n\t\trequest=createRequest(endpointUrl);\n\t\tfor (String header : defaultHeaders.keySet()){\n\t\t\trequest.setHeader(header,defaultHeaders.get(header));\n\t\t}\n\t\tif(customOAuthParams != null && !customOAuthParams.isEmpty()){\n\t\t\tconsumer.setAdditionalParameters(customOAuthParams);\n\t\t}\n\t\tif(this.listener != null){\n\t\t\tthis.listener.prepareRequest(request);\n\t\t}\n\t\tconsumer.sign(request);\n\t\tif(this.listener != null){\n\t\t\tthis.listener.prepareSubmission(request);\n\t\t}\n\t\tresponse=sendRequest(request);\n\t\tint statusCode=response.getStatusCode();\n\t\tboolean requestHandled=false;\n\t\tif(this.listener != null){...\n\t\t}\n\t\tif(requestHandled){\n\t\t\treturn;\n\t\t}\n\t\tif(statusCode >= 300){\n\t\t\thandleUnexpectedResponse(statusCode,response);\n\t\t}\n\t\tHttpParameters responseParams=OAuth.decodeForm(response.getContent());\n\t\tString token=responseParams.getFirst(OAuth.OAUTH_TOKEN);\n\t\tString secret=responseParams.getFirst(OAuth.OAUTH_TOKEN_SECRET);\n\t\tresponseParams.remove(OAuth.OAUTH_TOKEN);\n\t\tresponseParams.remove(OAuth.OAUTH_TOKEN_SECRET);\n\t\tsetResponseParameters(responseParams);...\n\t\tconsumer.setTokenWithSecret(token,secret);\n\t} catch (OAuthNotAuthorizedException e){...\n\t} catch (OAuthExpectationFailedException e){...\n\t} catch (Exception e){...\n\t} finally {...\n\t} \n}"},{"Origin":"public DiffScope processDiffUnit(DiffUnit diffUnit,DiffPointProcessor processor){\n\tProperties p1=new Properties();\n\tProperties p2=new Properties();\n\tInputStream is1=null;\n\tInputStream is2=null;\n\ttry {\n\t\tis1=diffUnit.getLeftInputStream();\n\t\tis2=diffUnit.getRightInputStream();\n\t\tp1.load(is1);\n\t\tp2.load(is2);\n\t\tSet<String> keys=new TreeSet<String>();\n\t\tkeys.addAll(p1.stringPropertyNames());\n\t\tkeys.addAll(p2.stringPropertyNames());\n\t\tfor (Iterator<String> it=keys.iterator(); it.hasNext(); ){\n\t\t\tString key=it.next();\n\t\t\tString v1=p1.getProperty(key);\n\t\t\tString v2=p2.getProperty(key);\n\t\t\tif(v1 == null){\n\t\t\t\tDiffPoint diffPoint=new DiffPoint(diffUnit,\"Property in right only: \" + key);\n\t\t\t\tprocessor.processDiffPoint(diffPoint);\n\t\t\t}else if(v2 == null){\n\t\t\t\tDiffPoint diffPoint=new DiffPoint(diffUnit,\"Property in left only: \" + key);\n\t\t\t\tprocessor.processDiffPoint(diffPoint);\n\t\t\t}else if(!v1.equals(v2)){\n\t\t\t\tDiffPoint diffPoint=new DiffPoint(diffUnit,\"Property value mismatch for key \" + key + \": \"+ v1+ \", \"+ v2);\n\t\t\t\tprocessor.processDiffPoint(diffPoint);\n\t\t\t}\n\t\t}\n\t} catch (IOException ioe){\n\t\tlog.error(\"Failure comparing properties file: \" + diffUnit.getScopedPath(),ioe);\n\t} finally {\n\t\tif(is1 != null){\n\t\t\ttry {\n\t\t\t\tis1.close();\n\t\t\t} catch (Exception ex){\n\t\t\t} \n\t\t}\n\t\tif(is2 != null){\n\t\t\ttry {\n\t\t\t\tis2.close();\n\t\t\t} catch (Exception ex){\n\t\t\t} \n\t\t}\n\t} \n\treturn null;\n}","Original_Lines":44,"Target_Lines":26,"Manual":"public DiffScope processDiffUnit(DiffUnit diffUnit,DiffPointProcessor processor){...\n\ttry {\n\t\tis1=diffUnit.getLeftInputStream();\n\t\tis2=diffUnit.getRightInputStream();\n\t\tp1.load(is1);\n\t\tp2.load(is2);\n\t\tSet<String> keys=new TreeSet<String>();\n\t\tkeys.addAll(p1.stringPropertyNames());\n\t\tkeys.addAll(p2.stringPropertyNames());\n\t\tfor (Iterator<String> it=keys.iterator(); it.hasNext(); ){\n\t\t\tString key=it.next();\n\t\t\tString v1=p1.getProperty(key);\n\t\t\tString v2=p2.getProperty(key);\n\t\t\tif(v1 == null){\n\t\t\t\tDiffPoint diffPoint=new DiffPoint(diffUnit,\"Property in right only: \" + key);\n\t\t\t\tprocessor.processDiffPoint(diffPoint);\n\t\t\t}else if(v2 == null){\n\t\t\t\tDiffPoint diffPoint=new DiffPoint(diffUnit,\"Property in left only: \" + key);\n\t\t\t\tprocessor.processDiffPoint(diffPoint);\n\t\t\t}else if(!v1.equals(v2)){\n\t\t\t\tDiffPoint diffPoint=new DiffPoint(diffUnit,\"Property value mismatch for key \" + key + \": \"+ v1+ \", \"+ v2);\n\t\t\t\tprocessor.processDiffPoint(diffPoint);\n\t\t\t}\n\t\t}\n\t} catch (IOException ioe){...\n\t} finally {...\n\t} ...\n}","Distance":0.28,"Automatic":"public DiffScope processDiffUnit(DiffUnit diffUnit,DiffPointProcessor processor){\n\tProperties p1=new Properties();\n\tProperties p2=new Properties();\n\tInputStream is1=null;\n\tInputStream is2=null;\n\ttry {\n\t\tis1=diffUnit.getLeftInputStream();\n\t\tis2=diffUnit.getRightInputStream();\n\t\tp1.load(is1);\n\t\tp2.load(is2);\n\t\tSet<String> keys=new TreeSet<String>();\n\t\tkeys.addAll(p1.stringPropertyNames());\n\t\tkeys.addAll(p2.stringPropertyNames());\n\t\tfor (Iterator<String> it=keys.iterator(); it.hasNext(); ){\n\t\t\tString key=it.next();\n\t\t\tString v1=p1.getProperty(key);\n\t\t\tString v2=p2.getProperty(key);\n\t\t\tif(v1 == null){\n\t\t\t\tDiffPoint diffPoint=new DiffPoint(diffUnit,\"Property in right only: \" + key);\n\t\t\t\tprocessor.processDiffPoint(diffPoint);\n\t\t\t}else if(v2 == null){\n\t\t\t\tDiffPoint diffPoint=new DiffPoint(diffUnit,\"Property in left only: \" + key);\n\t\t\t\tprocessor.processDiffPoint(diffPoint);\n\t\t\t}else if ...\n\t\t}\n\t} catch (IOException ioe){...\n\t} finally {...\n\t} ...\n}"},{"Origin":"public DiffScope processDiffUnit(DiffUnit diffUnit,DiffPointProcessor processor){\n\tDiffScope scope=null;\n\tif(diffUnit instanceof XMLDocumentDiffUnit){\n\t\tXMLDocumentDiffUnit du=(XMLDocumentDiffUnit)diffUnit;\n\t\tDocumentType dt1=du.getLeftDoctype();\n\t\tDocumentType dt2=du.getRightDoctype();\n\t\tprocess(diffUnit,dt1,dt2,processor);\n\t}else if(diffUnit instanceof XMLNodeDiffUnit){\n\t\tXMLNodeDiffUnit du=(XMLNodeDiffUnit)diffUnit;\n\t\tNode n1=du.getLeftNode();\n\t\tNode n2=du.getRightNode();\n\t\tif(n1 != null && n2 != null){\n\t\t\tString v1=n1.getNodeValue();\n\t\t\tString v2=n2.getNodeValue();\n\t\t\tif(v1 != null && v2 != null){\n\t\t\t\tif(!v1.equals(v2)){\n\t\t\t\t\tDiffPoint diffPoint=new DiffPoint(diffUnit,\"Node value mismatch: \" + v1 + \", \"+ v2);\n\t\t\t\t\tprocessor.processDiffPoint(diffPoint);\n\t\t\t\t}\n\t\t\t}else if(v1 == null && v2 != null){\n\t\t\t\tDiffPoint diffPoint=new DiffPoint(diffUnit,\"Node value present in right only\");\n\t\t\t\tprocessor.processDiffPoint(diffPoint);\n\t\t\t}else if(v1 != null && v2 == null){\n\t\t\t\tDiffPoint diffPoint=new DiffPoint(diffUnit,\"Node value present in left only\");\n\t\t\t\tprocessor.processDiffPoint(diffPoint);\n\t\t\t}\n\t\t}else if(n1 == null && n2 != null){\n\t\t\tDiffPoint diffPoint=new DiffPoint(diffUnit,\"Node present in right only\");\n\t\t\tprocessor.processDiffPoint(diffPoint);\n\t\t}else if(n1 != null && n2 == null){\n\t\t\tDiffPoint diffPoint=new DiffPoint(diffUnit,\"Node present in left only\");\n\t\t\tprocessor.processDiffPoint(diffPoint);\n\t\t}\n\t}else if(diffUnit instanceof XMLAttributeDiffUnit){\n\t\tXMLAttributeDiffUnit du=(XMLAttributeDiffUnit)diffUnit;\n\t\tString name=du.getAttributeName();\n\t\tif(!du.leftExists()){\n\t\t\tDiffPoint diffPoint=new DiffPoint(diffUnit,\"Attribute present in right only: \" + name);\n\t\t\tprocessor.processDiffPoint(diffPoint);\n\t\t}else if(!du.rightExists()){\n\t\t\tDiffPoint diffPoint=new DiffPoint(diffUnit,\"Attribute present in left only: \" + name);\n\t\t\tprocessor.processDiffPoint(diffPoint);\n\t\t}else {\n\t\t\tNode n1=du.getLeftAttributeNode();\n\t\t\tNode n2=du.getRightAttributeNode();\n\t\t\tString v1=n1.getNodeValue();\n\t\t\tString v2=n2.getNodeValue();\n\t\t\tif(!v1.equals(v2)){\n\t\t\t\tDiffPoint diffPoint=new DiffPoint(diffUnit,\"Attribute value mismatch for \" + name + \":\"+ v1+ \", \"+ v2);\n\t\t\t\tprocessor.processDiffPoint(diffPoint);\n\t\t\t}\n\t\t}\n\t}else {\n\t\ttry {\n\t\t\tInputStream is1=diffUnit.getLeftInputStream();\n\t\t\tInputStream is2=diffUnit.getRightInputStream();\n\t\t\tString scopedPath=diffUnit.getScopedPath();\n\t\t\tscope=createScope(scopedPath,is1,is2);\n\t\t} catch (IOException ioe){\n\t\t\tlog.error(\"Failure processing \" + diffUnit,ioe);\n\t\t} \n\t}\n\treturn scope;\n}","Original_Lines":62,"Target_Lines":53,"Manual":"public DiffScope processDiffUnit(DiffUnit diffUnit,DiffPointProcessor processor){\n\tDiffScope scope=null;\n\tif(diffUnit instanceof XMLDocumentDiffUnit){\n\t\tXMLDocumentDiffUnit du=(XMLDocumentDiffUnit)diffUnit;...\n\t\tprocess(diffUnit,dt1,dt2,processor);\n\t}else if(diffUnit instanceof XMLNodeDiffUnit){\n\t\tXMLNodeDiffUnit du=(XMLNodeDiffUnit)diffUnit;...\n\t\tif(n1 != null && n2 != null){...\n\t\t\tif(v1 != null && v2 != null){\n\t\t\t\tif(!v1.equals(v2)){\n\t\t\t\t\tDiffPoint diffPoint=new DiffPoint(diffUnit,\"Node value mismatch: \" + v1 + \", \"+ v2);\n\t\t\t\t\tprocessor.processDiffPoint(diffPoint);\n\t\t\t\t}\n\t\t\t}else if(v1 == null && v2 != null){\n\t\t\t\tDiffPoint diffPoint=new DiffPoint(diffUnit,\"Node value present in right only\");\n\t\t\t\tprocessor.processDiffPoint(diffPoint);\n\t\t\t}else if(v1 != null && v2 == null){\n\t\t\t\tDiffPoint diffPoint=new DiffPoint(diffUnit,\"Node value present in left only\");\n\t\t\t\tprocessor.processDiffPoint(diffPoint);\n\t\t\t}\n\t\t}else if(n1 == null && n2 != null){\n\t\t\tDiffPoint diffPoint=new DiffPoint(diffUnit,\"Node present in right only\");\n\t\t\tprocessor.processDiffPoint(diffPoint);\n\t\t}else if(n1 != null && n2 == null){\n\t\t\tDiffPoint diffPoint=new DiffPoint(diffUnit,\"Node present in left only\");\n\t\t\tprocessor.processDiffPoint(diffPoint);\n\t\t}\n\t}else if(diffUnit instanceof XMLAttributeDiffUnit){\n\t\tXMLAttributeDiffUnit du=(XMLAttributeDiffUnit)diffUnit;\n\t\tString name=du.getAttributeName();\n\t\tif(!du.leftExists()){\n\t\t\tDiffPoint diffPoint=new DiffPoint(diffUnit,\"Attribute present in right only: \" + name);\n\t\t\tprocessor.processDiffPoint(diffPoint);\n\t\t}else if(!du.rightExists()){\n\t\t\tDiffPoint diffPoint=new DiffPoint(diffUnit,\"Attribute present in left only: \" + name);\n\t\t\tprocessor.processDiffPoint(diffPoint);\n\t\t}else {\n\t\t\tNode n1=du.getLeftAttributeNode();\n\t\t\tNode n2=du.getRightAttributeNode();\n\t\t\tString v1=n1.getNodeValue();\n\t\t\tString v2=n2.getNodeValue();\n\t\t\tif(!v1.equals(v2)){\n\t\t\t\tDiffPoint diffPoint=new DiffPoint(diffUnit,\"Attribute value mismatch for \" + name + \":\"+ v1+ \", \"+ v2);\n\t\t\t\tprocessor.processDiffPoint(diffPoint);\n\t\t\t}\n\t\t}\n\t}else {\n\t\ttry {...\n\t\t\tString scopedPath=diffUnit.getScopedPath();\n\t\t\tscope=createScope(scopedPath,is1,is2);\n\t\t} catch (IOException ioe){...\n\t\t} \n\t}\n\treturn scope;\n}","Distance":0.20408163265306123,"Automatic":"public DiffScope processDiffUnit(DiffUnit diffUnit,DiffPointProcessor processor){\n\tDiffScope scope=null;\n\tif(diffUnit instanceof XMLDocumentDiffUnit){\n\t\tXMLDocumentDiffUnit du=(XMLDocumentDiffUnit)diffUnit;...\n\t\tprocess(diffUnit,dt1,dt2,processor);\n\t}else if(diffUnit instanceof XMLNodeDiffUnit){\n\t\tXMLNodeDiffUnit du=(XMLNodeDiffUnit)diffUnit;\n\t\tNode n1=du.getLeftNode();\n\t\tNode n2=du.getRightNode();\n\t\tif(n1 != null && n2 != null){\n\t\t\tString v1=n1.getNodeValue();\n\t\t\tString v2=n2.getNodeValue();\n\t\t\tif(v1 != null && v2 != null){\n\t\t\t\tif(!v1.equals(v2)){\n\t\t\t\t\tDiffPoint diffPoint=new DiffPoint(diffUnit,\"Node value mismatch: \" + v1 + \", \"+ v2);\n\t\t\t\t\tprocessor.processDiffPoint(diffPoint);\n\t\t\t\t}\n\t\t\t}else if(v1 == null && v2 != null){\n\t\t\t\tDiffPoint diffPoint=new DiffPoint(diffUnit,\"Node value present in right only\");\n\t\t\t\tprocessor.processDiffPoint(diffPoint);\n\t\t\t}else if(v1 != null && v2 == null){\n\t\t\t\tDiffPoint diffPoint=new DiffPoint(diffUnit,\"Node value present in left only\");\n\t\t\t\tprocessor.processDiffPoint(diffPoint);\n\t\t\t}\n\t\t}else if(n1 == null && n2 != null){\n\t\t\tDiffPoint diffPoint=new DiffPoint(diffUnit,\"Node present in right only\");\n\t\t\tprocessor.processDiffPoint(diffPoint);\n\t\t}else if(n1 != null && n2 == null){\n\t\t\tDiffPoint diffPoint=new DiffPoint(diffUnit,\"Node present in left only\");\n\t\t\tprocessor.processDiffPoint(diffPoint);\n\t\t}\n\t}else if(diffUnit instanceof XMLAttributeDiffUnit){\n\t\tXMLAttributeDiffUnit du=(XMLAttributeDiffUnit)diffUnit;\n\t\tString name=du.getAttributeName();\n\t\tif(!du.leftExists()){\n\t\t\tDiffPoint diffPoint=new DiffPoint(diffUnit,\"Attribute present in right only: \" + name);\n\t\t\tprocessor.processDiffPoint(diffPoint);\n\t\t}else if(!du.rightExists()){\n\t\t\tDiffPoint diffPoint=new DiffPoint(diffUnit,\"Attribute present in left only: \" + name);\n\t\t\tprocessor.processDiffPoint(diffPoint);\n\t\t}else {\n\t\t\tNode n1=du.getLeftAttributeNode();\n\t\t\tNode n2=du.getRightAttributeNode();\n\t\t\tString v1=n1.getNodeValue();\n\t\t\tString v2=n2.getNodeValue();...\n\t\t}\n\t}else {\n\t\ttry {\n\t\t\tInputStream is1=diffUnit.getLeftInputStream();\n\t\t\tInputStream is2=diffUnit.getRightInputStream();\n\t\t\tString scopedPath=diffUnit.getScopedPath();\n\t\t\tscope=createScope(scopedPath,is1,is2);\n\t\t} catch (IOException ioe){...\n\t\t} \n\t}...\n}"}],"ObjectiveFunctionValue":0.21901422688355252,"Iterations":100000}