{"result":[{"Origin":"private static NodePointer doStepPredicatesStandard(EvalContext context,NodePointer parent,Step[] steps,int currentStep){\n\tStep step=steps[currentStep];\n\tExpression[] predicates=step.getPredicates();\n\tint axis=step.getAxis();\n\tif(axis == Compiler.AXIS_SELF){\n\t\treturn doPredicate(context,parent,steps,currentStep,predicates,0);\n\t}\n\tExpression predicate=predicates[0];\n\tif(predicates.length == 1){\n\t\tNodeIterator it=getNodeIterator(context,parent,step);\n\t\tNodePointer pointer=null;\n\t\tif(it != null){\n\t\t\tif(predicate instanceof NameAttributeTest){\n\t\t\t\tString key=keyFromPredicate(context,predicate);\n\t\t\t\tfor (int i=1; it.setPosition(i); i++){\n\t\t\t\t\tNodePointer ptr=it.getNodePointer();\n\t\t\t\t\tif(isNameAttributeEqual(ptr,key)){\n\t\t\t\t\t\tpointer=ptr;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}else {\n\t\t\t\tint index=indexFromPredicate(context,predicate);\n\t\t\t\tif(it.setPosition(index + 1)){\n\t\t\t\t\tpointer=it.getNodePointer();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(pointer != null){\n\t\t\treturn doStep(context,pointer,steps,currentStep + 1);\n\t\t}\n\t}else {\n\t\tNodeIterator it=getNodeIterator(context,parent,step);\n\t\tif(it != null){\n\t\t\tList list=new ArrayList();\n\t\t\tfor (int i=1; it.setPosition(i); i++){\n\t\t\t\tlist.add(it.getNodePointer());\n\t\t\t}\n\t\t\tNodePointer pointer=doPredicatesStandard(context,list,steps,currentStep,predicates,0);\n\t\t\tif(pointer != null){\n\t\t\t\treturn pointer;\n\t\t\t}\n\t\t}\n\t}\n\treturn createNullPointer(context,parent,steps,currentStep);\n}","a50":"private static NodePointer doStepPredicatesStandard(EvalContext context,NodePointer parent,Step[] steps,int currentStep){\n\tStep step=steps[currentStep];\n\tExpression[] predicates=step.getPredicates();...\n\tif(axis == Compiler.AXIS_SELF){\n\t\treturn doPredicate(context,parent,steps,currentStep,predicates,0);\n\t}\n\tExpression predicate=predicates[0];\n\tif(predicates.length == 1){\n\t\tNodeIterator it=getNodeIterator(context,parent,step);\n\t\tNodePointer pointer=null;\n\t\tif(it != null){\n\t\t\tif(predicate instanceof NameAttributeTest){...\n\t\t\t\tfor (int i=1; it.setPosition(i); i++){\n\t\t\t\t\tNodePointer ptr=it.getNodePointer();...\n\t\t\t\t}\n\t\t\t}else {\n\t\t\t\tint index=indexFromPredicate(context,predicate);...\n\t\t\t}\n\t\t}\n\t\tif(pointer != null){\n\t\t\treturn doStep(context,pointer,steps,currentStep + 1);\n\t\t}\n\t}else {\n\t\tNodeIterator it=getNodeIterator(context,parent,step);...\n\t}\n\treturn createNullPointer(context,parent,steps,currentStep);\n}","a20":"private static NodePointer doStepPredicatesStandard(EvalContext context,NodePointer parent,Step[] steps,int currentStep){\n\tStep step=steps[currentStep];...\n\tif(predicates.length == 1){\n\t\tNodeIterator it=getNodeIterator(context,parent,step);...\n\t\tif(it != null){\n\t\t\tif(predicate instanceof NameAttributeTest){...\n\t\t\t}else {...\n\t\t\t}\n\t\t}...\n\t}else {...\n\t}\n\treturn createNullPointer(context,parent,steps,currentStep);\n}"},{"Origin":"private static NodePointer doPredicateName(EvalContext context,NodePointer parent,Step[] steps,int currentStep,Expression[] predicates,int currentPredicate){\n\tExpression predicate=predicates[currentPredicate];\n\tString key=keyFromPredicate(context,predicate);\n\tNodePointer child=valuePointer(parent);\n\tif(child instanceof PropertyOwnerPointer){\n\t\tPropertyPointer pointer=((PropertyOwnerPointer)child).getPropertyPointer();\n\t\tpointer.setPropertyName(key);\n\t\tif(pointer.isActual()){\n\t\t\treturn doPredicate(context,pointer,steps,currentStep,predicates,currentPredicate + 1);\n\t\t}\n\t}else if(child.isCollection()){\n\t\tNodePointer bestMatch=null;\n\t\tint bestQuality=0;\n\t\tchild=(NodePointer)child.clone();\n\t\tint count=child.getLength();\n\t\tfor (int i=0; i < count; i++){\n\t\t\tchild.setIndex(i);\n\t\t\tNodePointer valuePointer=valuePointer(child);\n\t\t\tNodePointer pointer;\n\t\t\tif((valuePointer instanceof PropertyOwnerPointer) || valuePointer.isCollection()){\n\t\t\t\tpointer=doPredicateName(context,valuePointer,steps,currentStep,predicates,currentPredicate);\n\t\t\t}else if(isNameAttributeEqual(valuePointer,key)){\n\t\t\t\tpointer=doPredicate(context,valuePointer,steps,currentStep,predicates,currentPredicate + 1);\n\t\t\t}else {\n\t\t\t\tpointer=null;\n\t\t\t}\n\t\t\tif(pointer != null){\n\t\t\t\tint quality=computeQuality(pointer);\n\t\t\t\tif(quality == PERFECT_MATCH){\n\t\t\t\t\treturn pointer;\n\t\t\t\t}\n\t\t\t\tif(quality > bestQuality){\n\t\t\t\t\tbestMatch=(NodePointer)pointer.clone();\n\t\t\t\t\tbestQuality=quality;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(bestMatch != null){\n\t\t\treturn bestMatch;\n\t\t}\n\t}else {\n\t\tNodePointer found=doPredicatesStandard(context,Collections.singletonList(child),steps,currentStep,predicates,currentPredicate);\n\t\tif(found != null){\n\t\t\treturn found;\n\t\t}\n\t}\n\treturn createNullPointerForPredicates(context,child,steps,currentStep,predicates,currentPredicate);\n}","a50":"private static NodePointer doPredicateName(EvalContext context,NodePointer parent,Step[] steps,int currentStep,Expression[] predicates,int currentPredicate){\n\tExpression predicate=predicates[currentPredicate];\n\tString key=keyFromPredicate(context,predicate);\n\tNodePointer child=valuePointer(parent);\n\tif(child instanceof PropertyOwnerPointer){\n\t\tPropertyPointer pointer=((PropertyOwnerPointer)child).getPropertyPointer();...\n\t\tif(pointer.isActual()){\n\t\t\treturn doPredicate(context,pointer,steps,currentStep,predicates,currentPredicate + 1);\n\t\t}\n\t}else if(child.isCollection()){...\n\t\tfor (int i=0; i < count; i++){...\n\t\t\tNodePointer valuePointer=valuePointer(child);\n\t\t\tNodePointer pointer;\n\t\t\tif((valuePointer instanceof PropertyOwnerPointer) || valuePointer.isCollection()){\n\t\t\t\tpointer=doPredicateName(context,valuePointer,steps,currentStep,predicates,currentPredicate);\n\t\t\t}else if(isNameAttributeEqual(valuePointer,key)){\n\t\t\t\tpointer=doPredicate(context,valuePointer,steps,currentStep,predicates,currentPredicate + 1);\n\t\t\t}else {\n\t\t\t\tpointer=null;\n\t\t\t}\n\t\t\tif(pointer != null){...\n\t\t\t}\n\t\t}...\n\t}else {\n\t\tNodePointer found=doPredicatesStandard(context,Collections.singletonList(child),steps,currentStep,predicates,currentPredicate);...\n\t}\n\treturn createNullPointerForPredicates(context,child,steps,currentStep,predicates,currentPredicate);\n}","a20":"private static NodePointer doPredicateName(EvalContext context,NodePointer parent,Step[] steps,int currentStep,Expression[] predicates,int currentPredicate){...\n\tNodePointer child=valuePointer(parent);\n\tif(child instanceof PropertyOwnerPointer){...\n\t}else if(child.isCollection()){...\n\t\tfor (int i=0; i < count; i++){...\n\t\t\tNodePointer pointer;\n\t\t\tif((valuePointer instanceof PropertyOwnerPointer) || valuePointer.isCollection()){\n\t\t\t\tpointer=doPredicateName(context,valuePointer,steps,currentStep,predicates,currentPredicate);\n\t\t\t}else if ......\n\t\t}...\n\t}else {...\n\t}\n\treturn createNullPointerForPredicates(context,child,steps,currentStep,predicates,currentPredicate);\n}"},{"Origin":"private static NodePointer doPredicatesStandard(EvalContext context,List parents,Step[] steps,int currentStep,Expression[] predicates,int currentPredicate){\n\tif(parents.size() == 0){\n\t\treturn null;\n\t}\n\tif(currentPredicate == predicates.length){\n\t\tNodePointer pointer=(NodePointer)parents.get(0);\n\t\treturn doStep(context,pointer,steps,currentStep + 1);\n\t}\n\tExpression predicate=predicates[currentPredicate];\n\tif(predicate instanceof NameAttributeTest){\n\t\tString key=keyFromPredicate(context,predicate);\n\t\tList newList=new ArrayList();\n\t\tfor (int i=0; i < parents.size(); i++){\n\t\t\tNodePointer pointer=(NodePointer)parents.get(i);\n\t\t\tif(isNameAttributeEqual(pointer,key)){\n\t\t\t\tnewList.add(pointer);\n\t\t\t}\n\t\t}\n\t\tif(newList.size() == 0){\n\t\t\treturn null;\n\t\t}\n\t\treturn doPredicatesStandard(context,newList,steps,currentStep,predicates,currentPredicate + 1);\n\t}else {\n\t\tint index=indexFromPredicate(context,predicate);\n\t\tif(index < 0 || index >= parents.size()){\n\t\t\treturn null;\n\t\t}\n\t\tNodePointer ptr=(NodePointer)parents.get(index);\n\t\treturn doPredicate(context,ptr,steps,currentStep,predicates,currentPredicate + 1);\n\t}\n}","a50":"private static NodePointer doPredicatesStandard(EvalContext context,List parents,Step[] steps,int currentStep,Expression[] predicates,int currentPredicate){...\n\tif(currentPredicate == predicates.length){\n\t\tNodePointer pointer=(NodePointer)parents.get(0);\n\t\treturn doStep(context,pointer,steps,currentStep + 1);\n\t}\n\tExpression predicate=predicates[currentPredicate];\n\tif(predicate instanceof NameAttributeTest){\n\t\tString key=keyFromPredicate(context,predicate);\n\t\tList newList=new ArrayList();\n\t\tfor (int i=0; i < parents.size(); i++){\n\t\t\tNodePointer pointer=(NodePointer)parents.get(i);...\n\t\t}...\n\t\treturn doPredicatesStandard(context,newList,steps,currentStep,predicates,currentPredicate + 1);\n\t}else {\n\t\tint index=indexFromPredicate(context,predicate);...\n\t\tNodePointer ptr=(NodePointer)parents.get(index);\n\t\treturn doPredicate(context,ptr,steps,currentStep,predicates,currentPredicate + 1);\n\t}\n}","a20":"private static NodePointer doPredicatesStandard(EvalContext context,List parents,Step[] steps,int currentStep,Expression[] predicates,int currentPredicate){...\n\tExpression predicate=predicates[currentPredicate];\n\tif(predicate instanceof NameAttributeTest){...\n\t\tfor (int i=0; i < parents.size(); i++){...\n\t\t}...\n\t\treturn doPredicatesStandard(context,newList,steps,currentStep,predicates,currentPredicate + 1);\n\t}else {...\n\t\treturn doPredicate(context,ptr,steps,currentStep,predicates,currentPredicate + 1);\n\t}\n}"},{"Origin":"private static NodePointer doStepNoPredicatesPropertyOwner(EvalContext context,PropertyOwnerPointer parentPointer,Step[] steps,int currentStep){\n\tStep step=steps[currentStep];\n\tNodePointer childPointer=createChildPointerForStep(parentPointer,step);\n\tif(childPointer == null){\n\t\treturn null;\n\t}\n\tif(!childPointer.isActual()){\n\t\treturn createNullPointer(context,parentPointer,steps,currentStep);\n\t}\n\tif(currentStep == steps.length - 1){\n\t\treturn childPointer;\n\t}\n\tif(childPointer.isCollection()){\n\t\tint bestQuality=0;\n\t\tchildPointer=(NodePointer)childPointer.clone();\n\t\tNodePointer bestMatch=null;\n\t\tint count=childPointer.getLength();\n\t\tfor (int i=0; i < count; i++){\n\t\t\tchildPointer.setIndex(i);\n\t\t\tNodePointer pointer=doStep(context,childPointer,steps,currentStep + 1);\n\t\t\tint quality=computeQuality(pointer);\n\t\t\tif(quality == PERFECT_MATCH){\n\t\t\t\treturn pointer;\n\t\t\t}else if(quality > bestQuality){\n\t\t\t\tbestQuality=quality;\n\t\t\t\tbestMatch=(NodePointer)pointer.clone();\n\t\t\t}\n\t\t}\n\t\tif(bestMatch != null){\n\t\t\treturn bestMatch;\n\t\t}\n\t\treturn createNullPointer(context,childPointer,steps,currentStep);\n\t}\n\treturn doStep(context,childPointer,steps,currentStep + 1);\n}","a50":"private static NodePointer doStepNoPredicatesPropertyOwner(EvalContext context,PropertyOwnerPointer parentPointer,Step[] steps,int currentStep){\n\tStep step=steps[currentStep];\n\tNodePointer childPointer=createChildPointerForStep(parentPointer,step);...\n\tif(!childPointer.isActual()){\n\t\treturn createNullPointer(context,parentPointer,steps,currentStep);\n\t}\n\tif(currentStep == steps.length - 1){\n\t\treturn childPointer;\n\t}\n\tif(childPointer.isCollection()){...\n\t\tint count=childPointer.getLength();\n\t\tfor (int i=0; i < count; i++){...\n\t\t\tNodePointer pointer=doStep(context,childPointer,steps,currentStep + 1);...\n\t\t\tif(quality == PERFECT_MATCH){\n\t\t\t\treturn pointer;\n\t\t\t}else if ...\n\t\t}...\n\t\treturn createNullPointer(context,childPointer,steps,currentStep);\n\t}\n\treturn doStep(context,childPointer,steps,currentStep + 1);\n}","a20":"private static NodePointer doStepNoPredicatesPropertyOwner(EvalContext context,PropertyOwnerPointer parentPointer,Step[] steps,int currentStep){\n\tStep step=steps[currentStep];\n\tNodePointer childPointer=createChildPointerForStep(parentPointer,step);...\n\tif(childPointer.isCollection()){...\n\t\tfor (int i=0; i < count; i++){...\n\t\t\tNodePointer pointer=doStep(context,childPointer,steps,currentStep + 1);...\n\t\t}...\n\t\treturn createNullPointer(context,childPointer,steps,currentStep);\n\t}\n\treturn doStep(context,childPointer,steps,currentStep + 1);\n}"},{"Origin":"private boolean authenticate(String user,String passwd) throws MessagingException {\n\tString mechs=session.getProperty(\"mail.\" + name + \".auth.mechanisms\");\n\tif(mechs == null)\n\t\tmechs=defaultAuthenticationMechanisms;\n\tString authzid=getAuthorizationId();\n\tif(authzid == null)\n\t\tauthzid=user;\n\tif(enableSASL){\n\t\tif(debug)\n\t\t\tout.println(\"DEBUG SMTP: Authenticate with SASL\");\n\t\tif(sasllogin(getSASLMechanisms(),getSASLRealm(),authzid,user,passwd))\n\t\t\treturn true;\n\t\tif(debug)\n\t\t\tout.println(\"DEBUG SMTP: SASL authentication failed\");\n\t}\n\tif(debug){\n\t\tout.println(\"DEBUG SMTP: Attempt to authenticate\");\n\t\tout.println(\"DEBUG SMTP: check mechanisms: \" + mechs);\n\t}\n\tStringTokenizer st=new StringTokenizer(mechs);\n\twhile(st.hasMoreTokens()){\n\t\tString m=st.nextToken();\n\t\tString dprop=\"mail.\" + name + \".auth.\"+ m.toLowerCase(Locale.ENGLISH)+ \".disable\";\n\t\tboolean disabled=PropUtil.getBooleanSessionProperty(session,dprop,false);\n\t\tif(disabled){\n\t\t\tif(debug)\n\t\t\t\tout.println(\"DEBUG SMTP: mechanism \" + m + \" disabled by property: \"+ dprop);\n\t\t\tcontinue;\n\t\t}\n\t\tm=m.toUpperCase(Locale.ENGLISH);\n\t\tif(!supportsAuthentication(m)){\n\t\t\tif(debug)\n\t\t\t\tout.println(\"DEBUG SMTP: mechanism \" + m + \" not supported by server\");\n\t\t\tcontinue;\n\t\t}\n\t\tAuthenticator a=(Authenticator)authenticators.get(m);\n\t\tif(a == null){\n\t\t\tif(debug)\n\t\t\t\tout.println(\"DEBUG SMTP: \" + \"no authenticator for mechanism \" + m);\n\t\t\tcontinue;\n\t\t}\n\t\treturn a.authenticate(host,authzid,user,passwd);\n\t}\n\tthrow new AuthenticationFailedException(\"No authentication mechansims supported by both server and client\");\n}","a50":"private boolean authenticate(String user,String passwd) throws MessagingException {\n\tString mechs=session.getProperty(\"mail.\" + name + \".auth.mechanisms\");...\n\tString authzid=getAuthorizationId();\n\tif(authzid == null)\n\t\tauthzid=user;\n\tif(enableSASL){...\n\t\tif(sasllogin(getSASLMechanisms(),getSASLRealm(),authzid,user,passwd))\n\t\t\treturn true;...\n\t}...\n\tStringTokenizer st=new StringTokenizer(mechs);\n\twhile(st.hasMoreTokens()){\n\t\tString m=st.nextToken();\n\t\tString dprop=\"mail.\" + name + \".auth.\"+ m.toLowerCase(Locale.ENGLISH)+ \".disable\";\n\t\tboolean disabled=PropUtil.getBooleanSessionProperty(session,dprop,false);\n\t\tif(disabled){...\n\t\t\tcontinue;\n\t\t}\n\t\tm=m.toUpperCase(Locale.ENGLISH);\n\t\tif(!supportsAuthentication(m)){...\n\t\t\tcontinue;\n\t\t}\n\t\tAuthenticator a=(Authenticator)authenticators.get(m);...\n\t\treturn a.authenticate(host,authzid,user,passwd);\n\t}...\n}","a20":"private boolean authenticate(String user,String passwd) throws MessagingException {\n\tString mechs=session.getProperty(\"mail.\" + name + \".auth.mechanisms\");...\n\tString authzid=getAuthorizationId();...\n\tif(enableSASL){...\n\t}...\n\twhile(st.hasMoreTokens()){\n\t\tString m=st.nextToken();\n\t\tString dprop=\"mail.\" + name + \".auth.\"+ m.toLowerCase(Locale.ENGLISH)+ \".disable\";\n\t\tboolean disabled=PropUtil.getBooleanSessionProperty(session,dprop,false);...\n\t\tAuthenticator a=(Authenticator)authenticators.get(m);...\n\t\treturn a.authenticate(host,authzid,user,passwd);\n\t}...\n}"},{"Origin":"public boolean auth(AuthenticatingIMAPClient.AUTH_METHOD method,String username,String password) throws IOException, NoSuchAlgorithmException, InvalidKeyException, InvalidKeySpecException {\n\tif(!IMAPReply.isContinuation(sendCommand(IMAPCommand.AUTHENTICATE,method.getAuthName()))){\n\t\treturn false;\n\t}\n\tswitch (method){\n\tcase PLAIN:{\n\t\tint result=sendData(new String(Base64.encodeBase64((\"\\000\" + username + \"\\000\"+ password).getBytes())));\n\t\tif(result == IMAPReply.OK){\n\t\t\tsetState(IMAP.IMAPState.AUTH_STATE);\n\t\t}\n\t\treturn result == IMAPReply.OK;\n\t}\n\tcase CRAM_MD5:{\n\t\tbyte[] serverChallenge=Base64.decodeBase64(getReplyString().substring(2).trim());\n\t\tMac hmac_md5=Mac.getInstance(\"HmacMD5\");\n\t\thmac_md5.init(new SecretKeySpec(password.getBytes(),\"HmacMD5\"));\n\t\tbyte[] hmacResult=_convertToHexString(hmac_md5.doFinal(serverChallenge)).getBytes();\n\t\tbyte[] usernameBytes=username.getBytes();\n\t\tbyte[] toEncode=new byte[usernameBytes.length + 1 + hmacResult.length];\n\t\tSystem.arraycopy(usernameBytes,0,toEncode,0,usernameBytes.length);\n\t\ttoEncode[usernameBytes.length]=' ';\n\t\tSystem.arraycopy(hmacResult,0,toEncode,usernameBytes.length + 1,hmacResult.length);\n\t\tint result=sendData(new String(Base64.encodeBase64(toEncode)));\n\t\tif(result == IMAPReply.OK){\n\t\t\tsetState(IMAP.IMAPState.AUTH_STATE);\n\t\t}\n\t\treturn result == IMAPReply.OK;\n\t}\n\tcase LOGIN:{\n\t\tif(sendData(new String(Base64.encodeBase64(username.getBytes()))) != IMAPReply.CONT){\n\t\t\treturn false;\n\t\t}\n\t\tint result=sendData(new String(Base64.encodeBase64(password.getBytes())));\n\t\tif(result == IMAPReply.OK){\n\t\t\tsetState(IMAP.IMAPState.AUTH_STATE);\n\t\t}\n\t\treturn result == IMAPReply.OK;\n\t}\n\t}\n\treturn false;\n}","a50":"public boolean auth(AuthenticatingIMAPClient.AUTH_METHOD method,String username,String password) throws IOException, NoSuchAlgorithmException, InvalidKeyException, InvalidKeySpecException {...\n\tswitch (method){\n\tcase PLAIN:{\n\t\tint result=sendData(new String(Base64.encodeBase64((\"\\000\" + username + \"\\000\"+ password).getBytes())));...\n\t\treturn result == IMAPReply.OK;\n\t}\n\tcase CRAM_MD5:{\n\t\tbyte[] serverChallenge=Base64.decodeBase64(getReplyString().substring(2).trim());...\n\t\tbyte[] usernameBytes=username.getBytes();\n\t\tbyte[] toEncode=new byte[usernameBytes.length + 1 + hmacResult.length];...\n\t\ttoEncode[usernameBytes.length]=' ';...\n\t\tint result=sendData(new String(Base64.encodeBase64(toEncode)));...\n\t\treturn result == IMAPReply.OK;\n\t}\n\tcase LOGIN:{...\n\t\tint result=sendData(new String(Base64.encodeBase64(password.getBytes())));...\n\t\treturn result == IMAPReply.OK;\n\t}\n\t}\n\treturn false;\n}","a20":"public boolean auth(AuthenticatingIMAPClient.AUTH_METHOD method,String username,String password) throws IOException, NoSuchAlgorithmException, InvalidKeyException, InvalidKeySpecException {...\n\tswitch (method){\n\tcase PLAIN:{\n\t\tint result=sendData(new String(Base64.encodeBase64((\"\\000\" + username + \"\\000\"+ password).getBytes())));...\n\t}\n\tcase CRAM_MD5:{...\n\t\tbyte[] usernameBytes=username.getBytes();\n\t\tbyte[] toEncode=new byte[usernameBytes.length + 1 + hmacResult.length];...\n\t}\n\tcase LOGIN:{...\n\t}\n\t}...\n}"},{"Origin":"public synchronized void authlogin(String u,String p) throws ProtocolException {\n\tVector v=new Vector();\n\tString tag=null;\n\tResponse r=null;\n\tboolean done=false;\n\ttry {\n\t\tif(noauthdebug){\n\t\t\tout.println(\"DEBUG IMAP: AUTHENTICATE LOGIN command trace suppressed\");\n\t\t\tsuspendTracing();\n\t\t}\n\t\ttry {\n\t\t\ttag=writeCommand(\"AUTHENTICATE LOGIN\",null);\n\t\t} catch (Exception ex){\n\t\t\tr=Response.byeResponse(ex);\n\t\t\tdone=true;\n\t\t} \n\t\tOutputStream os=getOutputStream();\n\t\tByteArrayOutputStream bos=new ByteArrayOutputStream();\n\t\tOutputStream b64os=new BASE64EncoderStream(bos,Integer.MAX_VALUE);\n\t\tboolean first=true;\n\t\twhile(!done){\n\t\t\ttry {\n\t\t\t\tr=readResponse();\n\t\t\t\tif(r.isContinuation()){\n\t\t\t\t\tString s;\n\t\t\t\t\tif(first){\n\t\t\t\t\t\ts=u;\n\t\t\t\t\t\tfirst=false;\n\t\t\t\t\t}else \n\t\t\t\t\t\ts=p;\n\t\t\t\t\tb64os.write(ASCIIUtility.getBytes(s));\n\t\t\t\t\tb64os.flush();\n\t\t\t\t\tbos.write(CRLF);\n\t\t\t\t\tos.write(bos.toByteArray());\n\t\t\t\t\tos.flush();\n\t\t\t\t\tbos.reset();\n\t\t\t\t}else if(r.isTagged() && r.getTag().equals(tag))\n\t\t\t\t\tdone=true;\n\t\t\t\telse if(r.isBYE())\n\t\t\t\t\tdone=true;\n\t\t\t\telse \n\t\t\t\t\tv.addElement(r);\n\t\t\t} catch (Exception ioex){\n\t\t\t\tr=Response.byeResponse(ioex);\n\t\t\t\tdone=true;\n\t\t\t} \n\t\t}\n\t} finally {\n\t\tresumeTracing();\n\t} \n\tResponse[] responses=new Response[v.size()];\n\tv.copyInto(responses);\n\tnotifyResponseHandlers(responses);\n\tif(noauthdebug)\n\t\tout.println(\"DEBUG IMAP: AUTHENTICATE LOGIN command result: \" + r);\n\thandleResult(r);\n\tsetCapabilities(r);\n\tauthenticated=true;\n}","a50":"public synchronized void authlogin(String u,String p) throws ProtocolException {...\n\tString tag=null;\n\tResponse r=null;\n\tboolean done=false;\n\ttry {...\n\t\ttry {...\n\t\t} catch (Exception ex){...\n\t\t} \n\t\tOutputStream os=getOutputStream();\n\t\tByteArrayOutputStream bos=new ByteArrayOutputStream();\n\t\tOutputStream b64os=new BASE64EncoderStream(bos,Integer.MAX_VALUE);\n\t\tboolean first=true;\n\t\twhile(!done){\n\t\t\ttry {\n\t\t\t\tr=readResponse();\n\t\t\t\tif(r.isContinuation()){\n\t\t\t\t\tString s;\n\t\t\t\t\tif(first){\n\t\t\t\t\t\ts=u;...\n\t\t\t\t\t}else \n\t\t\t\t\t\ts=p;\n\t\t\t\t\tb64os.write(ASCIIUtility.getBytes(s));...\n\t\t\t\t}else if(r.isTagged() && r.getTag().equals(tag))...\n\t\t\t\telse if(r.isBYE())...\n\t\t\t\telse \n\t\t\t\t\tv.addElement(r);\n\t\t\t} catch (Exception ioex){...\n\t\t\t} \n\t\t}\n\t} finally {\n\t\tresumeTracing();\n\t} \n\tResponse[] responses=new Response[v.size()];\n\tv.copyInto(responses);\n\tnotifyResponseHandlers(responses);...\n}","a20":"public synchronized void authlogin(String u,String p) throws ProtocolException {...\n\tResponse r=null;...\n\ttry {...\n\t\tOutputStream os=getOutputStream();\n\t\tByteArrayOutputStream bos=new ByteArrayOutputStream();\n\t\tOutputStream b64os=new BASE64EncoderStream(bos,Integer.MAX_VALUE);...\n\t\twhile(!done){\n\t\t\ttry {...\n\t\t\t\tif(r.isContinuation()){...\n\t\t\t\t}else if ...\n\t\t\t} catch (Exception ioex){...\n\t\t\t} \n\t\t}\n\t} finally {\n\t\tresumeTracing();\n\t} \n\tResponse[] responses=new Response[v.size()];...\n}"},{"Origin":"public synchronized void authntlm(String authzid,String u,String p) throws ProtocolException {\n\tVector v=new Vector();\n\tString tag=null;\n\tResponse r=null;\n\tboolean done=false;\n\tString type1Msg=null;\n\tint flags=PropUtil.getIntProperty(props,\"mail.\" + name + \".auth.ntlm.flags\",0);\n\tString domain=props.getProperty(\"mail.\" + name + \".auth.ntlm.domain\",\"\");\n\tNtlm ntlm=new Ntlm(domain,getLocalHost(),u,p,debug ? out : null);\n\ttry {\n\t\tif(noauthdebug){\n\t\t\tout.println(\"DEBUG IMAP: AUTHENTICATE NTLM command trace suppressed\");\n\t\t\tsuspendTracing();\n\t\t}\n\t\ttry {\n\t\t\ttag=writeCommand(\"AUTHENTICATE NTLM\",null);\n\t\t} catch (Exception ex){\n\t\t\tr=Response.byeResponse(ex);\n\t\t\tdone=true;\n\t\t} \n\t\tOutputStream os=getOutputStream();\n\t\tboolean first=true;\n\t\twhile(!done){\n\t\t\ttry {\n\t\t\t\tr=readResponse();\n\t\t\t\tif(r.isContinuation()){\n\t\t\t\t\tString s;\n\t\t\t\t\tif(first){\n\t\t\t\t\t\ts=ntlm.generateType1Msg(flags);\n\t\t\t\t\t\tfirst=false;\n\t\t\t\t\t}else {\n\t\t\t\t\t\ts=ntlm.generateType3Msg(r.getRest());\n\t\t\t\t\t}\n\t\t\t\t\tos.write(ASCIIUtility.getBytes(s));\n\t\t\t\t\tos.write(CRLF);\n\t\t\t\t\tos.flush();\n\t\t\t\t}else if(r.isTagged() && r.getTag().equals(tag))\n\t\t\t\t\tdone=true;\n\t\t\t\telse if(r.isBYE())\n\t\t\t\t\tdone=true;\n\t\t\t\telse \n\t\t\t\t\tv.addElement(r);\n\t\t\t} catch (Exception ioex){\n\t\t\t\tr=Response.byeResponse(ioex);\n\t\t\t\tdone=true;\n\t\t\t} \n\t\t}\n\t} finally {\n\t\tresumeTracing();\n\t} \n\tResponse[] responses=new Response[v.size()];\n\tv.copyInto(responses);\n\tnotifyResponseHandlers(responses);\n\tif(noauthdebug)\n\t\tout.println(\"DEBUG IMAP: AUTHENTICATE NTLM command result: \" + r);\n\thandleResult(r);\n\tsetCapabilities(r);\n\tauthenticated=true;\n}","a50":"public synchronized void authntlm(String authzid,String u,String p) throws ProtocolException {\n\tVector v=new Vector();\n\tString tag=null;\n\tResponse r=null;\n\tboolean done=false;...\n\tint flags=PropUtil.getIntProperty(props,\"mail.\" + name + \".auth.ntlm.flags\",0);\n\tString domain=props.getProperty(\"mail.\" + name + \".auth.ntlm.domain\",\"\");\n\tNtlm ntlm=new Ntlm(domain,getLocalHost(),u,p,debug ? out : null);\n\ttry {...\n\t\ttry {...\n\t\t} catch (Exception ex){...\n\t\t} \n\t\tOutputStream os=getOutputStream();\n\t\tboolean first=true;\n\t\twhile(!done){\n\t\t\ttry {\n\t\t\t\tr=readResponse();\n\t\t\t\tif(r.isContinuation()){\n\t\t\t\t\tString s;\n\t\t\t\t\tif(first){...\n\t\t\t\t\t}else {\n\t\t\t\t\t\ts=ntlm.generateType3Msg(r.getRest());\n\t\t\t\t\t}\n\t\t\t\t\tos.write(ASCIIUtility.getBytes(s));...\n\t\t\t\t}else if ...\n\t\t\t} catch (Exception ioex){...\n\t\t\t} \n\t\t}\n\t} finally {\n\t\tresumeTracing();\n\t} \n\tResponse[] responses=new Response[v.size()];\n\tv.copyInto(responses);\n\tnotifyResponseHandlers(responses);...\n}","a20":"public synchronized void authntlm(String authzid,String u,String p) throws ProtocolException {...\n\tResponse r=null;...\n\tint flags=PropUtil.getIntProperty(props,\"mail.\" + name + \".auth.ntlm.flags\",0);\n\tString domain=props.getProperty(\"mail.\" + name + \".auth.ntlm.domain\",\"\");...\n\ttry {...\n\t\tOutputStream os=getOutputStream();...\n\t\twhile(!done){\n\t\t\ttry {...\n\t\t\t\tif(r.isContinuation()){...\n\t\t\t\t}else if ...\n\t\t\t} catch (Exception ioex){...\n\t\t\t} \n\t\t}\n\t} finally {\n\t\tresumeTracing();\n\t} \n\tResponse[] responses=new Response[v.size()];...\n}"},{"Origin":"public synchronized void authplain(String authzid,String u,String p) throws ProtocolException {\n\tVector v=new Vector();\n\tString tag=null;\n\tResponse r=null;\n\tboolean done=false;\n\ttry {\n\t\tif(noauthdebug){\n\t\t\tout.println(\"DEBUG IMAP: AUTHENTICATE PLAIN command trace suppressed\");\n\t\t\tsuspendTracing();\n\t\t}\n\t\ttry {\n\t\t\ttag=writeCommand(\"AUTHENTICATE PLAIN\",null);\n\t\t} catch (Exception ex){\n\t\t\tr=Response.byeResponse(ex);\n\t\t\tdone=true;\n\t\t} \n\t\tOutputStream os=getOutputStream();\n\t\tByteArrayOutputStream bos=new ByteArrayOutputStream();\n\t\tOutputStream b64os=new BASE64EncoderStream(bos,Integer.MAX_VALUE);\n\t\twhile(!done){\n\t\t\ttry {\n\t\t\t\tr=readResponse();\n\t\t\t\tif(r.isContinuation()){\n\t\t\t\t\tfinal String nullByte=\"\\0\";\n\t\t\t\t\tString s=(authzid == null ? \"\" : authzid) + nullByte + u+ nullByte+ p;\n\t\t\t\t\tb64os.write(ASCIIUtility.getBytes(s));\n\t\t\t\t\tb64os.flush();\n\t\t\t\t\tbos.write(CRLF);\n\t\t\t\t\tos.write(bos.toByteArray());\n\t\t\t\t\tos.flush();\n\t\t\t\t\tbos.reset();\n\t\t\t\t}else if(r.isTagged() && r.getTag().equals(tag))\n\t\t\t\t\tdone=true;\n\t\t\t\telse if(r.isBYE())\n\t\t\t\t\tdone=true;\n\t\t\t\telse \n\t\t\t\t\tv.addElement(r);\n\t\t\t} catch (Exception ioex){\n\t\t\t\tr=Response.byeResponse(ioex);\n\t\t\t\tdone=true;\n\t\t\t} \n\t\t}\n\t} finally {\n\t\tresumeTracing();\n\t} \n\tResponse[] responses=new Response[v.size()];\n\tv.copyInto(responses);\n\tnotifyResponseHandlers(responses);\n\tif(noauthdebug)\n\t\tout.println(\"DEBUG IMAP: AUTHENTICATE PLAIN command result: \" + r);\n\thandleResult(r);\n\tsetCapabilities(r);\n\tauthenticated=true;\n}","a50":"public synchronized void authplain(String authzid,String u,String p) throws ProtocolException {\n\tVector v=new Vector();\n\tString tag=null;\n\tResponse r=null;\n\tboolean done=false;\n\ttry {...\n\t\ttry {...\n\t\t} catch (Exception ex){...\n\t\t} \n\t\tOutputStream os=getOutputStream();\n\t\tByteArrayOutputStream bos=new ByteArrayOutputStream();\n\t\tOutputStream b64os=new BASE64EncoderStream(bos,Integer.MAX_VALUE);\n\t\twhile(!done){\n\t\t\ttry {\n\t\t\t\tr=readResponse();\n\t\t\t\tif(r.isContinuation()){\n\t\t\t\t\tfinal String nullByte=\"\\0\";\n\t\t\t\t\tString s=(authzid == null ? \"\" : authzid) + nullByte + u+ nullByte+ p;\n\t\t\t\t\tb64os.write(ASCIIUtility.getBytes(s));...\n\t\t\t\t}else if(r.isTagged() && r.getTag().equals(tag))...\n\t\t\t\telse if(r.isBYE())...\n\t\t\t\telse \n\t\t\t\t\tv.addElement(r);\n\t\t\t} catch (Exception ioex){...\n\t\t\t} \n\t\t}\n\t} finally {\n\t\tresumeTracing();\n\t} \n\tResponse[] responses=new Response[v.size()];\n\tv.copyInto(responses);\n\tnotifyResponseHandlers(responses);...\n}","a20":"public synchronized void authplain(String authzid,String u,String p) throws ProtocolException {...\n\ttry {...\n\t\tOutputStream os=getOutputStream();\n\t\tByteArrayOutputStream bos=new ByteArrayOutputStream();\n\t\tOutputStream b64os=new BASE64EncoderStream(bos,Integer.MAX_VALUE);\n\t\twhile(!done){\n\t\t\ttry {...\n\t\t\t\tif(r.isContinuation()){...\n\t\t\t\t\tString s=(authzid == null ? \"\" : authzid) + nullByte + u+ nullByte+ p;...\n\t\t\t\t}else if ...\n\t\t\t} catch (Exception ioex){...\n\t\t\t} \n\t\t}\n\t} finally {\n\t\tresumeTracing();\n\t} ...\n}"},{"Origin":"public HttpContext service(HttpRequest request,HttpResponse response) throws IOException, HttpException {\n\tString host=request.getHost();\n\tif(_requestsPerGC > 0 && _gcRequests++ > _requestsPerGC){\n\t\t_gcRequests=0;\n\t\tSystem.gc();\n\t}\n\twhile(true){\n\t\tPathMap contextMap=(PathMap)_virtualHostMap.get(host);\n\t\tif(contextMap != null){\n\t\t\tList contextLists=contextMap.getMatches(request.getPath());\n\t\t\tif(contextLists != null){\n\t\t\t\tif(log.isTraceEnabled())\n\t\t\t\t\tlog.trace(\"Contexts at \" + request.getPath() + \": \"+ contextLists);\n\t\t\t\tfor (int i=0; i < contextLists.size(); i++){\n\t\t\t\t\tMap.Entry entry=(Map.Entry)contextLists.get(i);\n\t\t\t\t\tList contextList=(List)entry.getValue();\n\t\t\t\t\tfor (int j=0; j < contextList.size(); j++){\n\t\t\t\t\t\tHttpContext context=(HttpContext)contextList.get(j);\n\t\t\t\t\t\tif(log.isDebugEnabled())\n\t\t\t\t\t\t\tlog.debug(\"Try \" + context + \",\"+ j);\n\t\t\t\t\t\tcontext.handle(request,response);\n\t\t\t\t\t\tif(request.isHandled())\n\t\t\t\t\t\t\treturn context;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(host == null)\n\t\t\tbreak;\n\t\thost=null;\n\t}\n\tsynchronized (this){\n\t\tif(_notFoundContext == null){\n\t\t\t_notFoundContext=new HttpContext();\n\t\t\t_notFoundContext.setContextPath(\"/\");\n\t\t\t_notFoundContext.setHttpServer(this);\n\t\t\ttry {\n\t\t\t\t_notFoundContext.addHandler((NotFoundHandler)Class.forName(\"org.openqa.jetty.http.handler.RootNotFoundHandler\").newInstance());\n\t\t\t} catch (Exception e){\n\t\t\t\t_notFoundContext.addHandler(new NotFoundHandler());\n\t\t\t} \n\t\t\taddComponent(_notFoundContext);\n\t\t\ttry {\n\t\t\t\t_notFoundContext.start();\n\t\t\t} catch (Exception e){\n\t\t\t\tlog.warn(LogSupport.EXCEPTION,e);\n\t\t\t} \n\t\t}\n\t\t_notFoundContext.handle(request,response);\n\t\tif(!request.isHandled())\n\t\t\tresponse.sendError(HttpResponse.__404_Not_Found);\n\t\treturn _notFoundContext;\n\t}\n}","a50":"public HttpContext service(HttpRequest request,HttpResponse response) throws IOException, HttpException {\n\tString host=request.getHost();...\n\twhile(true){\n\t\tPathMap contextMap=(PathMap)_virtualHostMap.get(host);\n\t\tif(contextMap != null){\n\t\t\tList contextLists=contextMap.getMatches(request.getPath());\n\t\t\tif(contextLists != null){...\n\t\t\t\tfor (int i=0; i < contextLists.size(); i++){\n\t\t\t\t\tMap.Entry entry=(Map.Entry)contextLists.get(i);\n\t\t\t\t\tList contextList=(List)entry.getValue();\n\t\t\t\t\tfor (int j=0; j < contextList.size(); j++){\n\t\t\t\t\t\tHttpContext context=(HttpContext)contextList.get(j);...\n\t\t\t\t\t\tcontext.handle(request,response);\n\t\t\t\t\t\tif(request.isHandled())\n\t\t\t\t\t\t\treturn context;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}...\n\t\thost=null;\n\t}\n\tsynchronized (this){\n\t\tif(_notFoundContext == null){\n\t\t\t_notFoundContext=new HttpContext();...\n\t\t\ttry {\n\t\t\t\t_notFoundContext.addHandler((NotFoundHandler)Class.forName(\"org.openqa.jetty.http.handler.RootNotFoundHandler\").newInstance());\n\t\t\t} catch (Exception e){...\n\t\t\t} ...\n\t\t}...\n\t\treturn _notFoundContext;\n\t}\n}","a20":"public HttpContext service(HttpRequest request,HttpResponse response) throws IOException, HttpException {...\n\twhile(true){...\n\t\tif(contextMap != null){\n\t\t\tList contextLists=contextMap.getMatches(request.getPath());\n\t\t\tif(contextLists != null){...\n\t\t\t\tfor (int i=0; i < contextLists.size(); i++){...\n\t\t\t\t\tfor (int j=0; j < contextList.size(); j++){...\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}...\n\t}\n\tsynchronized (this){...\n\t}\n}"},{"Origin":"public void handle(HttpRequest request,HttpResponse response) throws HttpException, IOException {\n\tif(!isStarted() || _gracefulStop)\n\t\treturn;\n\tif(_hosts != null && _hosts.size() > 0){\n\t\tObject o=request.getHttpConnection().getConnection();\n\t\tif(o instanceof Socket){\n\t\t\tSocket s=(Socket)o;\n\t\t\tif(!_hosts.contains(s.getLocalAddress())){\n\t\t\t\tif(log.isDebugEnabled())\n\t\t\t\t\tlog.debug(s.getLocalAddress() + \" not in \" + _hosts);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\tif(_statsOn){\n\t\tsynchronized (_statsLock){\n\t\t\t_requests++;\n\t\t\t_requestsActive++;\n\t\t\tif(_requestsActive > _requestsActiveMax)\n\t\t\t\t_requestsActiveMax=_requestsActive;\n\t\t}\n\t}\n\tString pathInContext=URI.canonicalPath(request.getPath());\n\tif(pathInContext == null){\n\t\tthrow new HttpException(HttpResponse.__400_Bad_Request);\n\t}\n\tif(_contextPath.length() > 1)\n\t\tpathInContext=pathInContext.substring(_contextPath.length());\n\tif(_redirectNullPath && (pathInContext == null || pathInContext.length() == 0)){\n\t\tStringBuffer buf=request.getRequestURL();\n\t\tbuf.append(\"/\");\n\t\tString q=request.getQuery();\n\t\tif(q != null && q.length() != 0)\n\t\t\tbuf.append(\"?\" + q);\n\t\tresponse.sendRedirect(buf.toString());\n\t\tif(log.isDebugEnabled())\n\t\t\tlog.debug(this + \" consumed all of path \" + request.getPath()+ \", redirect to \"+ buf.toString());\n\t\treturn;\n\t}\n\tString pathParams=null;\n\tint semi=pathInContext.lastIndexOf(';');\n\tif(semi >= 0){\n\t\tint pl=pathInContext.length() - semi;\n\t\tString ep=request.getEncodedPath();\n\t\tif(';' == ep.charAt(ep.length() - pl)){\n\t\t\tpathParams=pathInContext.substring(semi + 1);\n\t\t\tpathInContext=pathInContext.substring(0,semi);\n\t\t}\n\t}\n\ttry {\n\t\thandle(pathInContext,pathParams,request,response);\n\t} finally {\n\t\tif(_userRealm != null && request.hasUserPrincipal())\n\t\t\t_userRealm.disassociate(request.getUserPrincipal());\n\t} \n}","a50":"public void handle(HttpRequest request,HttpResponse response) throws HttpException, IOException {...\n\tif(_hosts != null && _hosts.size() > 0){\n\t\tObject o=request.getHttpConnection().getConnection();\n\t\tif(o instanceof Socket){\n\t\t\tSocket s=(Socket)o;...\n\t\t}\n\t}\n\tif(_statsOn){\n\t\tsynchronized (_statsLock){...\n\t\t}\n\t}\n\tString pathInContext=URI.canonicalPath(request.getPath());...\n\tif(_contextPath.length() > 1)\n\t\tpathInContext=pathInContext.substring(_contextPath.length());\n\tif(_redirectNullPath && (pathInContext == null || pathInContext.length() == 0)){\n\t\tStringBuffer buf=request.getRequestURL();...\n\t\tString q=request.getQuery();...\n\t\tresponse.sendRedirect(buf.toString());...\n\t\treturn;\n\t}\n\tString pathParams=null;\n\tint semi=pathInContext.lastIndexOf(';');\n\tif(semi >= 0){\n\t\tint pl=pathInContext.length() - semi;\n\t\tString ep=request.getEncodedPath();...\n\t}\n\ttry {\n\t\thandle(pathInContext,pathParams,request,response);\n\t} finally {\n\t\tif(_userRealm != null && request.hasUserPrincipal())\n\t\t\t_userRealm.disassociate(request.getUserPrincipal());\n\t} \n}","a20":"public void handle(HttpRequest request,HttpResponse response) throws HttpException, IOException {...\n\tif(_hosts != null && _hosts.size() > 0){\n\t\tObject o=request.getHttpConnection().getConnection();...\n\t}...\n\tString pathInContext=URI.canonicalPath(request.getPath());...\n\tif(_redirectNullPath && (pathInContext == null || pathInContext.length() == 0)){\n\t\tStringBuffer buf=request.getRequestURL();...\n\t\treturn;\n\t}...\n\tint semi=pathInContext.lastIndexOf(';');...\n\ttry {\n\t\thandle(pathInContext,pathParams,request,response);\n\t} finally {\n\t\tif(_userRealm != null && request.hasUserPrincipal())...\n\t} \n}"},{"Origin":"public void handle(String pathInContext,String pathParams,HttpRequest httpRequest,HttpResponse httpResponse) throws IOException {\n\tif(!isStarted())\n\t\treturn;\n\tif(HttpRequest.__TRACE.equals(httpRequest.getMethod())){\n\t\thandleTrace(httpRequest,httpResponse);\n\t\treturn;\n\t}\n\tServletHttpRequest request=(ServletHttpRequest)httpRequest.getWrapper();\n\tServletHttpResponse response=(ServletHttpResponse)httpResponse.getWrapper();\n\tif(request == null){\n\t\trequest=new ServletHttpRequest(this,pathInContext,httpRequest);\n\t\tresponse=new ServletHttpResponse(request,httpResponse);\n\t\thttpRequest.setWrapper(request);\n\t\thttpResponse.setWrapper(response);\n\t}else {\n\t\trequest.recycle(this,pathInContext);\n\t\tresponse.recycle();\n\t}\n\tMap.Entry servlet=getHolderEntry(pathInContext);\n\tServletHolder servletHolder=servlet == null ? null : (ServletHolder)servlet.getValue();\n\tif(log.isDebugEnabled())\n\t\tlog.debug(\"servlet=\" + servlet);\n\ttry {\n\t\tif(servlet != null){\n\t\t\tString servletPathSpec=(String)servlet.getKey();\n\t\t\trequest.setServletPaths(PathMap.pathMatch(servletPathSpec,pathInContext),PathMap.pathInfo(servletPathSpec,pathInContext),servletHolder);\n\t\t}\n\t\trequest.setRequestedSessionId(pathParams);\n\t\tHttpSession session=request.getSession(false);\n\t\tif(session != null)\n\t\t\t((SessionManager.Session)session).access();\n\t\tif(log.isDebugEnabled())\n\t\t\tlog.debug(\"session=\" + session);\n\t\tif(servletHolder != null)\n\t\t\tdispatch(pathInContext,request,response,servletHolder,Dispatcher.__REQUEST);\n\t} catch (Exception e){\n\t\tlog.debug(LogSupport.EXCEPTION,e);\n\t\tThrowable th=e;\n\t\twhile(th instanceof ServletException){\n\t\t\tlog.warn(LogSupport.EXCEPTION,th);\n\t\t\tThrowable cause=((ServletException)th).getRootCause();\n\t\t\tif(cause == th || cause == null)\n\t\t\t\tbreak;\n\t\t\tth=cause;\n\t\t}\n\t\tif(th instanceof HttpException)\n\t\t\tthrow (HttpException)th;\n\t\tif(th instanceof EOFException)\n\t\t\tthrow (IOException)th;\n\t\telse if(log.isDebugEnabled() || !(th instanceof java.io.IOException)){\n\t\t\tif(_contextLog != null){\n\t\t\t\tif(th instanceof RuntimeException)\n\t\t\t\t\t_contextLog.error(httpRequest.getURI() + \": \",th);\n\t\t\t\telse \n\t\t\t\t\t_contextLog.warn(httpRequest.getURI() + \": \",th);\n\t\t\t}\n\t\t\tif(log.isDebugEnabled()){\n\t\t\t\tif(th instanceof RuntimeException)\n\t\t\t\t\tlog.error(httpRequest.getURI() + \": \",th);\n\t\t\t\telse \n\t\t\t\t\tlog.warn(httpRequest.getURI() + \": \",th);\n\t\t\t\tlog.debug(httpRequest);\n\t\t\t}\n\t\t}\n\t\thttpResponse.getHttpConnection().forceClose();\n\t\tif(!httpResponse.isCommitted()){\n\t\t\trequest.setAttribute(ServletHandler.__J_S_ERROR_EXCEPTION_TYPE,th.getClass());\n\t\t\trequest.setAttribute(ServletHandler.__J_S_ERROR_EXCEPTION,th);\n\t\t\tif(th instanceof UnavailableException){\n\t\t\t\tUnavailableException ue=(UnavailableException)th;\n\t\t\t\tif(ue.isPermanent())\n\t\t\t\t\tresponse.sendError(HttpResponse.__404_Not_Found,e.getMessage());\n\t\t\t\telse \n\t\t\t\t\tresponse.sendError(HttpResponse.__503_Service_Unavailable,e.getMessage());\n\t\t\t}else \n\t\t\t\tresponse.sendError(HttpResponse.__500_Internal_Server_Error,e.getMessage());\n\t\t}else if(log.isDebugEnabled())\n\t\t\tlog.debug(\"Response already committed for handling \" + th);\n\t} catch (Error e){\n\t\tlog.warn(\"Error for \" + httpRequest.getURI(),e);\n\t\tif(log.isDebugEnabled())\n\t\t\tlog.debug(httpRequest);\n\t\thttpResponse.getHttpConnection().forceClose();\n\t\tif(!httpResponse.isCommitted()){\n\t\t\trequest.setAttribute(ServletHandler.__J_S_ERROR_EXCEPTION_TYPE,e.getClass());\n\t\t\trequest.setAttribute(ServletHandler.__J_S_ERROR_EXCEPTION,e);\n\t\t\tresponse.sendError(HttpResponse.__500_Internal_Server_Error,e.getMessage());\n\t\t}else if(log.isDebugEnabled())\n\t\t\tlog.debug(\"Response already committed for handling \",e);\n\t} finally {\n\t\tif(servletHolder != null && response != null){\n\t\t\tresponse.complete();\n\t\t}\n\t} \n}","a50":"public void handle(String pathInContext,String pathParams,HttpRequest httpRequest,HttpResponse httpResponse) throws IOException {...\n\tif(HttpRequest.__TRACE.equals(httpRequest.getMethod())){...\n\t\treturn;\n\t}\n\tServletHttpRequest request=(ServletHttpRequest)httpRequest.getWrapper();\n\tServletHttpResponse response=(ServletHttpResponse)httpResponse.getWrapper();\n\tif(request == null){\n\t\trequest=new ServletHttpRequest(this,pathInContext,httpRequest);\n\t\tresponse=new ServletHttpResponse(request,httpResponse);\n\t\thttpRequest.setWrapper(request);\n\t\thttpResponse.setWrapper(response);\n\t}else {\n\t\trequest.recycle(this,pathInContext);\n\t\tresponse.recycle();\n\t}\n\tMap.Entry servlet=getHolderEntry(pathInContext);\n\tServletHolder servletHolder=servlet == null ? null : (ServletHolder)servlet.getValue();...\n\ttry {\n\t\tif(servlet != null){\n\t\t\tString servletPathSpec=(String)servlet.getKey();\n\t\t\trequest.setServletPaths(PathMap.pathMatch(servletPathSpec,pathInContext),PathMap.pathInfo(servletPathSpec,pathInContext),servletHolder);\n\t\t}\n\t\trequest.setRequestedSessionId(pathParams);\n\t\tHttpSession session=request.getSession(false);\n\t\tif(session != null)\n\t\t\t((SessionManager.Session)session).access();...\n\t\tif(servletHolder != null)\n\t\t\tdispatch(pathInContext,request,response,servletHolder,Dispatcher.__REQUEST);\n\t} catch (Exception e){\n\t\tlog.debug(LogSupport.EXCEPTION,e);\n\t\tThrowable th=e;\n\t\twhile(th instanceof ServletException){\n\t\t\tlog.warn(LogSupport.EXCEPTION,th);\n\t\t\tThrowable cause=((ServletException)th).getRootCause();...\n\t\t}...\n\t\tif(th instanceof EOFException)...\n\t\telse if ......\n\t\tif(!httpResponse.isCommitted()){\n\t\t\trequest.setAttribute(ServletHandler.__J_S_ERROR_EXCEPTION_TYPE,th.getClass());...\n\t\t\tif(th instanceof UnavailableException){...\n\t\t\t}else ...\n\t\t}else if ...\n\t} catch (Error e){\n\t\tlog.warn(\"Error for \" + httpRequest.getURI(),e);...\n\t\tif(!httpResponse.isCommitted()){...\n\t\t}else if ...\n\t} finally {\n\t\tif(servletHolder != null && response != null){\n\t\t\tresponse.complete();\n\t\t}\n\t} \n}","a20":"public void handle(String pathInContext,String pathParams,HttpRequest httpRequest,HttpResponse httpResponse) throws IOException {...\n\tServletHttpRequest request=(ServletHttpRequest)httpRequest.getWrapper();\n\tServletHttpResponse response=(ServletHttpResponse)httpResponse.getWrapper();...\n\tMap.Entry servlet=getHolderEntry(pathInContext);\n\tServletHolder servletHolder=servlet == null ? null : (ServletHolder)servlet.getValue();...\n\ttry {\n\t\tif(servlet != null){...\n\t\t\trequest.setServletPaths(PathMap.pathMatch(servletPathSpec,pathInContext),PathMap.pathInfo(servletPathSpec,pathInContext),servletHolder);\n\t\t}...\n\t\tHttpSession session=request.getSession(false);...\n\t} catch (Exception e){...\n\t\tThrowable th=e;\n\t\twhile(th instanceof ServletException){...\n\t\t}...\n\t\tif(th instanceof EOFException)...\n\t\telse if ......\n\t\tif(!httpResponse.isCommitted()){...\n\t\t}else if ...\n\t} catch (Error e){...\n\t\tif(!httpResponse.isCommitted()){...\n\t\t}else if ...\n\t} finally {...\n\t} \n}"},{"Origin":"XObject execute(final XPathContext xpathContext,final int contextNode,final PrefixResolver namespaceContext) throws TransformerException {\n\txpathContext.pushNamespaceContext(namespaceContext);\n\txpathContext.pushCurrentNodeAndExpression(contextNode,contextNode);\n\tXObject xobj=null;\n\ttry {\n\t\txobj=mainExp_.execute(xpathContext);\n\t} catch (final TransformerException te){\n\t\tte.setLocator(mainExp_);\n\t\tfinal ErrorListener el=xpathContext.getErrorListener();\n\t\tif(null != el){\n\t\t\tel.error(te);\n\t\t}else {\n\t\t\tthrow te;\n\t\t}\n\t} catch (Exception e){\n\t\twhile(e instanceof WrappedRuntimeException){\n\t\t\te=((WrappedRuntimeException)e).getException();\n\t\t}\n\t\tString msg=e.getMessage();\n\t\tif(msg == null || msg.length() == 0){\n\t\t\tmsg=XPATHMessages.createXPATHMessage(XPATHErrorResources.ER_XPATH_ERROR,null);\n\t\t}\n\t\tfinal TransformerException te=new TransformerException(msg,mainExp_,e);\n\t\tfinal ErrorListener el=xpathContext.getErrorListener();\n\t\tif(null != el){\n\t\t\tel.fatalError(te);\n\t\t}else {\n\t\t\tthrow te;\n\t\t}\n\t} finally {\n\t\txpathContext.popNamespaceContext();\n\t\txpathContext.popCurrentNodeAndExpression();\n\t} \n\treturn xobj;\n}","a50":"XObject execute(final XPathContext xpathContext,final int contextNode,final PrefixResolver namespaceContext) throws TransformerException {\n\txpathContext.pushNamespaceContext(namespaceContext);\n\txpathContext.pushCurrentNodeAndExpression(contextNode,contextNode);\n\tXObject xobj=null;\n\ttry {\n\t\txobj=mainExp_.execute(xpathContext);\n\t} catch (final TransformerException te){...\n\t} catch (Exception e){\n\t\twhile(e instanceof WrappedRuntimeException){\n\t\t\te=((WrappedRuntimeException)e).getException();\n\t\t}...\n\t\tif(msg == null || msg.length() == 0){\n\t\t\tmsg=XPATHMessages.createXPATHMessage(XPATHErrorResources.ER_XPATH_ERROR,null);\n\t\t}\n\t\tfinal TransformerException te=new TransformerException(msg,mainExp_,e);...\n\t} finally {\n\t\txpathContext.popNamespaceContext();\n\t\txpathContext.popCurrentNodeAndExpression();\n\t} \n\treturn xobj;\n}","a20":"XObject execute(final XPathContext xpathContext,final int contextNode,final PrefixResolver namespaceContext) throws TransformerException {...\n\txpathContext.pushCurrentNodeAndExpression(contextNode,contextNode);...\n\ttry {\n\t\txobj=mainExp_.execute(xpathContext);\n\t} catch (final TransformerException te){...\n\t} catch (Exception e){...\n\t} finally {\n\t\txpathContext.popNamespaceContext();\n\t\txpathContext.popCurrentNodeAndExpression();\n\t} \n\treturn xobj;\n}"},{"Origin":"public static boolean check(List constraints,Authenticator authenticator,UserRealm realm,String pathInContext,HttpRequest request,HttpResponse response) throws HttpException, IOException {\n\tint dataConstraint=DC_NONE;\n\tObject roles=null;\n\tboolean unauthenticated=false;\n\tboolean forbidden=false;\n\tfor (int c=0; c < constraints.size(); c++){\n\t\tSecurityConstraint sc=(SecurityConstraint)constraints.get(c);\n\t\tif(!sc.forMethod(request.getMethod()))\n\t\t\tcontinue;\n\t\tif(dataConstraint > DC_UNSET && sc.hasDataConstraint()){\n\t\t\tif(sc.getDataConstraint() > dataConstraint)\n\t\t\t\tdataConstraint=sc.getDataConstraint();\n\t\t}else \n\t\t\tdataConstraint=DC_UNSET;\n\t\tif(!unauthenticated && !forbidden){\n\t\t\tif(sc.getAuthenticate()){\n\t\t\t\tif(sc.isAnyRole()){\n\t\t\t\t\troles=ANY_ROLE;\n\t\t\t\t}else {\n\t\t\t\t\tList scr=sc.getRoles();\n\t\t\t\t\tif(scr == null || scr.size() == 0){\n\t\t\t\t\t\tforbidden=true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}else {\n\t\t\t\t\t\tif(roles != ANY_ROLE){\n\t\t\t\t\t\t\troles=LazyList.addCollection(roles,scr);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}else \n\t\t\t\tunauthenticated=true;\n\t\t}\n\t}\n\tif(forbidden && (!(authenticator instanceof FormAuthenticator) || !((FormAuthenticator)authenticator).isLoginOrErrorPage(pathInContext))){\n\t\tHttpContext.sendContextError(response,HttpResponse.__403_Forbidden,null);\n\t\treturn false;\n\t}\n\tif(dataConstraint > DC_NONE){\n\t\tHttpConnection connection=request.getHttpConnection();\n\t\tHttpListener listener=connection.getListener();\n\t\tswitch (dataConstraint){\n\t\tcase SecurityConstraint.DC_INTEGRAL:\n\t\t\tif(listener.isIntegral(connection))\n\t\t\t\tbreak;\n\t\t\tif(listener.getIntegralPort() > 0){\n\t\t\t\tString url=listener.getIntegralScheme() + \"://\" + request.getHost()+ \":\"+ listener.getIntegralPort()+ request.getPath();\n\t\t\t\tif(request.getQuery() != null)\n\t\t\t\t\turl+=\"?\" + request.getQuery();\n\t\t\t\tresponse.setContentLength(0);\n\t\t\t\tresponse.sendRedirect(url);\n\t\t\t}else \n\t\t\t\tHttpContext.sendContextError(response,HttpResponse.__403_Forbidden,null);\n\t\t\treturn false;\n\t\tcase SecurityConstraint.DC_CONFIDENTIAL:\n\t\t\tif(listener.isConfidential(connection))\n\t\t\t\tbreak;\n\t\t\tif(listener.getConfidentialPort() > 0){\n\t\t\t\tString url=listener.getConfidentialScheme() + \"://\" + request.getHost()+ \":\"+ listener.getConfidentialPort()+ request.getPath();\n\t\t\t\tif(request.getQuery() != null)\n\t\t\t\t\turl+=\"?\" + request.getQuery();\n\t\t\t\tresponse.setContentLength(0);\n\t\t\t\tresponse.sendRedirect(url);\n\t\t\t}else \n\t\t\t\tHttpContext.sendContextError(response,HttpResponse.__403_Forbidden,null);\n\t\t\treturn false;\n\t\tdefault :\n\t\t\tHttpContext.sendContextError(response,HttpResponse.__403_Forbidden,null);\n\t\t\treturn false;\n\t\t}\n\t}\n\tif(!unauthenticated && roles != null){\n\t\tif(realm == null){\n\t\t\tHttpContext.sendContextError(response,HttpResponse.__500_Internal_Server_Error,\"Configuration error\");\n\t\t\treturn false;\n\t\t}\n\t\tPrincipal user=null;\n\t\tif(request.getAuthType() != null && request.getAuthUser() != null){\n\t\t\tuser=request.getUserPrincipal();\n\t\t\tif(user == null)\n\t\t\t\tuser=realm.authenticate(request.getAuthUser(),null,request);\n\t\t\tif(user == null && authenticator != null)\n\t\t\t\tuser=authenticator.authenticate(realm,pathInContext,request,response);\n\t\t}else if(authenticator != null){\n\t\t\tuser=authenticator.authenticate(realm,pathInContext,request,response);\n\t\t}else {\n\t\t\tlog.warn(\"Mis-configured Authenticator for \" + request.getPath());\n\t\t\tHttpContext.sendContextError(response,HttpResponse.__500_Internal_Server_Error,\"Configuration error\");\n\t\t}\n\t\tif(user == null)\n\t\t\treturn false;\n\t\telse if(user == __NOBODY)\n\t\t\treturn true;\n\t\tif(roles != ANY_ROLE){\n\t\t\tboolean inRole=false;\n\t\t\tfor (int r=LazyList.size(roles); r-- > 0; ){\n\t\t\t\tif(realm.isUserInRole(user,(String)LazyList.get(roles,r))){\n\t\t\t\t\tinRole=true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(!inRole){\n\t\t\t\tlog.warn(\"AUTH FAILURE: role for \" + user.getName());\n\t\t\t\tif(\"BASIC\".equalsIgnoreCase(authenticator.getAuthMethod()))\n\t\t\t\t\t((BasicAuthenticator)authenticator).sendChallenge(realm,response);\n\t\t\t\telse \n\t\t\t\t\tHttpContext.sendContextError(response,HttpResponse.__403_Forbidden,\"User not in required role\");\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}else {\n\t\trequest.setUserPrincipal(HttpRequest.__NOT_CHECKED);\n\t}\n\treturn true;\n}","a50":"public static boolean check(List constraints,Authenticator authenticator,UserRealm realm,String pathInContext,HttpRequest request,HttpResponse response) throws HttpException, IOException {\n\tint dataConstraint=DC_NONE;\n\tObject roles=null;...\n\tfor (int c=0; c < constraints.size(); c++){\n\t\tSecurityConstraint sc=(SecurityConstraint)constraints.get(c);...\n\t\tif(dataConstraint > DC_UNSET && sc.hasDataConstraint()){...\n\t\t}else \n\t\t\tdataConstraint=DC_UNSET;\n\t\tif(!unauthenticated && !forbidden){\n\t\t\tif(sc.getAuthenticate()){\n\t\t\t\tif(sc.isAnyRole()){...\n\t\t\t\t}else {...\n\t\t\t\t}\n\t\t\t}else ...\n\t\t}\n\t}\n\tif(forbidden && (!(authenticator instanceof FormAuthenticator) || !((FormAuthenticator)authenticator).isLoginOrErrorPage(pathInContext))){\n\t\tHttpContext.sendContextError(response,HttpResponse.__403_Forbidden,null);...\n\t}\n\tif(dataConstraint > DC_NONE){...\n\t\tHttpListener listener=connection.getListener();\n\t\tswitch (dataConstraint){\n\t\tcase SecurityConstraint.DC_INTEGRAL:...\n\t\t\tif(listener.getIntegralPort() > 0){\n\t\t\t\tString url=listener.getIntegralScheme() + \"://\" + request.getHost()+ \":\"+ listener.getIntegralPort()+ request.getPath();...\n\t\t\t\tresponse.setContentLength(0);\n\t\t\t\tresponse.sendRedirect(url);\n\t\t\t}else \n\t\t\t\tHttpContext.sendContextError(response,HttpResponse.__403_Forbidden,null);\n\t\t\treturn false;\n\t\tcase SecurityConstraint.DC_CONFIDENTIAL:...\n\t\t\treturn false;\n\t\t}\n\t}\n\tif(!unauthenticated && roles != null){...\n\t\tPrincipal user=null;\n\t\tif(request.getAuthType() != null && request.getAuthUser() != null){\n\t\t\tuser=request.getUserPrincipal();\n\t\t\tif(user == null)\n\t\t\t\tuser=realm.authenticate(request.getAuthUser(),null,request);\n\t\t\tif(user == null && authenticator != null)\n\t\t\t\tuser=authenticator.authenticate(realm,pathInContext,request,response);\n\t\t}else if(authenticator != null){\n\t\t\tuser=authenticator.authenticate(realm,pathInContext,request,response);\n\t\t}else {...\n\t\t}...\n\t\tif(roles != ANY_ROLE){\n\t\t\tboolean inRole=false;\n\t\t\tfor (int r=LazyList.size(roles); r-- > 0; ){...\n\t\t\t}\n\t\t\tif(!inRole){...\n\t\t\t\tif(\"BASIC\".equalsIgnoreCase(authenticator.getAuthMethod()))\n\t\t\t\t\t((BasicAuthenticator)authenticator).sendChallenge(realm,response);\n\t\t\t\telse \n\t\t\t\t\tHttpContext.sendContextError(response,HttpResponse.__403_Forbidden,\"User not in required role\");...\n\t\t\t}\n\t\t}\n\t}else {\n\t\trequest.setUserPrincipal(HttpRequest.__NOT_CHECKED);\n\t}...\n}","a20":"public static boolean check(List constraints,Authenticator authenticator,UserRealm realm,String pathInContext,HttpRequest request,HttpResponse response) throws HttpException, IOException {\n\tint dataConstraint=DC_NONE;...\n\tfor (int c=0; c < constraints.size(); c++){\n\t\tSecurityConstraint sc=(SecurityConstraint)constraints.get(c);...\n\t\tif(!unauthenticated && !forbidden){\n\t\t\tif(sc.getAuthenticate()){...\n\t\t\t}else ...\n\t\t}\n\t}...\n\tif(dataConstraint > DC_NONE){...\n\t\tHttpListener listener=connection.getListener();\n\t\tswitch (dataConstraint){...\n\t\t}\n\t}\n\tif(!unauthenticated && roles != null){...\n\t\tPrincipal user=null;\n\t\tif(request.getAuthType() != null && request.getAuthUser() != null){...\n\t\t\tif(user == null && authenticator != null)\n\t\t\t\tuser=authenticator.authenticate(realm,pathInContext,request,response);\n\t\t}else if ......\n\t\tif(roles != ANY_ROLE){...\n\t\t\tfor (int r=LazyList.size(roles); r-- > 0; ){...\n\t\t\t}...\n\t\t}\n\t}else {...\n\t}...\n}"},{"Origin":"public Resource getResource(String pathInContext) throws IOException {\n\tif(log.isTraceEnabled())\n\t\tlog.trace(\"getResource \" + pathInContext);\n\tif(_resourceBase == null)\n\t\treturn null;\n\tResource resource=null;\n\tsynchronized (_cache){\n\t\tCachedResource cached=(CachedResource)_cache.get(pathInContext);\n\t\tif(cached != null){\n\t\t\tif(log.isTraceEnabled())\n\t\t\t\tlog.trace(\"CACHE HIT: \" + cached);\n\t\t\tCachedMetaData cmd=(CachedMetaData)cached.getAssociate();\n\t\t\tif(cmd != null && cmd.isValid())\n\t\t\t\treturn cached;\n\t\t}\n\t\tresource=_resourceBase.addPath(_resourceBase.encode(pathInContext));\n\t\tif(log.isTraceEnabled())\n\t\t\tlog.trace(\"CACHE MISS: \" + resource);\n\t\tif(resource == null)\n\t\t\treturn null;\n\t\tif(resource.getAlias() != null){\n\t\t\tlog.warn(\"Alias request of '\" + resource.getAlias() + \"' for '\"+ resource+ \"'\");\n\t\t\treturn null;\n\t\t}\n\t\tlong len=resource.length();\n\t\tif(resource.exists()){\n\t\t\tif(!resource.isDirectory() && pathInContext.endsWith(\"/\"))\n\t\t\t\treturn null;\n\t\t\tif(resource.isDirectory()){\n\t\t\t\tif(resource.list() != null)\n\t\t\t\t\tlen=resource.list().length * 100;\n\t\t\t\telse \n\t\t\t\t\tlen=0;\n\t\t\t}\n\t\t\tif(len > 0 && len < _maxCachedFileSize && len < _maxCacheSize){\n\t\t\t\tint needed=_maxCacheSize - (int)len;\n\t\t\t\twhile(_cacheSize > needed)\n\t\t\t\t\t_leastRecentlyUsed.invalidate();\n\t\t\t\tcached=resource.cache();\n\t\t\t\tif(log.isTraceEnabled())\n\t\t\t\t\tlog.trace(\"CACHED: \" + resource);\n\t\t\t\tnew CachedMetaData(cached,pathInContext);\n\t\t\t\treturn cached;\n\t\t\t}\n\t\t}\n\t}\n\tnew ResourceMetaData(resource);\n\treturn resource;\n}","a50":"public Resource getResource(String pathInContext) throws IOException {...\n\tif(_resourceBase == null)\n\t\treturn null;\n\tResource resource=null;\n\tsynchronized (_cache){\n\t\tCachedResource cached=(CachedResource)_cache.get(pathInContext);\n\t\tif(cached != null){...\n\t\t\tCachedMetaData cmd=(CachedMetaData)cached.getAssociate();\n\t\t\tif(cmd != null && cmd.isValid())\n\t\t\t\treturn cached;\n\t\t}\n\t\tresource=_resourceBase.addPath(_resourceBase.encode(pathInContext));...\n\t\tlong len=resource.length();\n\t\tif(resource.exists()){...\n\t\t\tif(len > 0 && len < _maxCachedFileSize && len < _maxCacheSize){\n\t\t\t\tint needed=_maxCacheSize - (int)len;\n\t\t\t\twhile(_cacheSize > needed)\n\t\t\t\t\t_leastRecentlyUsed.invalidate();\n\t\t\t\tcached=resource.cache();...\n\t\t\t\tnew CachedMetaData(cached,pathInContext);\n\t\t\t\treturn cached;\n\t\t\t}\n\t\t}\n\t}\n\tnew ResourceMetaData(resource);\n\treturn resource;\n}","a20":"public Resource getResource(String pathInContext) throws IOException {...\n\tResource resource=null;\n\tsynchronized (_cache){\n\t\tCachedResource cached=(CachedResource)_cache.get(pathInContext);...\n\t\tlong len=resource.length();\n\t\tif(resource.exists()){...\n\t\t\tif(len > 0 && len < _maxCachedFileSize && len < _maxCacheSize){...\n\t\t\t\twhile(_cacheSize > needed)\n\t\t\t\t\t_leastRecentlyUsed.invalidate();...\n\t\t\t\treturn cached;\n\t\t\t}\n\t\t}\n\t}...\n}"},{"Origin":"public static JSONObject loadJSON(String resource){\n\tInputStream in=Thread.currentThread().getContextClassLoader().getResourceAsStream(resource);\n\tif(in == null){\n\t\ttry {\n\t\t\tin=new FileInputStream(resource);\n\t\t} catch (FileNotFoundException e){\n\t\t} \n\t}\n\tif(in == null){\n\t\tthrow new RuntimeException(resource + \" is not a valid resource.\");\n\t}\n\tStringBuilder b=new StringBuilder();\n\tInputStreamReader inputreader=new InputStreamReader(in);\n\tBufferedReader buffreader=new BufferedReader(inputreader);\n\tString line;\n\ttry {\n\t\twhile((line=buffreader.readLine()) != null){\n\t\t\tb.append(line);\n\t\t}\n\t} catch (IOException e){\n\t\tthrow new GridConfigurationException(\"Cannot read file \" + resource + \" , \"+ e.getMessage(),e);\n\t} \n\tString json=b.toString();\n\tJSONObject o;\n\ttry {\n\t\to=new JSONObject(json);\n\t} catch (JSONException e){\n\t\tthrow new GridConfigurationException(\"Wrong format for the JSON input : \" + e.getMessage(),e);\n\t} \n\treturn o;\n}","a50":"public static JSONObject loadJSON(String resource){\n\tInputStream in=Thread.currentThread().getContextClassLoader().getResourceAsStream(resource);...\n\tStringBuilder b=new StringBuilder();\n\tInputStreamReader inputreader=new InputStreamReader(in);\n\tBufferedReader buffreader=new BufferedReader(inputreader);\n\tString line;\n\ttry {\n\t\twhile((line=buffreader.readLine()) != null){\n\t\t\tb.append(line);\n\t\t}\n\t} catch (IOException e){...\n\t} \n\tString json=b.toString();\n\tJSONObject o;\n\ttry {\n\t\to=new JSONObject(json);\n\t} catch (JSONException e){...\n\t} \n\treturn o;\n}","a20":"public static JSONObject loadJSON(String resource){\n\tInputStream in=Thread.currentThread().getContextClassLoader().getResourceAsStream(resource);...\n\tStringBuilder b=new StringBuilder();\n\tInputStreamReader inputreader=new InputStreamReader(in);\n\tBufferedReader buffreader=new BufferedReader(inputreader);\n\tString line;...\n\tString json=b.toString();\n\tJSONObject o;...\n\treturn o;\n}"},{"Origin":"public void loadFromGridYml(String resource){\n\tInputStream in=Thread.currentThread().getContextClassLoader().getResourceAsStream(resource);\n\tif(in == null){\n\t\ttry {\n\t\t\tin=new FileInputStream(resource);\n\t\t} catch (FileNotFoundException e){\n\t\t} \n\t}\n\tif(in == null){\n\t\tthrow new InvalidParameterException(resource + \" is not a valid resource.\");\n\t}\n\tYaml yaml=new Yaml();\n\tMap<String,Object> config=(Map<String,Object>)yaml.load(in);\n\tMap<String,Object> hub=(Map<String,Object>)config.get(\"hub\");\n\tList<Map<String,String>> environments=(List<Map<String,String>>)hub.get(\"environments\");\n\tInteger p=(Integer)hub.get(\"port\");\n\tif(p != null){\n\t\tthis.port=p;\n\t}\n\tfor (Map<String,String> environment : environments){\n\t\tgetGrid1Mapping().put(environment.get(\"name\"),environment.get(\"browser\"));\n\t}\n\tInteger poll=(Integer)hub.get(\"remoteControlPollingIntervalInSeconds\");\n\tif(poll != null){\n\t\tallParams.put(RegistrationRequest.NODE_POLLING,poll.intValue() * 1000);\n\t\tcleanupCycle=poll.intValue() * 1000;\n\t}\n\tInteger timeout=(Integer)hub.get(\"sessionMaxIdleTimeInSeconds\");\n\tif(timeout != null){\n\t\ttimeout=timeout.intValue() * 1000;\n\t}\n\tInteger port=(Integer)hub.get(RegistrationRequest.PORT);\n\tif(port != null){\n\t\tport=port.intValue();\n\t}\n\tInteger newSessionWait=(Integer)hub.get(\"newSessionMaxWaitTimeInSeconds\");\n\tif(newSessionWait != null){\n\t\tnewSessionWaitTimeout=newSessionWait.intValue() * 1000;\n\t}\n\tallParams.put(RegistrationRequest.MAX_SESSION,1);\n}","a50":"public void loadFromGridYml(String resource){\n\tInputStream in=Thread.currentThread().getContextClassLoader().getResourceAsStream(resource);...\n\tYaml yaml=new Yaml();\n\tMap<String,Object> config=(Map<String,Object>)yaml.load(in);\n\tMap<String,Object> hub=(Map<String,Object>)config.get(\"hub\");\n\tList<Map<String,String>> environments=(List<Map<String,String>>)hub.get(\"environments\");\n\tInteger p=(Integer)hub.get(\"port\");...\n\tfor (Map<String,String> environment : environments){\n\t\tgetGrid1Mapping().put(environment.get(\"name\"),environment.get(\"browser\"));\n\t}\n\tInteger poll=(Integer)hub.get(\"remoteControlPollingIntervalInSeconds\");\n\tif(poll != null){\n\t\tallParams.put(RegistrationRequest.NODE_POLLING,poll.intValue() * 1000);\n\t\tcleanupCycle=poll.intValue() * 1000;\n\t}\n\tInteger timeout=(Integer)hub.get(\"sessionMaxIdleTimeInSeconds\");...\n\tInteger port=(Integer)hub.get(RegistrationRequest.PORT);\n\tif(port != null){\n\t\tport=port.intValue();\n\t}\n\tInteger newSessionWait=(Integer)hub.get(\"newSessionMaxWaitTimeInSeconds\");...\n\tallParams.put(RegistrationRequest.MAX_SESSION,1);\n}","a20":"public void loadFromGridYml(String resource){\n\tInputStream in=Thread.currentThread().getContextClassLoader().getResourceAsStream(resource);...\n\tMap<String,Object> config=(Map<String,Object>)yaml.load(in);\n\tMap<String,Object> hub=(Map<String,Object>)config.get(\"hub\");\n\tList<Map<String,String>> environments=(List<Map<String,String>>)hub.get(\"environments\");\n\tInteger p=(Integer)hub.get(\"port\");...\n\tInteger poll=(Integer)hub.get(\"remoteControlPollingIntervalInSeconds\");...\n\tInteger timeout=(Integer)hub.get(\"sessionMaxIdleTimeInSeconds\");...\n\tInteger port=(Integer)hub.get(RegistrationRequest.PORT);...\n\tInteger newSessionWait=(Integer)hub.get(\"newSessionMaxWaitTimeInSeconds\");...\n\tallParams.put(RegistrationRequest.MAX_SESSION,1);\n}"},{"Origin":"public static Resource newResource(String resource) throws MalformedURLException, IOException {\n\tURL url=null;\n\ttry {\n\t\turl=new URL(resource);\n\t} catch (MalformedURLException e){\n\t\tif(!resource.startsWith(\"ftp:\") && !resource.startsWith(\"file:\") && !resource.startsWith(\"jar:\")){\n\t\t\ttry {\n\t\t\t\tif(resource.startsWith(\"./\"))\n\t\t\t\t\tresource=resource.substring(2);\n\t\t\t\tFile file=new File(resource).getCanonicalFile();\n\t\t\t\turl=file.toURI().toURL();\n\t\t\t\tURLConnection connection=url.openConnection();\n\t\t\t\tFileResource fileResource=new FileResource(url,connection,file);\n\t\t\t\treturn fileResource;\n\t\t\t} catch (Exception e2){\n\t\t\t\tlog.debug(LogSupport.EXCEPTION,e2);\n\t\t\t\tthrow e;\n\t\t\t} \n\t\t}else {\n\t\t\tlog.warn(\"Bad Resource: \" + resource);\n\t\t\tthrow e;\n\t\t}\n\t} \n\tString nurl=url.toString();\n\tif(nurl.length() > 0 && nurl.charAt(nurl.length() - 1) != resource.charAt(resource.length() - 1)){\n\t\tif((nurl.charAt(nurl.length() - 1) != '/' || nurl.charAt(nurl.length() - 2) != resource.charAt(resource.length() - 1)) && (resource.charAt(resource.length() - 1) != '/' || resource.charAt(resource.length() - 2) != nurl.charAt(nurl.length() - 1))){\n\t\t\treturn new BadResource(url,\"Trailing special characters stripped by URL in \" + resource);\n\t\t}\n\t}\n\treturn newResource(url);\n}","a50":"public static Resource newResource(String resource) throws MalformedURLException, IOException {\n\tURL url=null;\n\ttry {\n\t\turl=new URL(resource);\n\t} catch (MalformedURLException e){\n\t\tif(!resource.startsWith(\"ftp:\") && !resource.startsWith(\"file:\") && !resource.startsWith(\"jar:\")){\n\t\t\ttry {...\n\t\t\t\turl=file.toURI().toURL();...\n\t\t\t} catch (Exception e2){...\n\t\t\t} \n\t\t}else {...\n\t\t}\n\t} \n\tString nurl=url.toString();\n\tif(nurl.length() > 0 && nurl.charAt(nurl.length() - 1) != resource.charAt(resource.length() - 1)){\n\t\tif((nurl.charAt(nurl.length() - 1) != '/' || nurl.charAt(nurl.length() - 2) != resource.charAt(resource.length() - 1)) && (resource.charAt(resource.length() - 1) != '/' || resource.charAt(resource.length() - 2) != nurl.charAt(nurl.length() - 1))){\n\t\t\treturn new BadResource(url,\"Trailing special characters stripped by URL in \" + resource);\n\t\t}\n\t}\n\treturn newResource(url);\n}","a20":"public static Resource newResource(String resource) throws MalformedURLException, IOException {\n\tURL url=null;\n\ttry {...\n\t} catch (MalformedURLException e){\n\t\tif(!resource.startsWith(\"ftp:\") && !resource.startsWith(\"file:\") && !resource.startsWith(\"jar:\")){...\n\t\t}else {...\n\t\t}\n\t} ...\n\tif(nurl.length() > 0 && nurl.charAt(nurl.length() - 1) != resource.charAt(resource.length() - 1)){...\n\t}...\n}"},{"Origin":"public String getListHTML(String base,boolean parent) throws IOException {\n\tif(!isDirectory())\n\t\treturn null;\n\tString[] ls=list();\n\tif(ls == null)\n\t\treturn null;\n\tArrays.sort(ls);\n\tString title=\"Directory: \" + URI.decodePath(base);\n\ttitle=StringUtil.replace(StringUtil.replace(title,\"<\",\"&lt;\"),\">\",\"&gt;\");\n\tStringBuffer buf=new StringBuffer(4096);\n\tbuf.append(\"<HTML><HEAD><TITLE>\");\n\tbuf.append(title);\n\tbuf.append(\"<\/TITLE><\/HEAD><BODY>\\n<H1>\");\n\tbuf.append(title);\n\tbuf.append(\"<\/H1><TABLE BORDER=0>\");\n\tif(parent){\n\t\tbuf.append(\"<TR><TD><A HREF=\");\n\t\tbuf.append(URI.encodePath(URI.addPaths(base,\"../\")));\n\t\tbuf.append(\">Parent Directory<\/A><\/TD><TD><\/TD><TD><\/TD><\/TR>\\n\");\n\t}\n\tDateFormat dfmt=DateFormat.getDateTimeInstance(DateFormat.MEDIUM,DateFormat.MEDIUM);\n\tfor (int i=0; i < ls.length; i++){\n\t\tString encoded=URI.encodePath(ls[i]);\n\t\tResource item=addPath(encoded);\n\t\tbuf.append(\"<TR><TD><A HREF=\\\"\");\n\t\tString path=URI.addPaths(base,encoded);\n\t\tif(item.isDirectory() && !path.endsWith(\"/\"))\n\t\t\tpath=URI.addPaths(path,\"/\");\n\t\tbuf.append(path);\n\t\tbuf.append(\"\\\">\");\n\t\tbuf.append(StringUtil.replace(StringUtil.replace(ls[i],\"<\",\"&lt;\"),\">\",\"&gt;\"));\n\t\tbuf.append(\"&nbsp;\");\n\t\tbuf.append(\"<\/TD><TD ALIGN=right>\");\n\t\tbuf.append(item.length());\n\t\tbuf.append(\" bytes&nbsp;<\/TD><TD>\");\n\t\tbuf.append(dfmt.format(new Date(item.lastModified())));\n\t\tbuf.append(\"<\/TD><\/TR>\\n\");\n\t}\n\tbuf.append(\"<\/TABLE>\\n\");\n\tbuf.append(\"<\/BODY><\/HTML>\\n\");\n\treturn buf.toString();\n}","a50":"public String getListHTML(String base,boolean parent) throws IOException {...\n\tString[] ls=list();...\n\tArrays.sort(ls);\n\tString title=\"Directory: \" + URI.decodePath(base);\n\ttitle=StringUtil.replace(StringUtil.replace(title,\"<\",\"&lt;\"),\">\",\"&gt;\");\n\tStringBuffer buf=new StringBuffer(4096);...\n\tif(parent){...\n\t\tbuf.append(URI.encodePath(URI.addPaths(base,\"../\")));...\n\t}\n\tDateFormat dfmt=DateFormat.getDateTimeInstance(DateFormat.MEDIUM,DateFormat.MEDIUM);\n\tfor (int i=0; i < ls.length; i++){\n\t\tString encoded=URI.encodePath(ls[i]);\n\t\tResource item=addPath(encoded);...\n\t\tString path=URI.addPaths(base,encoded);\n\t\tif(item.isDirectory() && !path.endsWith(\"/\"))\n\t\t\tpath=URI.addPaths(path,\"/\");...\n\t\tbuf.append(StringUtil.replace(StringUtil.replace(ls[i],\"<\",\"&lt;\"),\">\",\"&gt;\"));...\n\t\tbuf.append(dfmt.format(new Date(item.lastModified())));...\n\t}...\n\treturn buf.toString();\n}","a20":"public String getListHTML(String base,boolean parent) throws IOException {...\n\tString[] ls=list();...\n\tString title=\"Directory: \" + URI.decodePath(base);\n\ttitle=StringUtil.replace(StringUtil.replace(title,\"<\",\"&lt;\"),\">\",\"&gt;\");\n\tStringBuffer buf=new StringBuffer(4096);...\n\tDateFormat dfmt=DateFormat.getDateTimeInstance(DateFormat.MEDIUM,DateFormat.MEDIUM);\n\tfor (int i=0; i < ls.length; i++){...\n\t\tResource item=addPath(encoded);...\n\t\tString path=URI.addPaths(base,encoded);...\n\t\tbuf.append(StringUtil.replace(StringUtil.replace(ls[i],\"<\",\"&lt;\"),\">\",\"&gt;\"));...\n\t}...\n\treturn buf.toString();\n}"},{"Origin":"protected void scandir(File dir,String vpath,boolean fast){\n\tif(dir == null){\n\t\tthrow new BuildException(\"dir must not be null.\");\n\t}else if(!dir.exists()){\n\t\tthrow new BuildException(dir + \" doesn't exists.\");\n\t}else if(!dir.isDirectory()){\n\t\tthrow new BuildException(dir + \" is not a directory.\");\n\t}\n\tif(fast && hasBeenScanned(vpath)){\n\t\treturn;\n\t}\n\tsetState(\"Scan directory: %s\",vpath);\n\tString[] newfiles=dir.list();\n\tif(newfiles == null){\n\t\tthrow new BuildException(\"IO error scanning directory \" + dir.getAbsolutePath());\n\t}\n\tif(!followSymlinks){\n\t\tList<String> noLinks=new ArrayList<String>();\n\t\tfor (int i=0; i < newfiles.length; i++){\n\t\t\ttry {\n\t\t\t\tif(FILE_UTILS.isSymbolicLink(dir,newfiles[i])){\n\t\t\t\t\tString name=vpath + newfiles[i];\n\t\t\t\t\tFile file=new File(dir,newfiles[i]);\n\t\t\t\t\t(file.isDirectory() ? dirsExcluded : filesExcluded).add(name);\n\t\t\t\t}else {\n\t\t\t\t\tnoLinks.add(newfiles[i]);\n\t\t\t\t}\n\t\t\t} catch (IOException ioe){\n\t\t\t\tString msg=\"IOException caught while checking \" + \"for links, couldn't get canonical path!\";\n\t\t\t\tSystem.err.println(msg);\n\t\t\t\tnoLinks.add(newfiles[i]);\n\t\t\t} \n\t\t}\n\t\tnewfiles=noLinks.toArray(new String[noLinks.size()]);\n\t}\n\tfor (int i=0; i < newfiles.length; i++){\n\t\tString name=vpath + newfiles[i];\n\t\tFile file=new File(dir,newfiles[i]);\n\t\tif(file.isDirectory()){\n\t\t\tif(isIncluded(name)){\n\t\t\t\taccountForIncludedDir(name,file,fast);\n\t\t\t}else {\n\t\t\t\teverythingIncluded=false;\n\t\t\t\tdirsNotIncluded.add(name);\n\t\t\t\tif(fast && couldHoldIncluded(name) && !contentsExcluded(name)){\n\t\t\t\t\tscandir(file,name + File.separator,fast);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(!fast){\n\t\t\t\tscandir(file,name + File.separator,fast);\n\t\t\t}\n\t\t}else if(file.isFile()){\n\t\t\tif(isIncluded(name)){\n\t\t\t\taccountForIncludedFile(name,file,dir);\n\t\t\t}else {\n\t\t\t\teverythingIncluded=false;\n\t\t\t\tfilesNotIncluded.add(name);\n\t\t\t}\n\t\t}\n\t}\n}","a50":"protected void scandir(File dir,String vpath,boolean fast){...\n\tString[] newfiles=dir.list();...\n\tif(!followSymlinks){\n\t\tList<String> noLinks=new ArrayList<String>();\n\t\tfor (int i=0; i < newfiles.length; i++){\n\t\t\ttry {\n\t\t\t\tif(FILE_UTILS.isSymbolicLink(dir,newfiles[i])){\n\t\t\t\t\tString name=vpath + newfiles[i];...\n\t\t\t\t\t(file.isDirectory() ? dirsExcluded : filesExcluded).add(name);\n\t\t\t\t}else {\n\t\t\t\t\tnoLinks.add(newfiles[i]);\n\t\t\t\t}\n\t\t\t} catch (IOException ioe){...\n\t\t\t} \n\t\t}\n\t\tnewfiles=noLinks.toArray(new String[noLinks.size()]);\n\t}\n\tfor (int i=0; i < newfiles.length; i++){\n\t\tString name=vpath + newfiles[i];\n\t\tFile file=new File(dir,newfiles[i]);\n\t\tif(file.isDirectory()){\n\t\t\tif(isIncluded(name)){\n\t\t\t\taccountForIncludedDir(name,file,fast);\n\t\t\t}else {...\n\t\t\t\tdirsNotIncluded.add(name);\n\t\t\t\tif(fast && couldHoldIncluded(name) && !contentsExcluded(name)){\n\t\t\t\t\tscandir(file,name + File.separator,fast);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(!fast){\n\t\t\t\tscandir(file,name + File.separator,fast);\n\t\t\t}\n\t\t}else if ...\n\t}\n}","a20":"protected void scandir(File dir,String vpath,boolean fast){...\n\tString[] newfiles=dir.list();...\n\tif(!followSymlinks){\n\t\tList<String> noLinks=new ArrayList<String>();\n\t\tfor (int i=0; i < newfiles.length; i++){\n\t\t\ttry {...\n\t\t\t} catch (IOException ioe){...\n\t\t\t} \n\t\t}\n\t\tnewfiles=noLinks.toArray(new String[noLinks.size()]);\n\t}\n\tfor (int i=0; i < newfiles.length; i++){\n\t\tString name=vpath + newfiles[i];...\n\t\tif(file.isDirectory()){...\n\t\t}else if ...\n\t}\n}"},{"Origin":"public DiffScope processDiffUnit(DiffUnit diffUnit,DiffPointProcessor processor){\n\tString scopedPath=diffUnit.getScopedPath();\n\tfor (Iterator<Pattern> it=excludes.iterator(); it.hasNext(); ){\n\t\tPattern pattern=it.next();\n\t\tif(pattern.matcher(scopedPath).matches()){\n\t\t\tlog.debug(\"Skipping unit due to exclude: \" + scopedPath);\n\t\t\treturn null;\n\t\t}\n\t}\n\tlog.debug(\"Processing unit \" + scopedPath);\n\tboolean leftExists=diffUnit.leftExists();\n\tboolean rightExists=diffUnit.rightExists();\n\tboolean leftIsDir=diffUnit.leftIsDir();\n\tboolean rightIsDir=diffUnit.rightIsDir();\n\tif(leftExists && !rightExists){\n\t\tDiffPoint diffPoint=new DiffPoint(diffUnit,\"Exists in left only\");\n\t\tprocessor.processDiffPoint(diffPoint);\n\t}else if(rightExists && !leftExists){\n\t\tDiffPoint diffPoint=new DiffPoint(diffUnit,\"Exists in right only\");\n\t\tprocessor.processDiffPoint(diffPoint);\n\t}else if(leftIsDir != rightIsDir){\n\t\tDiffPoint diffPoint=new DiffPoint(diffUnit,\"Dir/File mismatch\");\n\t\tprocessor.processDiffPoint(diffPoint);\n\t}else if(!leftIsDir && !rightIsDir){\n\t\tboolean foundHandler=false;\n\t\tfor (Iterator<Map.Entry<String,DiffUnitProcessor>> it=fileHandlers.entrySet().iterator(); it.hasNext(); ){\n\t\t\tMap.Entry<String,DiffUnitProcessor> entry=it.next();\n\t\t\tString regex=entry.getKey();\n\t\t\tif(scopedPath.matches(regex)){\n\t\t\t\tDiffUnitProcessor fileHandler=entry.getValue();\n\t\t\t\tDiffScope childScope=fileHandler.processDiffUnit(diffUnit,processor);\n\t\t\t\tif(childScope != null){\n\t\t\t\t\tchildScope.scan(this,processor);\n\t\t\t\t}\n\t\t\t\tfoundHandler=true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(!foundHandler){\n\t\t\tlog.error(\"No applicable handler found for path: \" + scopedPath);\n\t\t}\n\t}\n\treturn null;\n}","a50":"public DiffScope processDiffUnit(DiffUnit diffUnit,DiffPointProcessor processor){\n\tString scopedPath=diffUnit.getScopedPath();\n\tfor (Iterator<Pattern> it=excludes.iterator(); it.hasNext(); ){\n\t\tPattern pattern=it.next();...\n\t}...\n\tboolean leftExists=diffUnit.leftExists();\n\tboolean rightExists=diffUnit.rightExists();\n\tboolean leftIsDir=diffUnit.leftIsDir();\n\tboolean rightIsDir=diffUnit.rightIsDir();\n\tif(leftExists && !rightExists){\n\t\tDiffPoint diffPoint=new DiffPoint(diffUnit,\"Exists in left only\");\n\t\tprocessor.processDiffPoint(diffPoint);\n\t}else if(rightExists && !leftExists){...\n\t}else if(leftIsDir != rightIsDir){...\n\t\tprocessor.processDiffPoint(diffPoint);\n\t}else if(!leftIsDir && !rightIsDir){...\n\t\tfor (Iterator<Map.Entry<String,DiffUnitProcessor>> it=fileHandlers.entrySet().iterator(); it.hasNext(); ){\n\t\t\tMap.Entry<String,DiffUnitProcessor> entry=it.next();\n\t\t\tString regex=entry.getKey();\n\t\t\tif(scopedPath.matches(regex)){\n\t\t\t\tDiffUnitProcessor fileHandler=entry.getValue();\n\t\t\t\tDiffScope childScope=fileHandler.processDiffUnit(diffUnit,processor);...\n\t\t\t}\n\t\t}...\n\t}...\n}","a20":"public DiffScope processDiffUnit(DiffUnit diffUnit,DiffPointProcessor processor){\n\tString scopedPath=diffUnit.getScopedPath();\n\tfor (Iterator<Pattern> it=excludes.iterator(); it.hasNext(); ){\n\t\tPattern pattern=it.next();...\n\t}...\n\tboolean leftExists=diffUnit.leftExists();\n\tboolean rightExists=diffUnit.rightExists();\n\tboolean leftIsDir=diffUnit.leftIsDir();\n\tboolean rightIsDir=diffUnit.rightIsDir();\n\tif(leftExists && !rightExists){...\n\t\tprocessor.processDiffPoint(diffPoint);\n\t}else if ......\n}"},{"Origin":"protected void slowScan(){\n\tsynchronized (slowScanLock){\n\t\tif(haveSlowResults){\n\t\t\treturn;\n\t\t}\n\t\tif(slowScanning){\n\t\t\twhile(slowScanning){\n\t\t\t\ttry {\n\t\t\t\t\tslowScanLock.wait();\n\t\t\t\t} catch (InterruptedException e){\n\t\t\t\t} \n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tslowScanning=true;\n\t}\n\ttry {\n\t\tsynchronized (this){\n\t\t\tfor (String excluded : dirsExcluded){\n\t\t\t\tif(!couldHoldIncluded(excluded)){\n\t\t\t\t\tscandir(new File(basedir,excluded),excluded + File.separator,false);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (String notIncluded : dirsNotIncluded){\n\t\t\t\tif(!couldHoldIncluded(notIncluded)){\n\t\t\t\t\tscandir(new File(basedir,notIncluded),notIncluded + File.separator,false);\n\t\t\t\t}\n\t\t\t}\n\t\t\tclearCaches();\n\t\t}\n\t} finally {\n\t\tsynchronized (slowScanLock){\n\t\t\thaveSlowResults=true;\n\t\t\tslowScanning=false;\n\t\t\tslowScanLock.notifyAll();\n\t\t}\n\t} \n}","a50":"protected void slowScan(){\n\tsynchronized (slowScanLock){...\n\t}\n\ttry {\n\t\tsynchronized (this){\n\t\t\tfor (String excluded : dirsExcluded){\n\t\t\t\tif(!couldHoldIncluded(excluded)){\n\t\t\t\t\tscandir(new File(basedir,excluded),excluded + File.separator,false);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (String notIncluded : dirsNotIncluded){\n\t\t\t\tif(!couldHoldIncluded(notIncluded)){\n\t\t\t\t\tscandir(new File(basedir,notIncluded),notIncluded + File.separator,false);\n\t\t\t\t}\n\t\t\t}...\n\t\t}\n\t} finally {\n\t\tsynchronized (slowScanLock){...\n\t\t\tslowScanLock.notifyAll();\n\t\t}\n\t} \n}","a20":"protected void slowScan(){\n\tsynchronized (slowScanLock){...\n\t}\n\ttry {\n\t\tsynchronized (this){\n\t\t\tfor (String excluded : dirsExcluded){...\n\t\t\t}...\n\t\t}\n\t} finally {\n\t\tsynchronized (slowScanLock){...\n\t\t}\n\t} \n}"},{"Origin":"public void scan() throws IllegalStateException {\n\tsynchronized (scanLock){\n\t\tif(scanning){\n\t\t\twhile(scanning){\n\t\t\t\ttry {\n\t\t\t\t\tscanLock.wait();\n\t\t\t\t} catch (InterruptedException e){\n\t\t\t\t\tcontinue;\n\t\t\t\t} \n\t\t\t}\n\t\t\tif(illegal != null){\n\t\t\t\tthrow illegal;\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tscanning=true;\n\t}\n\ttry {\n\t\tsynchronized (this){\n\t\t\tillegal=null;\n\t\t\tclearResults();\n\t\t\tif(basedir == null){\n\t\t\t\tillegal=new IllegalStateException(\"No basedir set\");\n\t\t\t}else {\n\t\t\t\tif(!basedir.exists()){\n\t\t\t\t\tillegal=new IllegalStateException(\"basedir \" + basedir + \" does not exist\");\n\t\t\t\t}\n\t\t\t\tif(!basedir.isDirectory()){\n\t\t\t\t\tillegal=new IllegalStateException(\"basedir \" + basedir + \" is not a directory\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(illegal != null){\n\t\t\t\tthrow illegal;\n\t\t\t}\n\t\t\tif(isIncluded(\"\")){\n\t\t\t\tif(!isExcluded(\"\")){\n\t\t\t\t\tif(isSelected(\"\",basedir)){\n\t\t\t\t\t\tdirsIncluded.add(\"\");\n\t\t\t\t\t}else {\n\t\t\t\t\t\tdirsDeselected.add(\"\");\n\t\t\t\t\t}\n\t\t\t\t}else {\n\t\t\t\t\tdirsExcluded.add(\"\");\n\t\t\t\t}\n\t\t\t}else {\n\t\t\t\tdirsNotIncluded.add(\"\");\n\t\t\t}\n\t\t\tcheckIncludePatterns();\n\t\t\tclearCaches();\n\t\t}\n\t} finally {\n\t\tsynchronized (scanLock){\n\t\t\tscanning=false;\n\t\t\tscanLock.notifyAll();\n\t\t}\n\t} \n}","a50":"public void scan() throws IllegalStateException {\n\tsynchronized (scanLock){\n\t\tif(scanning){\n\t\t\twhile(scanning){\n\t\t\t\ttry {\n\t\t\t\t\tscanLock.wait();\n\t\t\t\t} catch (InterruptedException e){...\n\t\t\t\t} \n\t\t\t}...\n\t\t\treturn;\n\t\t}...\n\t}\n\ttry {\n\t\tsynchronized (this){...\n\t\t\tif(isIncluded(\"\")){\n\t\t\t\tif(!isExcluded(\"\")){\n\t\t\t\t\tif(isSelected(\"\",basedir)){\n\t\t\t\t\t\tdirsIncluded.add(\"\");\n\t\t\t\t\t}else {\n\t\t\t\t\t\tdirsDeselected.add(\"\");\n\t\t\t\t\t}\n\t\t\t\t}else {\n\t\t\t\t\tdirsExcluded.add(\"\");\n\t\t\t\t}\n\t\t\t}else {\n\t\t\t\tdirsNotIncluded.add(\"\");\n\t\t\t}...\n\t\t}\n\t} finally {\n\t\tsynchronized (scanLock){...\n\t\t\tscanLock.notifyAll();\n\t\t}\n\t} \n}","a20":"public void scan() throws IllegalStateException {\n\tsynchronized (scanLock){...\n\t}\n\ttry {\n\t\tsynchronized (this){...\n\t\t\tif(isIncluded(\"\")){...\n\t\t\t}else {\n\t\t\t\tdirsNotIncluded.add(\"\");\n\t\t\t}...\n\t\t}\n\t} finally {\n\t\tsynchronized (scanLock){...\n\t\t\tscanLock.notifyAll();\n\t\t}\n\t} \n}"},{"Origin":"public void run(){\n\tURL link;\n\tint original;\n\tint index;\n\tString href;\n\tURL[][] urls;\n\twhile(true){\n\t\ttry {\n\t\t\tlink=null;\n\t\t\toriginal=-1;\n\t\t\tsynchronized (mUrls){\n\t\t\t\tif(0 != mUrls.size()){\n\t\t\t\t\toriginal=mUrls.size();\n\t\t\t\t\tindex=(int)(Math.random() * original);\n\t\t\t\t\tlink=mUrls.remove(index);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(null != link){\n\t\t\t\tupdateQueueSize(original,mUrls.size());\n\t\t\t\thref=link.toString();\n\t\t\t\tsetCurrentURL(href);\n\t\t\t\tmVisited.put(href,link);\n\t\t\t\tupdateVisitedSize(mVisited.size() - 1,mVisited.size());\n\t\t\t\turls=getImageLinks(link);\n\t\t\t\tfetch(urls[0]);\n\t\t\t\tappend(filter(urls[1]));\n\t\t\t}else \n\t\t\t\tThread.sleep(100);\n\t\t\tif(!mActive)\n\t\t\t\tsynchronized (mUrls){\n\t\t\t\t\tmUrls.wait();\n\t\t\t\t}\n\t\t} catch (Throwable t){\n\t\t\tt.printStackTrace();\n\t\t} \n\t}\n}","a50":"public void run(){...\n\tint original;\n\tint index;...\n\tURL[][] urls;\n\twhile(true){\n\t\ttry {...\n\t\t\tsynchronized (mUrls){\n\t\t\t\tif(0 != mUrls.size()){\n\t\t\t\t\toriginal=mUrls.size();\n\t\t\t\t\tindex=(int)(Math.random() * original);\n\t\t\t\t\tlink=mUrls.remove(index);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(null != link){\n\t\t\t\tupdateQueueSize(original,mUrls.size());...\n\t\t\t\tupdateVisitedSize(mVisited.size() - 1,mVisited.size());...\n\t\t\t\tfetch(urls[0]);\n\t\t\t\tappend(filter(urls[1]));\n\t\t\t}else ......\n\t\t} catch (Throwable t){...\n\t\t} \n\t}\n}","a20":"public void run(){...\n\tint original;...\n\twhile(true){\n\t\ttry {...\n\t\t\tsynchronized (mUrls){...\n\t\t\t}\n\t\t\tif(null != link){...\n\t\t\t\tupdateVisitedSize(mVisited.size() - 1,mVisited.size());...\n\t\t\t}else ......\n\t\t} catch (Throwable t){...\n\t\t} \n\t}\n}"},{"Origin":"public static void main(String[] argv) throws IOException, SAXException {\n\tint optind=getopts(options,argv);\n\tif(hasOption(options,\"--help\")){\n\t\tdoHelp();\n\t\treturn;\n\t}\n\tif(hasOption(options,\"--version\")){\n\t\tSystem.err.println(\"TagSoup version 1.2.1\");\n\t\treturn;\n\t}\n\tif(argv.length == optind){\n\t\tprocess(\"\",System.out);\n\t}else if(hasOption(options,\"--files\")){\n\t\tfor (int i=optind; i < argv.length; i++){\n\t\t\tString src=argv[i];\n\t\t\tString dst;\n\t\t\tint j=src.lastIndexOf('.');\n\t\t\tif(j == -1)\n\t\t\t\tdst=src + \".xhtml\";\n\t\t\telse if(src.endsWith(\".xhtml\"))\n\t\t\t\tdst=src + \"_\";\n\t\t\telse \n\t\t\t\tdst=src.substring(0,j) + \".xhtml\";\n\t\t\tSystem.err.println(\"src: \" + src + \" dst: \"+ dst);\n\t\t\tOutputStream os=new FileOutputStream(dst);\n\t\t\tprocess(src,os);\n\t\t}\n\t}else {\n\t\tfor (int i=optind; i < argv.length; i++){\n\t\t\tSystem.err.println(\"src: \" + argv[i]);\n\t\t\tprocess(argv[i],System.out);\n\t\t}\n\t}\n}","a50":"public static void main(String[] argv) throws IOException, SAXException {\n\tint optind=getopts(options,argv);...\n\tif(argv.length == optind){\n\t\tprocess(\"\",System.out);\n\t}else if(hasOption(options,\"--files\")){\n\t\tfor (int i=optind; i < argv.length; i++){\n\t\t\tString src=argv[i];\n\t\t\tString dst;\n\t\t\tint j=src.lastIndexOf('.');\n\t\t\tif(j == -1)\n\t\t\t\tdst=src + \".xhtml\";\n\t\t\telse if ......\n\t\t\tprocess(src,os);\n\t\t}\n\t}else {\n\t\tfor (int i=optind; i < argv.length; i++){\n\t\t\tSystem.err.println(\"src: \" + argv[i]);\n\t\t\tprocess(argv[i],System.out);\n\t\t}\n\t}\n}","a20":"public static void main(String[] argv) throws IOException, SAXException {\n\tint optind=getopts(options,argv);...\n\tif(argv.length == optind){...\n\t}else if(hasOption(options,\"--files\")){\n\t\tfor (int i=optind; i < argv.length; i++){\n\t\t\tString src=argv[i];\n\t\t\tString dst;...\n\t\t}\n\t}else {...\n\t}\n}"},{"Origin":"protected void process(NodeFilter filter) throws ParserException {\n\tString url;\n\tint bookmark;\n\tNodeList list;\n\tNodeList robots;\n\tMetaTag robot;\n\tString content;\n\tFile file;\n\tFile dir;\n\tPrintWriter out;\n\turl=(String)mPages.remove(0);\n\tSystem.out.println(\"processing \" + url);\n\tmFinished.add(url);\n\ttry {\n\t\tbookmark=mPages.size();\n\t\tmParser.setURL(url);\n\t\ttry {\n\t\t\tlist=new NodeList();\n\t\t\tfor (NodeIterator e=mParser.elements(); e.hasMoreNodes(); )\n\t\t\t\tlist.add(e.nextNode());\n\t\t} catch (EncodingChangeException ece){\n\t\t\tmParser.reset();\n\t\t\tlist=new NodeList();\n\t\t\tfor (NodeIterator e=mParser.elements(); e.hasMoreNodes(); )\n\t\t\t\tlist.add(e.nextNode());\n\t\t} \n\t\trobots=list.extractAllNodesThatMatch(new AndFilter(new NodeClassFilter(MetaTag.class),new HasAttributeFilter(\"name\",\"robots\")),true);\n\t\tif(0 != robots.size()){\n\t\t\trobot=(MetaTag)robots.elementAt(0);\n\t\t\tcontent=robot.getAttribute(\"content\").toLowerCase();\n\t\t\tif((-1 != content.indexOf(\"none\")) || (-1 != content.indexOf(\"nofollow\")))\n\t\t\t\tfor (int i=bookmark; i < mPages.size(); i++)\n\t\t\t\t\tmPages.remove(i);\n\t\t\tif((-1 != content.indexOf(\"none\")) || (-1 != content.indexOf(\"noindex\")))\n\t\t\t\treturn;\n\t\t}\n\t\tif(null != filter)\n\t\t\tlist.keepAllNodesThatMatch(filter,true);\n\t\tfile=new File(getTarget(),makeLocalLink(url,\"\"));\n\t\tdir=file.getParentFile();\n\t\tif(!dir.exists())\n\t\t\tdir.mkdirs();\n\t\telse if(!dir.isDirectory()){\n\t\t\tdir=new File(dir.getParentFile(),dir.getName() + \".content\");\n\t\t\tif(!dir.exists())\n\t\t\t\tdir.mkdirs();\n\t\t\tfile=new File(dir,file.getName());\n\t\t}\n\t\ttry {\n\t\t\tout=new PrintWriter(new FileOutputStream(file));\n\t\t\tfor (int i=0; i < list.size(); i++)\n\t\t\t\tout.print(list.elementAt(i).toHtml());\n\t\t\tout.close();\n\t\t} catch (FileNotFoundException fnfe){\n\t\t\tfnfe.printStackTrace();\n\t\t} \n\t} catch (ParserException pe){\n\t\tString message;\n\t\tmessage=pe.getMessage();\n\t\tif((null != message) && (message.endsWith(\"does not contain text\"))){\n\t\t\tif(!mCopied.contains(url))\n\t\t\t\tif(!mImages.contains(url))\n\t\t\t\t\tmImages.add(url);\n\t\t\tmFinished.remove(url);\n\t\t}else \n\t\t\tthrow pe;\n\t} \n}","a50":"protected void process(NodeFilter filter) throws ParserException {\n\tString url;\n\tint bookmark;\n\tNodeList list;\n\tNodeList robots;\n\tMetaTag robot;\n\tString content;...\n\tFile dir;...\n\turl=(String)mPages.remove(0);...\n\tmFinished.add(url);\n\ttry {\n\t\tbookmark=mPages.size();\n\t\tmParser.setURL(url);\n\t\ttry {\n\t\t\tlist=new NodeList();\n\t\t\tfor (NodeIterator e=mParser.elements(); e.hasMoreNodes(); )\n\t\t\t\tlist.add(e.nextNode());\n\t\t} catch (EncodingChangeException ece){...\n\t\t\tfor (NodeIterator e=mParser.elements(); e.hasMoreNodes(); )\n\t\t\t\tlist.add(e.nextNode());\n\t\t} \n\t\trobots=list.extractAllNodesThatMatch(new AndFilter(new NodeClassFilter(MetaTag.class),new HasAttributeFilter(\"name\",\"robots\")),true);\n\t\tif(0 != robots.size()){...\n\t\t\tcontent=robot.getAttribute(\"content\").toLowerCase();\n\t\t\tif((-1 != content.indexOf(\"none\")) || (-1 != content.indexOf(\"nofollow\")))\n\t\t\t\tfor (int i=bookmark; i < mPages.size(); i++)\n\t\t\t\t\tmPages.remove(i);...\n\t\t}...\n\t\tdir=file.getParentFile();\n\t\tif(!dir.exists())...\n\t\telse if ...\n\t\ttry {...\n\t\t\tfor (int i=0; i < list.size(); i++)\n\t\t\t\tout.print(list.elementAt(i).toHtml());...\n\t\t} catch (FileNotFoundException fnfe){...\n\t\t} \n\t} catch (ParserException pe){...\n\t\tif((null != message) && (message.endsWith(\"does not contain text\"))){...\n\t\t}else ...\n\t} \n}","a20":"protected void process(NodeFilter filter) throws ParserException {\n\tString url;...\n\tNodeList list;...\n\ttry {...\n\t\ttry {...\n\t\t\tfor (NodeIterator e=mParser.elements(); e.hasMoreNodes(); )...\n\n\t\t} catch (EncodingChangeException ece){...\n\t\t\tfor (NodeIterator e=mParser.elements(); e.hasMoreNodes(); )...\n\n\t\t} ...\n\t\tif(0 != robots.size()){...\n\t\t\tif((-1 != content.indexOf(\"none\")) || (-1 != content.indexOf(\"nofollow\")))......\n\t\t}...\n\t\ttry {...\n\t\t\tfor (int i=0; i < list.size(); i++)...\n...\n\t\t} catch (FileNotFoundException fnfe){...\n\t\t} \n\t} catch (ParserException pe){...\n\t\tif((null != message) && (message.endsWith(\"does not contain text\"))){...\n\t\t}else ...\n\t} \n}"},{"Origin":"protected Node parsePI(int start) throws ParserException {\n\tboolean done;\n\tchar ch;\n\tint state;\n\tVector attributes;\n\tint code;\n\tdone=false;\n\tstate=0;\n\tcode=0;\n\tattributes=new Vector();\n\twhile(!done){\n\t\tch=mPage.getCharacter(mCursor);\n\t\tswitch (state){\n\t\tcase 0:\n\t\t\tswitch (ch){\n\t\t\tcase '?':\n\t\t\t\tcode=mCursor.getPosition();\n\t\t\t\tattributes.addElement(new PageAttribute(mPage,start + 1,code,-1,-1,(char)0));\n\t\t\t\tstate=1;\n\t\t\t\tbreak;\n\t\t\tdefault :\n\t\t\t\tdone=true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tswitch (ch){\n\t\t\tcase Page.EOF:\n\t\t\tcase '>':\n\t\t\t\tdone=true;\n\t\t\t\tbreak;\n\t\t\tcase '\\'':\n\t\t\tcase '\"':\n\t\t\t\tstate=ch;\n\t\t\t\tbreak;\n\t\t\tcase '?':\n\t\t\t\tstate=2;\n\t\t\t\tbreak;\n\t\t\tdefault :\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tswitch (ch){\n\t\t\tcase Page.EOF:\n\t\t\t\tdone=true;\n\t\t\t\tbreak;\n\t\t\tcase '>':\n\t\t\t\tstate=3;\n\t\t\t\tdone=true;\n\t\t\t\tbreak;\n\t\t\tdefault :\n\t\t\t\tstate=1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase '\"':\n\t\t\tswitch (ch){\n\t\t\tcase Page.EOF:\n\t\t\t\tdone=true;\n\t\t\t\tbreak;\n\t\t\tcase '\"':\n\t\t\t\tstate=1;\n\t\t\t\tbreak;\n\t\t\tdefault :\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase '\\'':\n\t\t\tswitch (ch){\n\t\t\tcase Page.EOF:\n\t\t\t\tdone=true;\n\t\t\t\tbreak;\n\t\t\tcase '\\'':\n\t\t\t\tstate=1;\n\t\t\t\tbreak;\n\t\t\tdefault :\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault :\n\t\t\tthrow new IllegalStateException(\"Somehow managed to get into invalid state  \" + state);\n\t\t}\n\t}\n\tif(3 == state){\n\t\tif(0 != code){\n\t\t\tstate=mCursor.getPosition() - 2;\n\t\t\tattributes.addElement(new PageAttribute(mPage,code,state,-1,-1,(char)0));\n\t\t\tattributes.addElement(new PageAttribute(mPage,state,state + 1,-1,-1,(char)0));\n\t\t}else \n\t\t\tthrow new IllegalStateException(\"processing instruction with no content\");\n\t}else \n\t\treturn (parseString(start,true));\n\treturn (makeTag(start,mCursor.getPosition(),attributes));\n}","a50":"protected Node parsePI(int start) throws ParserException {\n\tboolean done;\n\tchar ch;\n\tint state;\n\tVector attributes;...\n\twhile(!done){\n\t\tch=mPage.getCharacter(mCursor);\n\t\tswitch (state){\n\t\tcase 0:\n\t\t\tswitch (ch){\n\t\t\tcase '?':\n\t\t\t\tcode=mCursor.getPosition();\n\t\t\t\tattributes.addElement(new PageAttribute(mPage,start + 1,code,-1,-1,(char)0));...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tswitch (ch){...\n\t\t\tcase '>':...\n\t\t\t\tbreak;\n\t\t\tcase '\\'':\n\t\t\tcase '\"':...\n\t\t\t\tbreak;\n\t\t\tcase '?':...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase '\"':\n\t\t\tswitch (ch){...\n\t\t\tcase '\"':...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase '\\'':\n\t\t\tswitch (ch){\n\t\t\tcase Page.EOF:...\n\t\t\t\tbreak;\n\t\t\tcase '\\'':...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(3 == state){\n\t\tif(0 != code){...\n\t\t\tattributes.addElement(new PageAttribute(mPage,code,state,-1,-1,(char)0));...\n\t\t}else ...\n\t}else \n\t\treturn (parseString(start,true));\n\treturn (makeTag(start,mCursor.getPosition(),attributes));\n}","a20":"protected Node parsePI(int start) throws ParserException {\n\tboolean done;\n\tchar ch;\n\tint state;...\n\twhile(!done){\n\t\tch=mPage.getCharacter(mCursor);\n\t\tswitch (state){\n\t\tcase 0:\n\t\t\tswitch (ch){\n\t\t\tcase '?':\n\t\t\t\tcode=mCursor.getPosition();\n\t\t\t\tattributes.addElement(new PageAttribute(mPage,start + 1,code,-1,-1,(char)0));...\n\t\t\t}...\n\t\tcase '\"':...\n\t\tcase '\\'':...\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(3 == state){...\n\t}else \n\t\treturn (parseString(start,true));\n\treturn (makeTag(start,mCursor.getPosition(),attributes));\n}"},{"Origin":"protected void doSAX(Node node) throws ParserException, SAXException {\n\tTag tag;\n\tTag end;\n\tif(node instanceof Remark){\n\t\tString text=mParser.getLexer().getPage().getText(node.getStartPosition(),node.getEndPosition());\n\t\tmContentHandler.ignorableWhitespace(text.toCharArray(),0,text.length());\n\t}else if(node instanceof Text){\n\t\tString text=mParser.getLexer().getPage().getText(node.getStartPosition(),node.getEndPosition());\n\t\ttext=Translate.decode(text);\n\t\tmContentHandler.characters(text.toCharArray(),0,text.length());\n\t}else if(node instanceof Tag){\n\t\ttag=(Tag)node;\n\t\tif(mNameSpaces)\n\t\t\tmSupport.processName(tag.getTagName(),mParts,false);\n\t\telse {\n\t\t\tmParts[0]=\"\";\n\t\t\tmParts[1]=\"\";\n\t\t}\n\t\tif(mNameSpacePrefixes)\n\t\t\tmParts[2]=tag.getTagName();\n\t\telse if(mNameSpaces)\n\t\t\tmParts[2]=\"\";\n\t\telse \n\t\t\tmParts[2]=tag.getTagName();\n\t\tmContentHandler.startElement(mParts[0],mParts[1],mParts[2],new Attributes(tag,mSupport,mParts));\n\t\tNodeList children=tag.getChildren();\n\t\tif(null != children)\n\t\t\tfor (int i=0; i < children.size(); i++)\n\t\t\t\tdoSAX(children.elementAt(i));\n\t\tend=tag.getEndTag();\n\t\tif(null != end){\n\t\t\tif(mNameSpaces)\n\t\t\t\tmSupport.processName(end.getTagName(),mParts,false);\n\t\t\telse {\n\t\t\t\tmParts[0]=\"\";\n\t\t\t\tmParts[1]=\"\";\n\t\t\t}\n\t\t\tif(mNameSpacePrefixes)\n\t\t\t\tmParts[2]=end.getTagName();\n\t\t\telse if(mNameSpaces)\n\t\t\t\tmParts[2]=\"\";\n\t\t\telse \n\t\t\t\tmParts[2]=end.getTagName();\n\t\t\tmContentHandler.endElement(mParts[0],mParts[1],mParts[2]);\n\t\t}\n\t}\n}","a50":"protected void doSAX(Node node) throws ParserException, SAXException {\n\tTag tag;\n\tTag end;\n\tif(node instanceof Remark){\n\t\tString text=mParser.getLexer().getPage().getText(node.getStartPosition(),node.getEndPosition());\n\t\tmContentHandler.ignorableWhitespace(text.toCharArray(),0,text.length());\n\t}else if(node instanceof Text){\n\t\tString text=mParser.getLexer().getPage().getText(node.getStartPosition(),node.getEndPosition());\n\t\ttext=Translate.decode(text);\n\t\tmContentHandler.characters(text.toCharArray(),0,text.length());\n\t}else if(node instanceof Tag){\n\t\ttag=(Tag)node;\n\t\tif(mNameSpaces)\n\t\t\tmSupport.processName(tag.getTagName(),mParts,false);\n\t\telse {...\n\t\t}...\n\t\tmContentHandler.startElement(mParts[0],mParts[1],mParts[2],new Attributes(tag,mSupport,mParts));\n\t\tNodeList children=tag.getChildren();\n\t\tif(null != children)\n\t\t\tfor (int i=0; i < children.size(); i++)\n\t\t\t\tdoSAX(children.elementAt(i));\n\t\tend=tag.getEndTag();\n\t\tif(null != end){...\n\t\t\tmContentHandler.endElement(mParts[0],mParts[1],mParts[2]);\n\t\t}\n\t}\n}","a20":"protected void doSAX(Node node) throws ParserException, SAXException {...\n\tTag end;\n\tif(node instanceof Remark){\n\t\tString text=mParser.getLexer().getPage().getText(node.getStartPosition(),node.getEndPosition());\n\t\tmContentHandler.ignorableWhitespace(text.toCharArray(),0,text.length());\n\t}else if(node instanceof Text){\n\t\tString text=mParser.getLexer().getPage().getText(node.getStartPosition(),node.getEndPosition());...\n\t}else if(node instanceof Tag){...\n\t\tif(null != children)\n\t\t\tfor (int i=0; i < children.size(); i++)...\n...\n\t\tif(null != end){...\n\t\t}\n\t}\n}"},{"Origin":"protected Socket _openDataConnection_(String command,String arg) throws IOException {\n\tif(__dataConnectionMode != ACTIVE_LOCAL_DATA_CONNECTION_MODE && __dataConnectionMode != PASSIVE_LOCAL_DATA_CONNECTION_MODE){\n\t\treturn null;\n\t}\n\tfinal boolean isInet6Address=getRemoteAddress() instanceof Inet6Address;\n\tSocket socket;\n\tif(__dataConnectionMode == ACTIVE_LOCAL_DATA_CONNECTION_MODE){\n\t\tServerSocket server=_serverSocketFactory_.createServerSocket(getActivePort(),1,getHostAddress());\n\t\ttry {\n\t\t\tif(isInet6Address){\n\t\t\t\tif(!FTPReply.isPositiveCompletion(eprt(getReportHostAddress(),server.getLocalPort()))){\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}else {\n\t\t\t\tif(!FTPReply.isPositiveCompletion(port(getReportHostAddress(),server.getLocalPort()))){\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif((__restartOffset > 0) && !restart(__restartOffset)){\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif(!FTPReply.isPositivePreliminary(sendCommand(command,arg))){\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif(__dataTimeout >= 0){\n\t\t\t\tserver.setSoTimeout(__dataTimeout);\n\t\t\t}\n\t\t\tsocket=server.accept();\n\t\t} finally {\n\t\t\tserver.close();\n\t\t} \n\t}else {\n\t\tboolean attemptEPSV=isUseEPSVwithIPv4() || isInet6Address;\n\t\tif(attemptEPSV && epsv() == FTPReply.ENTERING_EPSV_MODE){\n\t\t\t_parseExtendedPassiveModeReply(_replyLines.get(0));\n\t\t}else {\n\t\t\tif(isInet6Address){\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif(pasv() != FTPReply.ENTERING_PASSIVE_MODE){\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\t_parsePassiveModeReply(_replyLines.get(0));\n\t\t}\n\t\tsocket=_socketFactory_.createSocket();\n\t\tsocket.connect(new InetSocketAddress(__passiveHost,__passivePort),connectTimeout);\n\t\tif((__restartOffset > 0) && !restart(__restartOffset)){\n\t\t\tsocket.close();\n\t\t\treturn null;\n\t\t}\n\t\tif(!FTPReply.isPositivePreliminary(sendCommand(command,arg))){\n\t\t\tsocket.close();\n\t\t\treturn null;\n\t\t}\n\t}\n\tif(__remoteVerificationEnabled && !verifyRemote(socket)){\n\t\tsocket.close();\n\t\tthrow new IOException(\"Host attempting data connection \" + socket.getInetAddress().getHostAddress() + \" is not same as server \"+ getRemoteAddress().getHostAddress());\n\t}\n\tif(__dataTimeout >= 0){\n\t\tsocket.setSoTimeout(__dataTimeout);\n\t}\n\treturn socket;\n}","a50":"protected Socket _openDataConnection_(String command,String arg) throws IOException {...\n\tfinal boolean isInet6Address=getRemoteAddress() instanceof Inet6Address;\n\tSocket socket;\n\tif(__dataConnectionMode == ACTIVE_LOCAL_DATA_CONNECTION_MODE){\n\t\tServerSocket server=_serverSocketFactory_.createServerSocket(getActivePort(),1,getHostAddress());\n\t\ttry {\n\t\t\tif(isInet6Address){\n\t\t\t\tif(!FTPReply.isPositiveCompletion(eprt(getReportHostAddress(),server.getLocalPort()))){\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}else {\n\t\t\t\tif(!FTPReply.isPositiveCompletion(port(getReportHostAddress(),server.getLocalPort()))){\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}...\n\t\t\tif(__dataTimeout >= 0){\n\t\t\t\tserver.setSoTimeout(__dataTimeout);\n\t\t\t}\n\t\t\tsocket=server.accept();\n\t\t} finally {\n\t\t\tserver.close();\n\t\t} \n\t}else {\n\t\tboolean attemptEPSV=isUseEPSVwithIPv4() || isInet6Address;\n\t\tif(attemptEPSV && epsv() == FTPReply.ENTERING_EPSV_MODE){\n\t\t\t_parseExtendedPassiveModeReply(_replyLines.get(0));\n\t\t}else {...\n\t\t\t_parsePassiveModeReply(_replyLines.get(0));\n\t\t}\n\t\tsocket=_socketFactory_.createSocket();\n\t\tsocket.connect(new InetSocketAddress(__passiveHost,__passivePort),connectTimeout);...\n\t}...\n\tif(__dataTimeout >= 0){\n\t\tsocket.setSoTimeout(__dataTimeout);\n\t}\n\treturn socket;\n}","a20":"protected Socket _openDataConnection_(String command,String arg) throws IOException {...\n\tSocket socket;\n\tif(__dataConnectionMode == ACTIVE_LOCAL_DATA_CONNECTION_MODE){\n\t\tServerSocket server=_serverSocketFactory_.createServerSocket(getActivePort(),1,getHostAddress());\n\t\ttry {...\n\t\t\tif(__dataTimeout >= 0){...\n\t\t\t}\n\t\t\tsocket=server.accept();\n\t\t} finally {\n\t\t\tserver.close();\n\t\t} \n\t}else {\n\t\tboolean attemptEPSV=isUseEPSVwithIPv4() || isInet6Address;...\n\t\tsocket=_socketFactory_.createSocket();\n\t\tsocket.connect(new InetSocketAddress(__passiveHost,__passivePort),connectTimeout);...\n\t}...\n\treturn socket;\n}"},{"Origin":"@Override protected Socket _openDataConnection_(int command,String arg) throws IOException {\n\tSocket socket=super._openDataConnection_(command,arg);\n\t_prepareDataSocket_(socket);\n\tif(socket instanceof SSLSocket){\n\t\tSSLSocket sslSocket=(SSLSocket)socket;\n\t\tsslSocket.setUseClientMode(isClientMode);\n\t\tsslSocket.setEnableSessionCreation(isCreation);\n\t\tif(!isClientMode){\n\t\t\tsslSocket.setNeedClientAuth(isNeedClientAuth);\n\t\t\tsslSocket.setWantClientAuth(isWantClientAuth);\n\t\t}\n\t\tif(suites != null){\n\t\t\tsslSocket.setEnabledCipherSuites(suites);\n\t\t}\n\t\tif(protocols != null){\n\t\t\tsslSocket.setEnabledProtocols(protocols);\n\t\t}\n\t\tsslSocket.startHandshake();\n\t}\n\treturn socket;\n}","a50":"@Override protected Socket _openDataConnection_(int command,String arg) throws IOException {\n\tSocket socket=super._openDataConnection_(command,arg);\n\t_prepareDataSocket_(socket);\n\tif(socket instanceof SSLSocket){\n\t\tSSLSocket sslSocket=(SSLSocket)socket;...\n\t\tsslSocket.setEnableSessionCreation(isCreation);...\n\t\tsslSocket.startHandshake();\n\t}\n\treturn socket;\n}","a20":"@Override protected Socket _openDataConnection_(int command,String arg) throws IOException {...\n\t_prepareDataSocket_(socket);\n\tif(socket instanceof SSLSocket){\n\t\tSSLSocket sslSocket=(SSLSocket)socket;...\n\t\tsslSocket.setEnableSessionCreation(isCreation);...\n\t}\n\treturn socket;\n}"},{"Origin":"protected final String escapeSlow(String s,int index){\n\tint end=s.length();\n\tchar[] dest=DEST_TL.get();\n\tint destIndex=0;\n\tint unescapedChunkStart=0;\n\twhile(index < end){\n\t\tint cp=codePointAt(s,index,end);\n\t\tif(cp < 0){\n\t\t\tthrow new IllegalArgumentException(\"Trailing high surrogate at end of input\");\n\t\t}\n\t\tchar[] escaped=escape(cp);\n\t\tif(escaped != null){\n\t\t\tint charsSkipped=index - unescapedChunkStart;\n\t\t\tint sizeNeeded=destIndex + charsSkipped + escaped.length;\n\t\t\tif(dest.length < sizeNeeded){\n\t\t\t\tint destLength=sizeNeeded + (end - index) + DEST_PAD;\n\t\t\t\tdest=growBuffer(dest,destIndex,destLength);\n\t\t\t}\n\t\t\tif(charsSkipped > 0){\n\t\t\t\ts.getChars(unescapedChunkStart,index,dest,destIndex);\n\t\t\t\tdestIndex+=charsSkipped;\n\t\t\t}\n\t\t\tif(escaped.length > 0){\n\t\t\t\tSystem.arraycopy(escaped,0,dest,destIndex,escaped.length);\n\t\t\t\tdestIndex+=escaped.length;\n\t\t\t}\n\t\t}\n\t\tunescapedChunkStart=index + (Character.isSupplementaryCodePoint(cp) ? 2 : 1);\n\t\tindex=nextEscapeIndex(s,unescapedChunkStart,end);\n\t}\n\tint charsSkipped=end - unescapedChunkStart;\n\tif(charsSkipped > 0){\n\t\tint endIndex=destIndex + charsSkipped;\n\t\tif(dest.length < endIndex){\n\t\t\tdest=growBuffer(dest,destIndex,endIndex);\n\t\t}\n\t\ts.getChars(unescapedChunkStart,end,dest,destIndex);\n\t\tdestIndex=endIndex;\n\t}\n\treturn new String(dest,0,destIndex);\n}","a50":"protected final String escapeSlow(String s,int index){\n\tint end=s.length();\n\tchar[] dest=DEST_TL.get();\n\tint destIndex=0;\n\tint unescapedChunkStart=0;\n\twhile(index < end){\n\t\tint cp=codePointAt(s,index,end);...\n\t\tchar[] escaped=escape(cp);\n\t\tif(escaped != null){\n\t\t\tint charsSkipped=index - unescapedChunkStart;\n\t\t\tint sizeNeeded=destIndex + charsSkipped + escaped.length;\n\t\t\tif(dest.length < sizeNeeded){...\n\t\t\t}...\n\t\t}\n\t\tunescapedChunkStart=index + (Character.isSupplementaryCodePoint(cp) ? 2 : 1);\n\t\tindex=nextEscapeIndex(s,unescapedChunkStart,end);\n\t}\n\tint charsSkipped=end - unescapedChunkStart;\n\tif(charsSkipped > 0){\n\t\tint endIndex=destIndex + charsSkipped;...\n\t\ts.getChars(unescapedChunkStart,end,dest,destIndex);\n\t\tdestIndex=endIndex;\n\t}...\n}","a20":"protected final String escapeSlow(String s,int index){\n\tint end=s.length();...\n\tint destIndex=0;\n\tint unescapedChunkStart=0;\n\twhile(index < end){\n\t\tint cp=codePointAt(s,index,end);...\n\t\tif(escaped != null){...\n\t\t}\n\t\tunescapedChunkStart=index + (Character.isSupplementaryCodePoint(cp) ? 2 : 1);\n\t\tindex=nextEscapeIndex(s,unescapedChunkStart,end);\n\t}...\n}"},{"Origin":"@Override protected char[] escape(int cp){\n\tif(cp < safeOctets.length && safeOctets[cp]){\n\t\treturn null;\n\t}else if(cp == ' ' && plusForSpace){\n\t\treturn URI_ESCAPED_SPACE;\n\t}else if(cp <= 0x7F){\n\t\tchar[] dest=new char[3];\n\t\tdest[0]='%';\n\t\tdest[2]=UPPER_HEX_DIGITS[cp & 0xF];\n\t\tdest[1]=UPPER_HEX_DIGITS[cp >>> 4];\n\t\treturn dest;\n\t}else if(cp <= 0x7ff){\n\t\tchar[] dest=new char[6];\n\t\tdest[0]='%';\n\t\tdest[3]='%';\n\t\tdest[5]=UPPER_HEX_DIGITS[cp & 0xF];\n\t\tcp>>>=4;\n\t\tdest[4]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];\n\t\tcp>>>=2;\n\t\tdest[2]=UPPER_HEX_DIGITS[cp & 0xF];\n\t\tcp>>>=4;\n\t\tdest[1]=UPPER_HEX_DIGITS[0xC | cp];\n\t\treturn dest;\n\t}else if(cp <= 0xffff){\n\t\tchar[] dest=new char[9];\n\t\tdest[0]='%';\n\t\tdest[1]='E';\n\t\tdest[3]='%';\n\t\tdest[6]='%';\n\t\tdest[8]=UPPER_HEX_DIGITS[cp & 0xF];\n\t\tcp>>>=4;\n\t\tdest[7]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];\n\t\tcp>>>=2;\n\t\tdest[5]=UPPER_HEX_DIGITS[cp & 0xF];\n\t\tcp>>>=4;\n\t\tdest[4]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];\n\t\tcp>>>=2;\n\t\tdest[2]=UPPER_HEX_DIGITS[cp];\n\t\treturn dest;\n\t}else if(cp <= 0x10ffff){\n\t\tchar[] dest=new char[12];\n\t\tdest[0]='%';\n\t\tdest[1]='F';\n\t\tdest[3]='%';\n\t\tdest[6]='%';\n\t\tdest[9]='%';\n\t\tdest[11]=UPPER_HEX_DIGITS[cp & 0xF];\n\t\tcp>>>=4;\n\t\tdest[10]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];\n\t\tcp>>>=2;\n\t\tdest[8]=UPPER_HEX_DIGITS[cp & 0xF];\n\t\tcp>>>=4;\n\t\tdest[7]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];\n\t\tcp>>>=2;\n\t\tdest[5]=UPPER_HEX_DIGITS[cp & 0xF];\n\t\tcp>>>=4;\n\t\tdest[4]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];\n\t\tcp>>>=2;\n\t\tdest[2]=UPPER_HEX_DIGITS[cp & 0x7];\n\t\treturn dest;\n\t}else {\n\t\tthrow new IllegalArgumentException(\"Invalid unicode character value \" + cp);\n\t}\n}","a50":"@Override protected char[] escape(int cp){\n\tif(cp < safeOctets.length && safeOctets[cp]){\n\t\treturn null;\n\t}else if(cp == ' ' && plusForSpace){\n\t\treturn URI_ESCAPED_SPACE;\n\t}else if(cp <= 0x7F){\n\t\tchar[] dest=new char[3];...\n\t\tdest[2]=UPPER_HEX_DIGITS[cp & 0xF];\n\t\tdest[1]=UPPER_HEX_DIGITS[cp >>> 4];\n\t\treturn dest;\n\t}else if(cp <= 0x7ff){\n\t\tchar[] dest=new char[6];...\n\t\tdest[5]=UPPER_HEX_DIGITS[cp & 0xF];...\n\t\tdest[4]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];...\n\t\tdest[2]=UPPER_HEX_DIGITS[cp & 0xF];...\n\t\tdest[1]=UPPER_HEX_DIGITS[0xC | cp];\n\t\treturn dest;\n\t}else if(cp <= 0xffff){\n\t\tchar[] dest=new char[9];...\n\t\tdest[7]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];...\n\t\tdest[5]=UPPER_HEX_DIGITS[cp & 0xF];...\n\t\tdest[2]=UPPER_HEX_DIGITS[cp];\n\t\treturn dest;\n\t}else if(cp <= 0x10ffff){\n\t\tchar[] dest=new char[12];...\n\t\treturn dest;\n\t}else {\n\t\tthrow new IllegalArgumentException(\"Invalid unicode character value \" + cp);\n\t}\n}","a20":"@Override protected char[] escape(int cp){\n\tif(cp < safeOctets.length && safeOctets[cp]){\n\t\treturn null;\n\t}else if(cp == ' ' && plusForSpace){\n\t\treturn URI_ESCAPED_SPACE;\n\t}else if(cp <= 0x7F){...\n\t}else if(cp <= 0x7ff){\n\t\tchar[] dest=new char[6];...\n\t\treturn dest;\n\t}else if(cp <= 0xffff){\n\t\tchar[] dest=new char[9];...\n\t\treturn dest;\n\t}else if(cp <= 0x10ffff){\n\t\tchar[] dest=new char[12];...\n\t}else {...\n\t}\n}"},{"Origin":"public Page submit(final SubmittableElement submitElement) throws IOException {\n\tfinal HtmlPage htmlPage=(HtmlPage)getPage();\n\tif(htmlPage.getWebClient().isJavaScriptEnabled()){\n\t\tif(submitElement != null){\n\t\t\tisPreventDefault_=false;\n\t\t\tfinal ScriptResult scriptResult=fireEvent(Event.TYPE_SUBMIT);\n\t\t\tif(isPreventDefault_){\n\t\t\t\treturn scriptResult.getNewPage();\n\t\t\t}\n\t\t}\n\t\tfinal String action=getActionAttribute();\n\t\tif(TextUtil.startsWithIgnoreCase(action,JAVASCRIPT_PREFIX)){\n\t\t\treturn htmlPage.executeJavaScriptIfPossible(action,\"Form action\",getStartLineNumber()).getNewPage();\n\t\t}\n\t}else {\n\t\tif(TextUtil.startsWithIgnoreCase(getActionAttribute(),JAVASCRIPT_PREFIX)){\n\t\t\treturn htmlPage;\n\t\t}\n\t}\n\tfinal List<NameValuePair> parameters=getParameterListForSubmit(submitElement);\n\tfinal HttpMethod method;\n\tfinal String methodAttribute=getMethodAttribute();\n\tif(\"post\".equalsIgnoreCase(methodAttribute)){\n\t\tmethod=HttpMethod.POST;\n\t}else {\n\t\tif(!\"get\".equalsIgnoreCase(methodAttribute) && methodAttribute.trim().length() > 0){\n\t\t\tnotifyIncorrectness(\"Incorrect submit method >\" + getMethodAttribute() + \"<. Using >GET<.\");\n\t\t}\n\t\tmethod=HttpMethod.GET;\n\t}\n\tString actionUrl=getActionAttribute();\n\tif(HttpMethod.GET == method){\n\t\tfinal String anchor=StringUtils.substringAfter(actionUrl,\"#\");\n\t\tactionUrl=StringUtils.substringBefore(actionUrl,\"#\");\n\t\tfinal NameValuePair[] pairs=new NameValuePair[parameters.size()];\n\t\tparameters.toArray(pairs);\n\t\tfinal String queryFromFields=EncodingUtil.formUrlEncode(pairs,getPage().getPageEncoding());\n\t\tactionUrl=StringUtils.substringBefore(actionUrl,\"?\");\n\t\tfinal BrowserVersion browserVersion=getPage().getWebClient().getBrowserVersion();\n\t\tif(!(browserVersion.isIE() && browserVersion.getBrowserVersionNumeric() >= 7) || queryFromFields.length() > 0){\n\t\t\tactionUrl+=\"?\" + queryFromFields;\n\t\t}\n\t\tif(anchor.length() > 0){\n\t\t\tactionUrl+=\"#\" + anchor;\n\t\t}\n\t\tparameters.clear();\n\t}\n\tfinal URL url;\n\ttry {\n\t\tif(actionUrl.length() == 0){\n\t\t\turl=htmlPage.getWebResponse().getRequestSettings().getUrl();\n\t\t}else if(actionUrl.startsWith(\"?\")){\n\t\t\tString urlString=htmlPage.getWebResponse().getRequestSettings().getUrl().toExternalForm();\n\t\t\tif(urlString.indexOf('?') != -1){\n\t\t\t\turlString=urlString.substring(0,urlString.indexOf('?'));\n\t\t\t}\n\t\t\turl=new URL(urlString + actionUrl);\n\t\t}else {\n\t\t\turl=htmlPage.getFullyQualifiedUrl(actionUrl);\n\t\t}\n\t} catch (final MalformedURLException e){\n\t\tthrow new IllegalArgumentException(\"Not a valid url: \" + actionUrl);\n\t} \n\tfinal WebRequestSettings settings=new WebRequestSettings(url,method);\n\tsettings.setRequestParameters(parameters);\n\tsettings.setEncodingType(FormEncodingType.getInstance(getEnctypeAttribute()));\n\tsettings.setCharset(getSubmitCharset());\n\tsettings.setAdditionalHeader(\"Referer\",htmlPage.getWebResponse().getRequestSettings().getUrl().toExternalForm());\n\tfinal WebWindow webWindow=htmlPage.getEnclosingWindow();\n\treturn htmlPage.getWebClient().getPage(webWindow,htmlPage.getResolvedTarget(getTargetAttribute()),settings);\n}","a50":"public Page submit(final SubmittableElement submitElement) throws IOException {\n\tfinal HtmlPage htmlPage=(HtmlPage)getPage();\n\tif(htmlPage.getWebClient().isJavaScriptEnabled()){\n\t\tif(submitElement != null){...\n\t\t\tfinal ScriptResult scriptResult=fireEvent(Event.TYPE_SUBMIT);...\n\t\t}\n\t\tfinal String action=getActionAttribute();\n\t\tif(TextUtil.startsWithIgnoreCase(action,JAVASCRIPT_PREFIX)){\n\t\t\treturn htmlPage.executeJavaScriptIfPossible(action,\"Form action\",getStartLineNumber()).getNewPage();\n\t\t}\n\t}else {...\n\t}\n\tfinal List<NameValuePair> parameters=getParameterListForSubmit(submitElement);\n\tfinal HttpMethod method;\n\tfinal String methodAttribute=getMethodAttribute();\n\tif(\"post\".equalsIgnoreCase(methodAttribute)){\n\t\tmethod=HttpMethod.POST;\n\t}else {...\n\t\tmethod=HttpMethod.GET;\n\t}\n\tString actionUrl=getActionAttribute();\n\tif(HttpMethod.GET == method){\n\t\tfinal String anchor=StringUtils.substringAfter(actionUrl,\"#\");\n\t\tactionUrl=StringUtils.substringBefore(actionUrl,\"#\");\n\t\tfinal NameValuePair[] pairs=new NameValuePair[parameters.size()];\n\t\tparameters.toArray(pairs);\n\t\tfinal String queryFromFields=EncodingUtil.formUrlEncode(pairs,getPage().getPageEncoding());\n\t\tactionUrl=StringUtils.substringBefore(actionUrl,\"?\");\n\t\tfinal BrowserVersion browserVersion=getPage().getWebClient().getBrowserVersion();...\n\t}\n\tfinal URL url;\n\ttry {\n\t\tif(actionUrl.length() == 0){\n\t\t\turl=htmlPage.getWebResponse().getRequestSettings().getUrl();\n\t\t}else if ...\n\t} catch (final MalformedURLException e){...\n\t} \n\tfinal WebRequestSettings settings=new WebRequestSettings(url,method);...\n\treturn htmlPage.getWebClient().getPage(webWindow,htmlPage.getResolvedTarget(getTargetAttribute()),settings);\n}","a20":"public Page submit(final SubmittableElement submitElement) throws IOException {\n\tfinal HtmlPage htmlPage=(HtmlPage)getPage();...\n\tfinal List<NameValuePair> parameters=getParameterListForSubmit(submitElement);\n\tfinal HttpMethod method;\n\tfinal String methodAttribute=getMethodAttribute();...\n\tString actionUrl=getActionAttribute();\n\tif(HttpMethod.GET == method){\n\t\tfinal String anchor=StringUtils.substringAfter(actionUrl,\"#\");...\n\t\tfinal String queryFromFields=EncodingUtil.formUrlEncode(pairs,getPage().getPageEncoding());...\n\t\tfinal BrowserVersion browserVersion=getPage().getWebClient().getBrowserVersion();...\n\t}\n\tfinal URL url;\n\ttry {\n\t\tif(actionUrl.length() == 0){...\n\t\t}else if ...\n\t} catch (final MalformedURLException e){...\n\t} ...\n\treturn htmlPage.getWebClient().getPage(webWindow,htmlPage.getResolvedTarget(getTargetAttribute()),settings);\n}"},{"Origin":"public void submit(String buttonName,String buttonValue){\n\tList<HtmlElement> l=new LinkedList<HtmlElement>();\n\tl.addAll(getForm().getInputsByName(buttonName));\n\tl.addAll(getForm().getButtonsByName(buttonName));\n\ttry {\n\t\tfor (int i=0; i < l.size(); i++){\n\t\t\tObject o=l.get(i);\n\t\t\tif(o instanceof HtmlSubmitInput){\n\t\t\t\tHtmlSubmitInput inpt=(HtmlSubmitInput)o;\n\t\t\t\tif(inpt.getValueAttribute().equals(buttonValue)){\n\t\t\t\t\tinpt.click();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(o instanceof HtmlImageInput){\n\t\t\t\tHtmlImageInput inpt=(HtmlImageInput)o;\n\t\t\t\tif(inpt.getValueAttribute().equals(buttonValue)){\n\t\t\t\t\tinpt.click();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(o instanceof HtmlButton){\n\t\t\t\tHtmlButton inpt=(HtmlButton)o;\n\t\t\t\tif(inpt.getTypeAttribute().equals(\"submit\") && inpt.getValueAttribute().equals(buttonValue)){\n\t\t\t\t\tinpt.click();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} catch (FailingHttpStatusCodeException e){\n\t\tif(!ignoreFailingStatusCodes){\n\t\t\tthrow new TestingEngineResponseException(e.getStatusCode(),e);\n\t\t}\n\t\treturn;\n\t} catch (IOException e){\n\t\tthrow new RuntimeException(\"HtmlUnit Error submitting form using submit button with name [\" + buttonName + \"] and value [\"+ buttonValue+ \"]\",e);\n\t} \n\tthrow new RuntimeException(\"No submit button found in current form with name [\" + buttonName + \"] and value [\"+ buttonValue+ \"].\");\n}","a50":"public void submit(String buttonName,String buttonValue){\n\tList<HtmlElement> l=new LinkedList<HtmlElement>();\n\tl.addAll(getForm().getInputsByName(buttonName));\n\tl.addAll(getForm().getButtonsByName(buttonName));\n\ttry {\n\t\tfor (int i=0; i < l.size(); i++){\n\t\t\tObject o=l.get(i);\n\t\t\tif(o instanceof HtmlSubmitInput){\n\t\t\t\tHtmlSubmitInput inpt=(HtmlSubmitInput)o;...\n\t\t\t}\n\t\t\tif(o instanceof HtmlImageInput){\n\t\t\t\tHtmlImageInput inpt=(HtmlImageInput)o;...\n\t\t\t}\n\t\t\tif(o instanceof HtmlButton){...\n\t\t\t\tif(inpt.getTypeAttribute().equals(\"submit\") && inpt.getValueAttribute().equals(buttonValue)){...\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} catch (FailingHttpStatusCodeException e){...\n\t} catch (IOException e){...\n\t} ...\n}","a20":"public void submit(String buttonName,String buttonValue){...\n\tl.addAll(getForm().getInputsByName(buttonName));\n\tl.addAll(getForm().getButtonsByName(buttonName));\n\ttry {\n\t\tfor (int i=0; i < l.size(); i++){\n\t\t\tObject o=l.get(i);...\n\t\t\tif(o instanceof HtmlButton){...\n\t\t\t}\n\t\t}\n\t} catch (FailingHttpStatusCodeException e){...\n\t} catch (IOException e){...\n\t} ...\n}"},{"Origin":"protected SortedMap<String,SortedSet<String>> loadSignificantParametersForSignatureBaseString(HttpServletRequest request){\n\tSortedMap<String,SortedSet<String>> significantParameters=new TreeMap<String,SortedSet<String>>();\n\tEnumeration parameterNames=request.getParameterNames();\n\twhile(parameterNames.hasMoreElements()){\n\t\tString parameterName=(String)parameterNames.nextElement();\n\t\tString[] values=request.getParameterValues(parameterName);\n\t\tif(values == null){\n\t\t\tvalues=new String[]{\"\"};\n\t\t}\n\t\tfor (String parameterValue : values){\n\t\t\tif(parameterValue == null){\n\t\t\t\tparameterValue=\"\";\n\t\t\t}\n\t\t\tparameterName=oauthEncode(parameterName);\n\t\t\tparameterValue=oauthEncode(parameterValue);\n\t\t\tSortedSet<String> significantValues=significantParameters.get(parameterName);\n\t\t\tif(significantValues == null){\n\t\t\t\tsignificantValues=new TreeSet<String>();\n\t\t\t\tsignificantParameters.put(parameterName,significantValues);\n\t\t\t}\n\t\t\tsignificantValues.add(parameterValue);\n\t\t}\n\t}\n\tMap<String,String> oauthParams=parseParameters(request);\n\toauthParams.remove(\"realm\");\n\tSet<String> parsedParams=oauthParams.keySet();\n\tfor (String parameterName : parsedParams){\n\t\tString parameterValue=oauthParams.get(parameterName);\n\t\tif(parameterValue == null){\n\t\t\tparameterValue=\"\";\n\t\t}\n\t\tparameterName=oauthEncode(parameterName);\n\t\tparameterValue=oauthEncode(parameterValue);\n\t\tSortedSet<String> significantValues=significantParameters.get(parameterName);\n\t\tif(significantValues == null){\n\t\t\tsignificantValues=new TreeSet<String>();\n\t\t\tsignificantParameters.put(parameterName,significantValues);\n\t\t}\n\t\tsignificantValues.add(parameterValue);\n\t}\n\tsignificantParameters.remove(OAuthConsumerParameter.oauth_signature.toString());\n\treturn significantParameters;\n}","a50":"protected SortedMap<String,SortedSet<String>> loadSignificantParametersForSignatureBaseString(HttpServletRequest request){\n\tSortedMap<String,SortedSet<String>> significantParameters=new TreeMap<String,SortedSet<String>>();\n\tEnumeration parameterNames=request.getParameterNames();\n\twhile(parameterNames.hasMoreElements()){\n\t\tString parameterName=(String)parameterNames.nextElement();\n\t\tString[] values=request.getParameterValues(parameterName);...\n\t\tfor (String parameterValue : values){...\n\t\t\tparameterName=oauthEncode(parameterName);\n\t\t\tparameterValue=oauthEncode(parameterValue);\n\t\t\tSortedSet<String> significantValues=significantParameters.get(parameterName);...\n\t\t\tsignificantValues.add(parameterValue);\n\t\t}\n\t}\n\tMap<String,String> oauthParams=parseParameters(request);\n\toauthParams.remove(\"realm\");\n\tSet<String> parsedParams=oauthParams.keySet();\n\tfor (String parameterName : parsedParams){\n\t\tString parameterValue=oauthParams.get(parameterName);...\n\t\tparameterName=oauthEncode(parameterName);\n\t\tparameterValue=oauthEncode(parameterValue);\n\t\tSortedSet<String> significantValues=significantParameters.get(parameterName);...\n\t}\n\tsignificantParameters.remove(OAuthConsumerParameter.oauth_signature.toString());\n\treturn significantParameters;\n}","a20":"protected SortedMap<String,SortedSet<String>> loadSignificantParametersForSignatureBaseString(HttpServletRequest request){\n\tSortedMap<String,SortedSet<String>> significantParameters=new TreeMap<String,SortedSet<String>>();...\n\twhile(parameterNames.hasMoreElements()){\n\t\tString parameterName=(String)parameterNames.nextElement();\n\t\tString[] values=request.getParameterValues(parameterName);...\n\t\tfor (String parameterValue : values){...\n\t\t}\n\t}\n\tMap<String,String> oauthParams=parseParameters(request);...\n\tfor (String parameterName : parsedParams){...\n\t}\n\tsignificantParameters.remove(OAuthConsumerParameter.oauth_signature.toString());...\n}"},{"Origin":"public static MultivaluedMap<String,String> getEntityParameters(ClientRequest request,Providers providers){\n\tObject entity=request.getEntity();\n\tString method=request.getMethod();\n\tMediaType mediaType=getMediaType(request);\n\tif(entity == null || method == null || !method.equalsIgnoreCase(\"POST\") || mediaType == null || !mediaType.equals(MediaType.APPLICATION_FORM_URLENCODED_TYPE)){\n\t\treturn new MultivaluedMapImpl();\n\t}\n\tif(entity instanceof MultivaluedMap){\n\t\treturn (MultivaluedMap)entity;\n\t}\n\tType entityType=entity.getClass();\n\tif(entity instanceof GenericEntity){\n\t\tfinal GenericEntity generic=(GenericEntity)entity;\n\t\tentityType=generic.getType();\n\t\tentity=generic.getEntity();\n\t}\n\tfinal Class entityClass=entity.getClass();\n\tByteArrayOutputStream out=new ByteArrayOutputStream();\n\tMessageBodyWriter writer=providers.getMessageBodyWriter(entityClass,entityType,EMPTY_ANNOTATIONS,MediaType.APPLICATION_FORM_URLENCODED_TYPE);\n\ttry {\n\t\twriter.writeTo(entity,entityClass,entityType,EMPTY_ANNOTATIONS,MediaType.APPLICATION_FORM_URLENCODED_TYPE,null,out);\n\t} catch (WebApplicationException wae){\n\t\tthrow new IllegalStateException(wae);\n\t} catch (IOException ioe){\n\t\tthrow new IllegalStateException(ioe);\n\t} \n\tByteArrayInputStream in=new ByteArrayInputStream(out.toByteArray());\n\tMessageBodyReader reader=providers.getMessageBodyReader(MultivaluedMap.class,MultivaluedMap.class,EMPTY_ANNOTATIONS,MediaType.APPLICATION_FORM_URLENCODED_TYPE);\n\ttry {\n\t\treturn (MultivaluedMap<String,String>)reader.readFrom(MultivaluedMap.class,MultivaluedMap.class,EMPTY_ANNOTATIONS,MediaType.APPLICATION_FORM_URLENCODED_TYPE,null,in);\n\t} catch (IOException ioe){\n\t\tthrow new IllegalStateException(ioe);\n\t} \n}","a50":"public static MultivaluedMap<String,String> getEntityParameters(ClientRequest request,Providers providers){\n\tObject entity=request.getEntity();\n\tString method=request.getMethod();\n\tMediaType mediaType=getMediaType(request);\n\tif(entity == null || method == null || !method.equalsIgnoreCase(\"POST\") || mediaType == null || !mediaType.equals(MediaType.APPLICATION_FORM_URLENCODED_TYPE)){\n\t\treturn new MultivaluedMapImpl();\n\t}...\n\tType entityType=entity.getClass();...\n\tfinal Class entityClass=entity.getClass();\n\tByteArrayOutputStream out=new ByteArrayOutputStream();\n\tMessageBodyWriter writer=providers.getMessageBodyWriter(entityClass,entityType,EMPTY_ANNOTATIONS,MediaType.APPLICATION_FORM_URLENCODED_TYPE);\n\ttry {\n\t\twriter.writeTo(entity,entityClass,entityType,EMPTY_ANNOTATIONS,MediaType.APPLICATION_FORM_URLENCODED_TYPE,null,out);\n\t} catch (WebApplicationException wae){...\n\t} catch (IOException ioe){...\n\t} \n\tByteArrayInputStream in=new ByteArrayInputStream(out.toByteArray());\n\tMessageBodyReader reader=providers.getMessageBodyReader(MultivaluedMap.class,MultivaluedMap.class,EMPTY_ANNOTATIONS,MediaType.APPLICATION_FORM_URLENCODED_TYPE);\n\ttry {\n\t\treturn (MultivaluedMap<String,String>)reader.readFrom(MultivaluedMap.class,MultivaluedMap.class,EMPTY_ANNOTATIONS,MediaType.APPLICATION_FORM_URLENCODED_TYPE,null,in);\n\t} catch (IOException ioe){...\n\t} \n}","a20":"public static MultivaluedMap<String,String> getEntityParameters(ClientRequest request,Providers providers){\n\tObject entity=request.getEntity();\n\tString method=request.getMethod();\n\tMediaType mediaType=getMediaType(request);...\n\tMessageBodyWriter writer=providers.getMessageBodyWriter(entityClass,entityType,EMPTY_ANNOTATIONS,MediaType.APPLICATION_FORM_URLENCODED_TYPE);...\n\tByteArrayInputStream in=new ByteArrayInputStream(out.toByteArray());\n\tMessageBodyReader reader=providers.getMessageBodyReader(MultivaluedMap.class,MultivaluedMap.class,EMPTY_ANNOTATIONS,MediaType.APPLICATION_FORM_URLENCODED_TYPE);\n\ttry {\n\t\treturn (MultivaluedMap<String,String>)reader.readFrom(MultivaluedMap.class,MultivaluedMap.class,EMPTY_ANNOTATIONS,MediaType.APPLICATION_FORM_URLENCODED_TYPE,null,in);\n\t} catch (IOException ioe){...\n\t} \n}"},{"Origin":"protected OAuthConsumerToken getTokenFromProvider(ProtectedResourceDetails details,URL tokenURL,String httpMethod,OAuthConsumerToken requestToken,Map<String,String> additionalParameters){\n\tboolean isAccessToken=requestToken != null;\n\tif(!isAccessToken){\n\t\trequestToken=new OAuthConsumerToken();\n\t\trequestToken.setNonce(getNonceFactory().generateNonce());\n\t}\n\tInputStream inputStream=readResource(details,tokenURL,httpMethod,requestToken,additionalParameters);\n\tString tokenInfo;\n\ttry {\n\t\tByteArrayOutputStream out=new ByteArrayOutputStream();\n\t\tbyte[] buffer=new byte[1024];\n\t\tint len=inputStream.read(buffer);\n\t\twhile(len >= 0){\n\t\t\tout.write(buffer,0,len);\n\t\t\tlen=inputStream.read(buffer);\n\t\t}\n\t\ttokenInfo=new String(out.toByteArray(),\"UTF-8\");\n\t} catch (IOException e){\n\t\tthrow new OAuthRequestFailedException(\"Unable to read the token.\",e);\n\t} \n\tStringTokenizer tokenProperties=new StringTokenizer(tokenInfo,\"&\");\n\tMap<String,String> tokenPropertyValues=new TreeMap<String,String>();\n\twhile(tokenProperties.hasMoreElements()){\n\t\ttry {\n\t\t\tString tokenProperty=(String)tokenProperties.nextElement();\n\t\t\tint equalsIndex=tokenProperty.indexOf('=');\n\t\t\tif(equalsIndex > 0){\n\t\t\t\tString propertyName=OAuthCodec.oauthDecode(tokenProperty.substring(0,equalsIndex));\n\t\t\t\tString propertyValue=OAuthCodec.oauthDecode(tokenProperty.substring(equalsIndex + 1));\n\t\t\t\ttokenPropertyValues.put(propertyName,propertyValue);\n\t\t\t}else {\n\t\t\t\ttokenProperty=OAuthCodec.oauthDecode(tokenProperty);\n\t\t\t\ttokenPropertyValues.put(tokenProperty,null);\n\t\t\t}\n\t\t} catch (DecoderException e){\n\t\t\tthrow new OAuthRequestFailedException(\"Unable to decode token parameters.\");\n\t\t} \n\t}\n\tString tokenValue=tokenPropertyValues.remove(OAuthProviderParameter.oauth_token.toString());\n\tif(tokenValue == null){\n\t\tthrow new OAuthRequestFailedException(\"OAuth provider failed to return a token.\");\n\t}\n\tString tokenSecret=tokenPropertyValues.remove(OAuthProviderParameter.oauth_token_secret.toString());\n\tif(tokenSecret == null){\n\t\tthrow new OAuthRequestFailedException(\"OAuth provider failed to return a token secret.\");\n\t}\n\tOAuthConsumerToken consumerToken=new OAuthConsumerToken();\n\tconsumerToken.setValue(tokenValue);\n\tconsumerToken.setSecret(tokenSecret);\n\tconsumerToken.setNonce(requestToken.getNonce());\n\tconsumerToken.setResourceId(details.getId());\n\tconsumerToken.setAccessToken(isAccessToken);\n\tif(!tokenPropertyValues.isEmpty()){\n\t\tconsumerToken.setAdditionalParameters(tokenPropertyValues);\n\t}\n\treturn consumerToken;\n}","a50":"protected OAuthConsumerToken getTokenFromProvider(ProtectedResourceDetails details,URL tokenURL,String httpMethod,OAuthConsumerToken requestToken,Map<String,String> additionalParameters){\n\tboolean isAccessToken=requestToken != null;...\n\tInputStream inputStream=readResource(details,tokenURL,httpMethod,requestToken,additionalParameters);\n\tString tokenInfo;\n\ttry {\n\t\tByteArrayOutputStream out=new ByteArrayOutputStream();...\n\t\ttokenInfo=new String(out.toByteArray(),\"UTF-8\");\n\t} catch (IOException e){...\n\t} \n\tStringTokenizer tokenProperties=new StringTokenizer(tokenInfo,\"&\");\n\tMap<String,String> tokenPropertyValues=new TreeMap<String,String>();\n\twhile(tokenProperties.hasMoreElements()){\n\t\ttry {\n\t\t\tString tokenProperty=(String)tokenProperties.nextElement();\n\t\t\tint equalsIndex=tokenProperty.indexOf('=');\n\t\t\tif(equalsIndex > 0){\n\t\t\t\tString propertyName=OAuthCodec.oauthDecode(tokenProperty.substring(0,equalsIndex));\n\t\t\t\tString propertyValue=OAuthCodec.oauthDecode(tokenProperty.substring(equalsIndex + 1));...\n\t\t\t}else {\n\t\t\t\ttokenProperty=OAuthCodec.oauthDecode(tokenProperty);\n\t\t\t\ttokenPropertyValues.put(tokenProperty,null);\n\t\t\t}\n\t\t} catch (DecoderException e){...\n\t\t} \n\t}\n\tString tokenValue=tokenPropertyValues.remove(OAuthProviderParameter.oauth_token.toString());...\n\tString tokenSecret=tokenPropertyValues.remove(OAuthProviderParameter.oauth_token_secret.toString());...\n\tOAuthConsumerToken consumerToken=new OAuthConsumerToken();\n\tconsumerToken.setValue(tokenValue);...\n\tconsumerToken.setNonce(requestToken.getNonce());\n\tconsumerToken.setResourceId(details.getId());\n\tconsumerToken.setAccessToken(isAccessToken);...\n\treturn consumerToken;\n}","a20":"protected OAuthConsumerToken getTokenFromProvider(ProtectedResourceDetails details,URL tokenURL,String httpMethod,OAuthConsumerToken requestToken,Map<String,String> additionalParameters){...\n\tInputStream inputStream=readResource(details,tokenURL,httpMethod,requestToken,additionalParameters);...\n\ttry {...\n\t} catch (IOException e){...\n\t} ...\n\tMap<String,String> tokenPropertyValues=new TreeMap<String,String>();\n\twhile(tokenProperties.hasMoreElements()){\n\t\ttry {\n\t\t\tString tokenProperty=(String)tokenProperties.nextElement();\n\t\t\tint equalsIndex=tokenProperty.indexOf('=');...\n\t\t} catch (DecoderException e){...\n\t\t} \n\t}\n\tString tokenValue=tokenPropertyValues.remove(OAuthProviderParameter.oauth_token.toString());...\n\tString tokenSecret=tokenPropertyValues.remove(OAuthProviderParameter.oauth_token_secret.toString());...\n\tOAuthConsumerToken consumerToken=new OAuthConsumerToken();...\n\treturn consumerToken;\n}"},{"Origin":"protected void retrieveToken(OAuthConsumer consumer,String endpointUrl,HttpParameters customOAuthParams) throws OAuthMessageSignerException, OAuthCommunicationException, OAuthNotAuthorizedException, OAuthExpectationFailedException {\n\tMap<String,String> defaultHeaders=getRequestHeaders();\n\tif(consumer.getConsumerKey() == null || consumer.getConsumerSecret() == null){\n\t\tthrow new OAuthExpectationFailedException(\"Consumer key or secret not set\");\n\t}\n\tHttpRequest request=null;\n\tHttpResponse response=null;\n\ttry {\n\t\trequest=createRequest(endpointUrl);\n\t\tfor (String header : defaultHeaders.keySet()){\n\t\t\trequest.setHeader(header,defaultHeaders.get(header));\n\t\t}\n\t\tif(customOAuthParams != null && !customOAuthParams.isEmpty()){\n\t\t\tconsumer.setAdditionalParameters(customOAuthParams);\n\t\t}\n\t\tif(this.listener != null){\n\t\t\tthis.listener.prepareRequest(request);\n\t\t}\n\t\tconsumer.sign(request);\n\t\tif(this.listener != null){\n\t\t\tthis.listener.prepareSubmission(request);\n\t\t}\n\t\tresponse=sendRequest(request);\n\t\tint statusCode=response.getStatusCode();\n\t\tboolean requestHandled=false;\n\t\tif(this.listener != null){\n\t\t\trequestHandled=this.listener.onResponseReceived(request,response);\n\t\t}\n\t\tif(requestHandled){\n\t\t\treturn;\n\t\t}\n\t\tif(statusCode >= 300){\n\t\t\thandleUnexpectedResponse(statusCode,response);\n\t\t}\n\t\tHttpParameters responseParams=OAuth.decodeForm(response.getContent());\n\t\tString token=responseParams.getFirst(OAuth.OAUTH_TOKEN);\n\t\tString secret=responseParams.getFirst(OAuth.OAUTH_TOKEN_SECRET);\n\t\tresponseParams.remove(OAuth.OAUTH_TOKEN);\n\t\tresponseParams.remove(OAuth.OAUTH_TOKEN_SECRET);\n\t\tsetResponseParameters(responseParams);\n\t\tif(token == null || secret == null){\n\t\t\tthrow new OAuthExpectationFailedException(\"Request token or token secret not set in server reply. \" + \"The service provider you use is probably buggy.\");\n\t\t}\n\t\tconsumer.setTokenWithSecret(token,secret);\n\t} catch (OAuthNotAuthorizedException e){\n\t\tthrow e;\n\t} catch (OAuthExpectationFailedException e){\n\t\tthrow e;\n\t} catch (Exception e){\n\t\tthrow new OAuthCommunicationException(e);\n\t} finally {\n\t\ttry {\n\t\t\tcloseConnection(request,response);\n\t\t} catch (Exception e){\n\t\t\tthrow new OAuthCommunicationException(e);\n\t\t} \n\t} \n}","a50":"protected void retrieveToken(OAuthConsumer consumer,String endpointUrl,HttpParameters customOAuthParams) throws OAuthMessageSignerException, OAuthCommunicationException, OAuthNotAuthorizedException, OAuthExpectationFailedException {\n\tMap<String,String> defaultHeaders=getRequestHeaders();...\n\tHttpRequest request=null;\n\tHttpResponse response=null;\n\ttry {\n\t\trequest=createRequest(endpointUrl);\n\t\tfor (String header : defaultHeaders.keySet()){...\n\t\t}\n\t\tif(customOAuthParams != null && !customOAuthParams.isEmpty()){\n\t\t\tconsumer.setAdditionalParameters(customOAuthParams);\n\t\t}\n\t\tif(this.listener != null){...\n\t\t}\n\t\tconsumer.sign(request);...\n\t\tresponse=sendRequest(request);...\n\t\tboolean requestHandled=false;\n\t\tif(this.listener != null){\n\t\t\trequestHandled=this.listener.onResponseReceived(request,response);\n\t\t}...\n\t\tHttpParameters responseParams=OAuth.decodeForm(response.getContent());\n\t\tString token=responseParams.getFirst(OAuth.OAUTH_TOKEN);\n\t\tString secret=responseParams.getFirst(OAuth.OAUTH_TOKEN_SECRET);\n\t\tresponseParams.remove(OAuth.OAUTH_TOKEN);\n\t\tresponseParams.remove(OAuth.OAUTH_TOKEN_SECRET);\n\t\tsetResponseParameters(responseParams);...\n\t\tconsumer.setTokenWithSecret(token,secret);\n\t} catch (OAuthNotAuthorizedException e){...\n\t} catch (OAuthExpectationFailedException e){...\n\t} catch (Exception e){...\n\t} finally {\n\t\ttry {...\n\t\t} catch (Exception e){...\n\t\t} \n\t} \n}","a20":"protected void retrieveToken(OAuthConsumer consumer,String endpointUrl,HttpParameters customOAuthParams) throws OAuthMessageSignerException, OAuthCommunicationException, OAuthNotAuthorizedException, OAuthExpectationFailedException {\n\tMap<String,String> defaultHeaders=getRequestHeaders();...\n\tHttpRequest request=null;\n\tHttpResponse response=null;\n\ttry {...\n\t\tconsumer.sign(request);...\n\t\tHttpParameters responseParams=OAuth.decodeForm(response.getContent());\n\t\tString token=responseParams.getFirst(OAuth.OAUTH_TOKEN);\n\t\tString secret=responseParams.getFirst(OAuth.OAUTH_TOKEN_SECRET);\n\t\tresponseParams.remove(OAuth.OAUTH_TOKEN);\n\t\tresponseParams.remove(OAuth.OAUTH_TOKEN_SECRET);...\n\t} catch (OAuthNotAuthorizedException e){...\n\t} catch (OAuthExpectationFailedException e){...\n\t} catch (Exception e){...\n\t} finally {...\n\t} \n}"},{"Origin":"public DiffScope processDiffUnit(DiffUnit diffUnit,DiffPointProcessor processor){\n\tProperties p1=new Properties();\n\tProperties p2=new Properties();\n\tInputStream is1=null;\n\tInputStream is2=null;\n\ttry {\n\t\tis1=diffUnit.getLeftInputStream();\n\t\tis2=diffUnit.getRightInputStream();\n\t\tp1.load(is1);\n\t\tp2.load(is2);\n\t\tSet<String> keys=new TreeSet<String>();\n\t\tkeys.addAll(p1.stringPropertyNames());\n\t\tkeys.addAll(p2.stringPropertyNames());\n\t\tfor (Iterator<String> it=keys.iterator(); it.hasNext(); ){\n\t\t\tString key=it.next();\n\t\t\tString v1=p1.getProperty(key);\n\t\t\tString v2=p2.getProperty(key);\n\t\t\tif(v1 == null){\n\t\t\t\tDiffPoint diffPoint=new DiffPoint(diffUnit,\"Property in right only: \" + key);\n\t\t\t\tprocessor.processDiffPoint(diffPoint);\n\t\t\t}else if(v2 == null){\n\t\t\t\tDiffPoint diffPoint=new DiffPoint(diffUnit,\"Property in left only: \" + key);\n\t\t\t\tprocessor.processDiffPoint(diffPoint);\n\t\t\t}else if(!v1.equals(v2)){\n\t\t\t\tDiffPoint diffPoint=new DiffPoint(diffUnit,\"Property value mismatch for key \" + key + \": \"+ v1+ \", \"+ v2);\n\t\t\t\tprocessor.processDiffPoint(diffPoint);\n\t\t\t}\n\t\t}\n\t} catch (IOException ioe){\n\t\tlog.error(\"Failure comparing properties file: \" + diffUnit.getScopedPath(),ioe);\n\t} finally {\n\t\tif(is1 != null){\n\t\t\ttry {\n\t\t\t\tis1.close();\n\t\t\t} catch (Exception ex){\n\t\t\t} \n\t\t}\n\t\tif(is2 != null){\n\t\t\ttry {\n\t\t\t\tis2.close();\n\t\t\t} catch (Exception ex){\n\t\t\t} \n\t\t}\n\t} \n\treturn null;\n}","a50":"public DiffScope processDiffUnit(DiffUnit diffUnit,DiffPointProcessor processor){...\n\ttry {\n\t\tis1=diffUnit.getLeftInputStream();\n\t\tis2=diffUnit.getRightInputStream();\n\t\tp1.load(is1);\n\t\tp2.load(is2);\n\t\tSet<String> keys=new TreeSet<String>();\n\t\tkeys.addAll(p1.stringPropertyNames());\n\t\tkeys.addAll(p2.stringPropertyNames());\n\t\tfor (Iterator<String> it=keys.iterator(); it.hasNext(); ){\n\t\t\tString key=it.next();\n\t\t\tString v1=p1.getProperty(key);\n\t\t\tString v2=p2.getProperty(key);\n\t\t\tif(v1 == null){\n\t\t\t\tDiffPoint diffPoint=new DiffPoint(diffUnit,\"Property in right only: \" + key);\n\t\t\t\tprocessor.processDiffPoint(diffPoint);\n\t\t\t}else if(v2 == null){\n\t\t\t\tDiffPoint diffPoint=new DiffPoint(diffUnit,\"Property in left only: \" + key);\n\t\t\t\tprocessor.processDiffPoint(diffPoint);\n\t\t\t}else if(!v1.equals(v2)){\n\t\t\t\tDiffPoint diffPoint=new DiffPoint(diffUnit,\"Property value mismatch for key \" + key + \": \"+ v1+ \", \"+ v2);\n\t\t\t\tprocessor.processDiffPoint(diffPoint);\n\t\t\t}\n\t\t}\n\t} catch (IOException ioe){...\n\t} finally {...\n\t} ...\n}","a20":"public DiffScope processDiffUnit(DiffUnit diffUnit,DiffPointProcessor processor){...\n\ttry {...\n\t\tSet<String> keys=new TreeSet<String>();...\n\t\tfor (Iterator<String> it=keys.iterator(); it.hasNext(); ){\n\t\t\tString key=it.next();\n\t\t\tString v1=p1.getProperty(key);\n\t\t\tString v2=p2.getProperty(key);\n\t\t\tif(v1 == null){...\n\t\t\t}else if ...\n\t\t}\n\t} catch (IOException ioe){...\n\t} finally {...\n\t} ...\n}"},{"Origin":"public DiffScope processDiffUnit(DiffUnit diffUnit,DiffPointProcessor processor){\n\tDiffScope scope=null;\n\tif(diffUnit instanceof XMLDocumentDiffUnit){\n\t\tXMLDocumentDiffUnit du=(XMLDocumentDiffUnit)diffUnit;\n\t\tDocumentType dt1=du.getLeftDoctype();\n\t\tDocumentType dt2=du.getRightDoctype();\n\t\tprocess(diffUnit,dt1,dt2,processor);\n\t}else if(diffUnit instanceof XMLNodeDiffUnit){\n\t\tXMLNodeDiffUnit du=(XMLNodeDiffUnit)diffUnit;\n\t\tNode n1=du.getLeftNode();\n\t\tNode n2=du.getRightNode();\n\t\tif(n1 != null && n2 != null){\n\t\t\tString v1=n1.getNodeValue();\n\t\t\tString v2=n2.getNodeValue();\n\t\t\tif(v1 != null && v2 != null){\n\t\t\t\tif(!v1.equals(v2)){\n\t\t\t\t\tDiffPoint diffPoint=new DiffPoint(diffUnit,\"Node value mismatch: \" + v1 + \", \"+ v2);\n\t\t\t\t\tprocessor.processDiffPoint(diffPoint);\n\t\t\t\t}\n\t\t\t}else if(v1 == null && v2 != null){\n\t\t\t\tDiffPoint diffPoint=new DiffPoint(diffUnit,\"Node value present in right only\");\n\t\t\t\tprocessor.processDiffPoint(diffPoint);\n\t\t\t}else if(v1 != null && v2 == null){\n\t\t\t\tDiffPoint diffPoint=new DiffPoint(diffUnit,\"Node value present in left only\");\n\t\t\t\tprocessor.processDiffPoint(diffPoint);\n\t\t\t}\n\t\t}else if(n1 == null && n2 != null){\n\t\t\tDiffPoint diffPoint=new DiffPoint(diffUnit,\"Node present in right only\");\n\t\t\tprocessor.processDiffPoint(diffPoint);\n\t\t}else if(n1 != null && n2 == null){\n\t\t\tDiffPoint diffPoint=new DiffPoint(diffUnit,\"Node present in left only\");\n\t\t\tprocessor.processDiffPoint(diffPoint);\n\t\t}\n\t}else if(diffUnit instanceof XMLAttributeDiffUnit){\n\t\tXMLAttributeDiffUnit du=(XMLAttributeDiffUnit)diffUnit;\n\t\tString name=du.getAttributeName();\n\t\tif(!du.leftExists()){\n\t\t\tDiffPoint diffPoint=new DiffPoint(diffUnit,\"Attribute present in right only: \" + name);\n\t\t\tprocessor.processDiffPoint(diffPoint);\n\t\t}else if(!du.rightExists()){\n\t\t\tDiffPoint diffPoint=new DiffPoint(diffUnit,\"Attribute present in left only: \" + name);\n\t\t\tprocessor.processDiffPoint(diffPoint);\n\t\t}else {\n\t\t\tNode n1=du.getLeftAttributeNode();\n\t\t\tNode n2=du.getRightAttributeNode();\n\t\t\tString v1=n1.getNodeValue();\n\t\t\tString v2=n2.getNodeValue();\n\t\t\tif(!v1.equals(v2)){\n\t\t\t\tDiffPoint diffPoint=new DiffPoint(diffUnit,\"Attribute value mismatch for \" + name + \":\"+ v1+ \", \"+ v2);\n\t\t\t\tprocessor.processDiffPoint(diffPoint);\n\t\t\t}\n\t\t}\n\t}else {\n\t\ttry {\n\t\t\tInputStream is1=diffUnit.getLeftInputStream();\n\t\t\tInputStream is2=diffUnit.getRightInputStream();\n\t\t\tString scopedPath=diffUnit.getScopedPath();\n\t\t\tscope=createScope(scopedPath,is1,is2);\n\t\t} catch (IOException ioe){\n\t\t\tlog.error(\"Failure processing \" + diffUnit,ioe);\n\t\t} \n\t}\n\treturn scope;\n}","a50":"public DiffScope processDiffUnit(DiffUnit diffUnit,DiffPointProcessor processor){\n\tDiffScope scope=null;\n\tif(diffUnit instanceof XMLDocumentDiffUnit){\n\t\tXMLDocumentDiffUnit du=(XMLDocumentDiffUnit)diffUnit;...\n\t\tprocess(diffUnit,dt1,dt2,processor);\n\t}else if(diffUnit instanceof XMLNodeDiffUnit){\n\t\tXMLNodeDiffUnit du=(XMLNodeDiffUnit)diffUnit;\n\t\tNode n1=du.getLeftNode();\n\t\tNode n2=du.getRightNode();\n\t\tif(n1 != null && n2 != null){\n\t\t\tString v1=n1.getNodeValue();\n\t\t\tString v2=n2.getNodeValue();\n\t\t\tif(v1 != null && v2 != null){\n\t\t\t\tif(!v1.equals(v2)){\n\t\t\t\t\tDiffPoint diffPoint=new DiffPoint(diffUnit,\"Node value mismatch: \" + v1 + \", \"+ v2);\n\t\t\t\t\tprocessor.processDiffPoint(diffPoint);\n\t\t\t\t}\n\t\t\t}else if ...\n\t\t}else if ...\n\t}else if(diffUnit instanceof XMLAttributeDiffUnit){\n\t\tXMLAttributeDiffUnit du=(XMLAttributeDiffUnit)diffUnit;\n\t\tString name=du.getAttributeName();\n\t\tif(!du.leftExists()){\n\t\t\tDiffPoint diffPoint=new DiffPoint(diffUnit,\"Attribute present in right only: \" + name);\n\t\t\tprocessor.processDiffPoint(diffPoint);\n\t\t}else if ...\n\t}else {\n\t\ttry {\n\t\t\tInputStream is1=diffUnit.getLeftInputStream();\n\t\t\tInputStream is2=diffUnit.getRightInputStream();\n\t\t\tString scopedPath=diffUnit.getScopedPath();\n\t\t\tscope=createScope(scopedPath,is1,is2);\n\t\t} catch (IOException ioe){...\n\t\t} \n\t}\n\treturn scope;\n}","a20":"public DiffScope processDiffUnit(DiffUnit diffUnit,DiffPointProcessor processor){...\n\tif(diffUnit instanceof XMLDocumentDiffUnit){...\n\t}else if(diffUnit instanceof XMLNodeDiffUnit){...\n\t\tNode n1=du.getLeftNode();\n\t\tNode n2=du.getRightNode();\n\t\tif(n1 != null && n2 != null){\n\t\t\tString v1=n1.getNodeValue();\n\t\t\tString v2=n2.getNodeValue();...\n\t\t}else if ...\n\t}else if(diffUnit instanceof XMLAttributeDiffUnit){\n\t\tXMLAttributeDiffUnit du=(XMLAttributeDiffUnit)diffUnit;...\n\t\tif(!du.leftExists()){...\n\t\t}else if ...\n\t}else {...\n\t}\n\treturn scope;\n}"}],"ObjectiveFunctionValue":0.22260771301593574,"Iterations":100}