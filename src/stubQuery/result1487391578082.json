{"filter":1,"results":[{"file_path":"dataset/org/htmlparser/thumbelina/2.1/org/htmlparser/lexerapplications/thumbelina/Thumbelina.java","method":"extractImageLinks","pos":754,"doc":"/** \n * Get the links of an element of a document. Only gets the links on IMG elements that reference another image. The latter is based on suffix (.jpg, .gif and .png).\n * @param lexer The fully conditioned lexer, ready to rock.\n * @param docbase The url to read.\n * @return The URLs, targets of the IMG links;\n * @exception IOException If the underlying infrastructure throws it.\n * @exception ParserException If there is a problem parsing the url.\n */\n"},{"file_path":"dataset/org/htmlparser/htmlparser/2.1/org/htmlparser/PrototypicalNodeFactory.java","method":"registerTags","pos":294,"doc":"/** \n * Register all known tags in the tag package. Registers tags from the  {@link org.htmlparser.tags tag package} bycalling  {@link #registerTag(Tag) registerTag()}.\n * @return 'this' nodefactory as a convenience.\n */\n"},{"file_path":"dataset/org/htmlparser/htmlparser/2.1/org/htmlparser/sax/XMLReader.java","method":"doSAX","pos":616,"doc":"/** \n * Process nodes recursively on the DocumentHandler. Calls methods on the handler based on the type and whether it's an end tag. Processes composite tags recursively. Does rudimentary namespace processing according to the state of  {@link #mNameSpaces}and  {@link #mNameSpacePrefixes}. \n * @param node The htmlparser node to traverse.\n * @exception ParserException If a parse error occurs.\n * @exception SAXException If a SAX error occurs.\n */\n"},{"file_path":"dataset/org/htmlparser/thumbelina/2.1/org/htmlparser/lexerapplications/thumbelina/Thumbelina.java","method":"run","pos":1061,"doc":"/** \n * The main processing loop. Pull suspect URLs off the queue one at a time, fetch and parse it, request images and enqueue further links.\n */\n"},{"file_path":"dataset/net/sf/jtidy/jtidy/r938/org/w3c/tidy/Clean.java","method":"cleanBodyAttrs","pos":384,"doc":"/** \n * Move presentation attribs from body to style element. <pre> background=\"foo\" . body { background-image: url(foo) } bgcolor=\"foo\" . body { background-color: foo } text=\"foo\" . body { color: foo } link=\"foo\" . :link { color: foo } vlink=\"foo\" . :visited { color: foo } alink=\"foo\" . :active { color: foo } <\/pre>\n * @param lexer Lexer\n * @param body body node\n */\n"},{"file_path":"dataset/net/sf/jtidy/jtidy/r938/org/w3c/tidy/Clean.java","method":"createProps","pos":168,"doc":"/** \n * Create sorted linked list of properties from style string.\n * @param prop StyleProp\n * @param style style string\n * @return StyleProp with given style\n */\n"},{"file_path":"dataset/org/htmlparser/htmllexer/2.1/org/htmlparser/lexer/Lexer.java","method":"parseCDATA","pos":431,"doc":"/** \n * Return CDATA as a text node. Slightly less rigid than  {@link #parseCDATA()} this method provides forparsing CDATA that may contain quoted strings that have embedded ETAGO (\"&lt;/\") delimiters and skips single and multiline comments.\n * @param quotesmart If <code>true<\/code> the strict definition of CDATA isextended to allow for single or double quoted ETAGO (\"&lt;/\") sequences.\n * @return The <code>TextNode<\/code> of the CDATA or <code>null<\/code> if none.\n * @see #parseCDATA()\n * @exception ParserException If a problem occurs reading from the source.\n */\n"},{"file_path":"dataset/net/sourceforge/nekohtml/nekohtml/1.9.15/org/cyberneko/html/HTMLScanner.java","method":"scanUntilEndTag","pos":2102,"doc":"/** \n * Scans the content of <noscript>: it doesn't get parsed but is considered as plain text when feature  {@link HTMLScanner#PARSE_NOSCRIPT_CONTENT} is set to false.\n * @param the tag for which content is scanned (one of \"noscript\", \"noframes\", \"iframe\")\n * @throws IOException\n */\n"},{"file_path":"dataset/org/htmlparser/htmllexer/2.1/org/htmlparser/lexer/Page.java","method":"constructUrl","pos":918,"doc":"/** \n * Build a URL from the link and base provided.\n * @param link The (relative) URI.\n * @param base The base URL of the page, either from the &lt;BASE&gt; tagor, if none, the URL the page is being fetched from.\n * @param strict If <code>true<\/code> a link starting with '?' is handledaccording to <a href=\"http://www.ietf.org/rfc/rfc2396.txt\">RFC 2396<\/a>, otherwise the common interpretation of a query appended to the base is used instead.\n * @return An absolute URL.\n * @exception MalformedURLException If creating the URL fails.\n */\n"}]}