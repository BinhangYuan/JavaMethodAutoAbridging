{"filter":1,"results":[{"file_path":"dataset/org/htmlparser/htmlparser/2.1/org/htmlparser/scanners/ScriptDecoder.java","method":"Decode","pos":267,"doc":"/** \n * Decode script encoded by the Microsoft obfuscator.\n * @param page The source for encoded text.\n * @param cursor The position at which to start decoding.This is advanced to the end of the encoded text.\n * @return The plaintext.\n * @exception ParserException If an error is discovered while decoding.\n */\n"},{"file_path":"dataset/org/htmlparser/htmllexer/2.1/org/htmlparser/lexer/Lexer.java","method":"scanJIS","pos":670,"doc":"/** \n * Advance the cursor through a JIS escape sequence. NOTE:<br> A list of ISO-2022 escape sequences for charset switching.<br> For more detail, see ISO-2022, RFC1468 or RFC1554.<p> [ double byte characters ] <ul> <li>(*) JIS X 0208-1978(old JIS): [ESC] $ @ <li>(*) JIS X 0208-1983(new JIS): [ESC] $ B <li>JIS X 0208-1990: [ESC] & @ [ESC] $ B <li>JIS X 0212-1990: [ESC] $ ( D <li>1st plane of JIS X 0213:2000: [ESC] $ ( O <li>1st plane of JIS X 0213:2004: [ESC] $ ( Q <li>2nd plane of JIS X 0213:2000: [ESC] $ ( P <\/ul> <p>[ single byte characters ] <ul> <li>(*) ISO/IEC 646 IRV(US-ASCII): [ESC] ( B <li>(*) JIS X 0201-1976 (\"Roman\" set) <ul> <li>[ESC] ( J <li>[ESC] ( H (NOT RECOMMENDED but rarely used) <\/ul> <li>JIS X 0201-1976 (\"Kana\" set): [ESC] ( I (NOT RECOMMENDED but rarely used) <\/ul> <p>(*): commonly used\n * @param cursor A cursor positioned within the escape sequence.\n * @exception ParserException If a problem occurs reading from the source.\n */\n"},{"file_path":"dataset/org/htmlparser/htmllexer/2.1/org/htmlparser/lexer/PageIndex.java","method":"add","pos":135,"doc":"/** \n * Add an element to the list\n * @param cursor The element to add.\n * @return The position at which the element was inserted orthe index of the existing element if it is a duplicate.\n */\n"},{"file_path":"dataset/org/htmlparser/htmllexer/2.1/org/htmlparser/lexer/Page.java","method":"getCharacter","pos":713,"doc":"/** \n * Read the character at the given cursor position. The cursor position can be only behind or equal to the current source position. Returns end of lines (EOL) as \\n, by converting \\r and \\r\\n to \\n, and updates the end-of-line index accordingly. Advances the cursor position by one (or two in the \\r\\n case).\n * @param cursor The position to read at.\n * @return The character at that position, and modifies the cursor toprepare for the next read. If the source is exhausted a zero is returned.\n * @exception ParserException If an IOException on the underlying sourceoccurs, or an attempt is made to read characters in the future (the cursor position is ahead of the underlying stream)\n */\n"}]}