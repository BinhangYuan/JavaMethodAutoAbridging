{"filter":1,"results":[{"file_path":"dataset/org/htmlparser/thumbelina/2.1/org/htmlparser/lexerapplications/thumbelina/Thumbelina.java","method":"extractImageLinks","pos":754,"doc":"/** \n * Get the links of an element of a document. Only gets the links on IMG elements that reference another image. The latter is based on suffix (.jpg, .gif and .png).\n * @param lexer The fully conditioned lexer, ready to rock.\n * @param docbase The url to read.\n * @return The URLs, targets of the IMG links;\n * @exception IOException If the underlying infrastructure throws it.\n * @exception ParserException If there is a problem parsing the url.\n */\n"},{"file_path":"dataset/org/htmlparser/thumbelina/2.1/org/htmlparser/lexerapplications/thumbelina/PicturePanel.java","method":"paint","pos":291,"doc":"/** \n * Paints this component. Runs through the list of tiles and for every one that intersects the clip region performs a <code>drawImage()<\/code>.\n * @param graphics The graphics context used to paint with.\n */\n"},{"file_path":"dataset/net/sf/jtidy/jtidy/r938/org/w3c/tidy/Clean.java","method":"cleanBodyAttrs","pos":384,"doc":"/** \n * Move presentation attribs from body to style element. <pre> background=\"foo\" . body { background-image: url(foo) } bgcolor=\"foo\" . body { background-color: foo } text=\"foo\" . body { color: foo } link=\"foo\" . :link { color: foo } vlink=\"foo\" . :visited { color: foo } alink=\"foo\" . :active { color: foo } <\/pre>\n * @param lexer Lexer\n * @param body body node\n */\n"},{"file_path":"dataset/org/htmlparser/thumbelina/2.1/org/htmlparser/lexerapplications/thumbelina/Thumbelina.java","method":"run","pos":1061,"doc":"/** \n * The main processing loop. Pull suspect URLs off the queue one at a time, fetch and parse it, request images and enqueue further links.\n */\n"},{"file_path":"dataset/org/htmlparser/sitecapturer/2.1/org/htmlparser/parserapplications/SiteCapturer.java","method":"copy","pos":394,"doc":"/** \n * Copy a resource (image) locally. Removes one element from the 'to be copied' list and saves the resource it points to locally as a file.\n */\n"},{"file_path":"dataset/org/htmlparser/sitecapturer/2.1/org/htmlparser/parserapplications/WikiCapturer.java","method":"main","pos":117,"doc":"/** \n * Mainline to capture a web site locally.\n * @param args The command line arguments.There are three arguments the web site to capture, the local directory to save it to, and a flag (true or false) to indicate whether resources such as images and video are to be captured as well. These are requested via dialog boxes if not supplied.\n * @exception MalformedURLException If the supplied URL is invalid.\n * @exception IOException If an error occurs reading the pages or resources.\n */\n"},{"file_path":"dataset/org/htmlparser/thumbelina/2.1/org/htmlparser/lexerapplications/thumbelina/Sequencer.java","method":"random","pos":106,"doc":"/** \n * Compute a random point to load the image. Generate a random point for one of the corners of the image and then condition the numbers so the image is on screen.\n * @param url The url this picture was fetched from.Used in computing the random position, so the picture is always placed in the same location, even when refetched.\n * @param width The width of the image.\n * @param height The height of the image.\n * @return The random point to use.\n */\n"},{"file_path":"dataset/org/htmlparser/sitecapturer/2.1/org/htmlparser/parserapplications/SiteCapturer.java","method":"main","pos":746,"doc":"/** \n * Mainline to capture a web site locally.\n * @param args The command line arguments.There are three arguments the web site to capture, the local directory to save it to, and a flag (true or false) to indicate whether resources such as images and video are to be captured as well. These are requested via dialog boxes if not supplied.\n * @exception MalformedURLException If the supplied URL is invalid.\n * @exception IOException If an error occurs reading the page or resources.\n */\n"},{"file_path":"dataset/org/htmlparser/thumbelina/2.1/org/htmlparser/lexerapplications/thumbelina/Picture.java","method":"getImage","pos":174,"doc":"/** \n * Getter for property image.\n * @return Value of property image.\n */\n"},{"file_path":"dataset/org/htmlparser/htmlparser/2.1/org/htmlparser/tags/ImageTag.java","method":"extractImageLocn","pos":71,"doc":"/** \n * Extract the location of the image Given the tag (with attributes), and the url of the html page in which this tag exists, perform best effort to extract the 'intended' URL. Attempts to handle such attributes as: <pre> &lt;IMG SRC=http://www.redgreen.com&gt; - normal &lt;IMG SRC =http://www.redgreen.com&gt; - space between attribute name and equals sign &lt;IMG SRC= http://www.redgreen.com&gt; - space between equals sign and attribute value &lt;IMG SRC = http://www.redgreen.com&gt; - space both sides of equals sign <\/pre>\n * @return The relative URL for the image.\n */\n"}]}