{"filter":1,"results":[{"file_path":"dataset/org/htmlparser/htmlparser/2.1/org/htmlparser/http/HttpHeader.java","method":"getRequestHeader","pos":48,"doc":"/** \n * Gets the request header for the connection. <em>This header is generated from the contents of the connection and may not be exactly the same as the request that will be sent.<\/em>\n * @param connection The connection to convert into an HTTP request header.\n * @return The string that would be sent by the HTTP request.\n */\n"},{"file_path":"dataset/org/htmlparser/htmllexer/2.1/org/htmlparser/http/ConnectionManager.java","method":"openConnection","pos":547,"doc":"/** \n * Opens a connection using the given url.\n * @param url The url to open.\n * @return The connection.\n * @exception ParserException if an i/o exception occurs accessing the url.\n */\n"},{"file_path":"dataset/org/htmlparser/htmlparser/2.1/org/htmlparser/http/HttpHeader.java","method":"getResponseHeader","pos":87,"doc":"/** \n * Gets the response header for the connection. Calling this method on an un-connected connection will generate an error, as will an attempt to get information from a connected but invalid connection. <em>This header is generated from the contents of the connection and may not be exactly the same as the response that was received.<\/em>\n * @param conn The connection to convert into an HTTP response header.\n * @return The string that was sent as the HTTP response.\n */\n"},{"file_path":"dataset/org/htmlparser/htmllexer/2.1/org/htmlparser/http/ConnectionManager.java","method":"addCookies","pos":883,"doc":"/** \n * Generate a HTTP cookie header value string from the cookie jar. <pre> The syntax for the header is: cookie          =       \"Cookie:\" cookie-version 1*((\";\" | \",\") cookie-value) cookie-value    =       NAME \"=\" VALUE [\";\" path] [\";\" domain] cookie-version  =       \"$Version\" \"=\" value NAME            =       attr VALUE           =       value path            =       \"$Path\" \"=\" value domain          =       \"$Domain\" \"=\" value <\/pre>\n * @param connection The connection being accessed.\n * @see <a href=\"http://www.ietf.org/rfc/rfc2109.txt\">RFC 2109<\/a>\n * @see <a href=\"http://www.ietf.org/rfc/rfc2396.txt\">RFC 2396<\/a>\n */\n"},{"file_path":"dataset/org/htmlparser/htmllexer/2.1/org/htmlparser/http/ConnectionManager.java","method":"openConnection","pos":826,"doc":"/** \n * Opens a connection based on a given string. The string is either a file, in which case <code>file://localhost<\/code> is prepended to a canonical path derived from the string, or a url that begins with one of the known protocol strings, i.e. <code>http://<\/code>. Embedded spaces are silently converted to %20 sequences.\n * @param string The name of a file or a url.\n * @return The connection.\n * @exception ParserException if the string is not a valid url or file.\n */\n"},{"file_path":"dataset/org/htmlparser/htmllexer/2.1/org/htmlparser/http/ConnectionManager.java","method":"parseCookies","pos":1082,"doc":"/** \n * Check for cookie and parse into cookie jar.\n * @param connection The connection to extract cookie information from.\n */\n"},{"file_path":"dataset/org/htmlparser/htmllexer/2.1/org/htmlparser/lexer/Page.java","method":"setConnection","pos":516,"doc":"/** \n * Set the URLConnection to be used by this page. Starts reading from the given connection. This also resets the current url.\n * @param connection The connection to use.It will be connected by this method.\n * @exception ParserException If 1)the <code>connect()<\/code> method fails or 2)an I/O error occurs opening the input stream or  3)the character set designated in the HTTP header is unsupported or or 4)URL used to create the connection object supplied is not in the right form or syntax \n */\n"}]}