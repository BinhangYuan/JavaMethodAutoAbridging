{"filter":1,"results":[{"file_path":"dataset/org/htmlparser/thumbelina/2.1/org/htmlparser/lexerapplications/thumbelina/ThumbelinaFrame.java","method":"googlesearch","pos":862,"doc":"/** \n * Query google via user specified keywords and queue results. Asks the user for keywords, and then submits them as input to the usual google form: <pre> <form action=\"/search\" name=f> <span id=hf><\/span> <table cellspacing=0 cellpadding=0> <tr valign=middle> <td width=75>&nbsp;<\/td> <td align=center> <input maxLength=256 size=55 name=q value=\"\"> <input type=hidden name=ie value=\"UTF-8\"> <input type=hidden name=oe value=\"UTF-8\"> <input name=hl type=hidden value=en><br> <input type=submit value=\"Google Search\" name=btnG> <input type=submit value=\"I'm Feeling Lucky\" name=btnI> <\/td> <td valign=top nowrap><font size=-2> &nbsp;&#8226; <a href=/advanced_search?hl=en>Advanced Search<\/a> <br>&nbsp;&#8226; <a href=/preferences?hl=en>Preferences<\/a> <br>&nbsp;&#8226; <a href=/language_tools?hl=en>Language Tools<\/a> <\/font> <\/td> <\/tr> <tr> <td colspan=3 align=center><font size=-1> Search: <input id=all type=radio name=meta value=\"\" checked> <label for=all> the web<\/label> <input id=cty type=radio name=meta value=\"cr=countryCA\" > <label for=cty>pages from Canada<\/label> <\/font> <\/td> <\/tr> <\/table> <\/form> <\/pre> Creates a query of the form: <pre> http://www.google.ca/search?hl=en&ie=UTF-8&oe=UTF-8&q=thumbs&btnG=Google+Search&meta= <\/pre>\n */\n"},{"file_path":"dataset/org/htmlparser/htmllexer/2.1/org/htmlparser/lexer/Lexer.java","method":"parseJsp","pos":1387,"doc":"/** \n * Parse a java server page node. Scan characters until \"%&gt;\" is encountered, or the input stream is exhausted, in which case <code>null<\/code> is returned.\n * @param start The position at which to start scanning.\n * @return The parsed node.\n * @exception ParserException If a problem occurs reading from the source.\n */\n"},{"file_path":"dataset/org/htmlparser/htmllexer/2.1/org/htmlparser/lexer/Page.java","method":"readObject","pos":415,"doc":"/** \n * Deserialize the page. For details see <code>writeObject()<\/code>.\n * @param in The object stream to decode.\n * @exception IOException If there is a deserialization problem withthe stream.\n * @exception ClassNotFoundException If the deserialized class can't belocated with the current classpath and class loader.\n */\n"},{"file_path":"dataset/org/htmlparser/htmllexer/2.1/org/htmlparser/lexer/Page.java","method":"constructUrl","pos":918,"doc":"/** \n * Build a URL from the link and base provided.\n * @param link The (relative) URI.\n * @param base The base URL of the page, either from the &lt;BASE&gt; tagor, if none, the URL the page is being fetched from.\n * @param strict If <code>true<\/code> a link starting with '?' is handledaccording to <a href=\"http://www.ietf.org/rfc/rfc2396.txt\">RFC 2396<\/a>, otherwise the common interpretation of a query appended to the base is used instead.\n * @return An absolute URL.\n * @exception MalformedURLException If creating the URL fails.\n */\n"},{"file_path":"dataset/org/htmlparser/sitecapturer/2.1/org/htmlparser/parserapplications/SiteCapturer.java","method":"process","pos":470,"doc":"/** \n * Process a single page.\n * @param filter The filter to apply to the collected nodes.\n * @exception ParserException If a parse error occurs.\n */\n"},{"file_path":"dataset/org/htmlparser/sitecapturer/2.1/org/htmlparser/parserapplications/WikiCapturer.java","method":"main","pos":117,"doc":"/** \n * Mainline to capture a web site locally.\n * @param args The command line arguments.There are three arguments the web site to capture, the local directory to save it to, and a flag (true or false) to indicate whether resources such as images and video are to be captured as well. These are requested via dialog boxes if not supplied.\n * @exception MalformedURLException If the supplied URL is invalid.\n * @exception IOException If an error occurs reading the pages or resources.\n */\n"},{"file_path":"dataset/org/htmlparser/htmlparser/2.1/org/htmlparser/scanners/ScriptScanner.java","method":"scan","pos":84,"doc":"/** \n * Scan for script. Accumulates text from the page, until &lt;/[a-zA-Z] is encountered.\n * @param tag The tag this scanner is responsible for.\n * @param lexer The source of CDATA.\n * @param stack The parse stack, <em>not used<\/em>.\n */\n"},{"file_path":"dataset/org/htmlparser/htmllexer/2.1/org/htmlparser/lexer/Lexer.java","method":"nextNode","pos":320,"doc":"/** \n * Get the next node from the source.\n * @param quotesmart If <code>true<\/code>, strings ignore quoted contents.\n * @return A Remark, Text or Tag, or <code>null<\/code> if nomore lexemes are present.\n * @exception ParserException If there is a problem with theunderlying page.\n */\n"},{"file_path":"dataset/org/htmlparser/htmlparser/2.1/org/htmlparser/scanners/CompositeTagScanner.java","method":"scan","pos":70,"doc":"/** \n * Collect the children. <p>An initial test is performed for an empty XML tag, in which case the start tag and end tag of the returned tag are the same and it has no children.<p> If it's not an empty XML tag, the lexer is repeatedly asked for subsequent nodes until an end tag is found or a node is encountered that matches the tag ender set or end tag ender set. In the latter case, a virtual end tag is created. Each node found that is not the end tag is added to the list of children. The end tag is special and not a child.<p> Nodes that also have a CompositeTagScanner as their scanner are recursed into, which provides the nested structure of an HTML page. This method operates in two possible modes, depending on a private boolean. It can recurse on the JVM stack, which has caused some overflow problems in the past, or it can use the supplied stack argument to nest scanning of child tags within itself. The former is left as an option in the code, mostly to help subsequent modifiers visualize what the internal nesting is doing.\n * @param tag The tag this scanner is responsible for.\n * @param lexer The source of subsequent nodes.\n * @param stack The parse stack. May contain pending tags that enclosethis tag.\n * @return The resultant tag (may be unchanged).\n */\n"},{"file_path":"dataset/net/sf/jtidy/jtidy/r938/org/w3c/tidy/Clean.java","method":"cleanWord2000","pos":2103,"doc":"/** \n * This is a major clean up to strip out all the extra stuff you get when you save as web page from Word 2000. It doesn't yet know what to do with VML tags, but these will appear as errors unless you declare them as new tags, such as o:p which needs to be declared as inline.\n * @param lexer Lexer\n * @param node node to clean up\n */\n"},{"file_path":"dataset/org/htmlparser/htmllexer/2.1/org/htmlparser/lexer/Page.java","method":"setConnection","pos":516,"doc":"/** \n * Set the URLConnection to be used by this page. Starts reading from the given connection. This also resets the current url.\n * @param connection The connection to use.It will be connected by this method.\n * @exception ParserException If 1)the <code>connect()<\/code> method fails or 2)an I/O error occurs opening the input stream or  3)the character set designated in the HTTP header is unsupported or or 4)URL used to create the connection object supplied is not in the right form or syntax \n */\n"},{"file_path":"dataset/org/htmlparser/sitecapturer/2.1/org/htmlparser/parserapplications/SiteCapturer.java","method":"main","pos":746,"doc":"/** \n * Mainline to capture a web site locally.\n * @param args The command line arguments.There are three arguments the web site to capture, the local directory to save it to, and a flag (true or false) to indicate whether resources such as images and video are to be captured as well. These are requested via dialog boxes if not supplied.\n * @exception MalformedURLException If the supplied URL is invalid.\n * @exception IOException If an error occurs reading the page or resources.\n */\n"},{"file_path":"dataset/org/htmlparser/htmllexer/2.1/org/htmlparser/lexer/InputStreamSource.java","method":"setEncoding","pos":224,"doc":"/** \n * Begins reading from the source with the given character set. If the current encoding is the same as the requested encoding, this method is a no-op. Otherwise any subsequent characters read from this page will have been decoded using the given character set.<p> Some magic happens here to obtain this result if characters have already been consumed from this source. Since a Reader cannot be dynamically altered to use a different character set, the underlying stream is reset, a new Source is constructed and a comparison made of the characters read so far with the newly read characters up to the current position. If a difference is encountered, or some other problem occurs, an exception is thrown.\n * @param character_set The character set to use to convert bytes intocharacters.\n * @exception ParserException If a character mismatch occurs betweencharacters already provided and those that would have been returned had the new character set been in effect from the beginning. An exception is also thrown if the underlying stream won't put up with these shenanigans.\n */\n"},{"file_path":"dataset/org/htmlparser/htmlparser/2.1/org/htmlparser/PrototypicalNodeFactory.java","method":"createTagNode","pos":478,"doc":"/** \n * Create a new tag node. Note that the attributes vector contains at least one element, which is the tag name (standalone attribute) at position zero. This can be used to decide which type of node to create, or gate other processing that may be appropriate.\n * @param page The page the node is on.\n * @param start The beginning position of the tag.\n * @param end The ending positiong of the tag.\n * @param attributes The attributes contained in this tag.\n * @return A tag node comprising the indicated characters from the page.\n */\n"},{"file_path":"dataset/org/htmlparser/htmlparser/2.1/org/htmlparser/tags/ImageTag.java","method":"extractImageLocn","pos":71,"doc":"/** \n * Extract the location of the image Given the tag (with attributes), and the url of the html page in which this tag exists, perform best effort to extract the 'intended' URL. Attempts to handle such attributes as: <pre> &lt;IMG SRC=http://www.redgreen.com&gt; - normal &lt;IMG SRC =http://www.redgreen.com&gt; - space between attribute name and equals sign &lt;IMG SRC= http://www.redgreen.com&gt; - space between equals sign and attribute value &lt;IMG SRC = http://www.redgreen.com&gt; - space both sides of equals sign <\/pre>\n * @return The relative URL for the image.\n */\n"},{"file_path":"dataset/org/htmlparser/htmlparser/2.1/org/htmlparser/scanners/ScriptDecoder.java","method":"Decode","pos":267,"doc":"/** \n * Decode script encoded by the Microsoft obfuscator.\n * @param page The source for encoded text.\n * @param cursor The position at which to start decoding.This is advanced to the end of the encoded text.\n * @return The plaintext.\n * @exception ParserException If an error is discovered while decoding.\n */\n"}]}