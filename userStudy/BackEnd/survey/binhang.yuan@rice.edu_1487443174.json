{"visitor": {"email": "binhang.yuan@rice.edu", "level": "Expert"}, "survey": {"suveryQ3": "suveryQ3Option0", "suveryQ2": "suveryQ2Option0", "suveryQ1": "suveryQ1Option1", "suveryQ0": "suveryQ0Option1"}, "questions": {"11": {"code": {"r50%": "public static String expandSystemId(String systemId,String baseSystemId){\n\tif(systemId == null || systemId.length() == 0){\n\t\treturn systemId;\n\t}\n\tString id=fixURI(systemId);\n\tURI base=null;\n\tURI uri=null;\n\ttry {\n\t\tif(baseSystemId == null || baseSystemId.length() == 0 || baseSystemId.equals(systemId)){\n\t\t\tString dir;\n\t\t\ttry {\n\t\t\t\tdir=fixURI(System.getProperty(\"user.dir\"));\n\t\t\t} catch (SecurityException se){\n\t\t\t\tdir=\"\";\n\t\t\t} \n\t\t\tbase=new URI(\"file\",\"\",dir,null,null);\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tbase=new URI(fixURI(baseSystemId));\n\t\t\t} catch (URI.MalformedURIException e){\n\t\t\t\tString dir;\n\t\t\t\ttry {\n\t\t\t\t\tdir=fixURI(System.getProperty(\"user.dir\"));\n\t\t\t\t} catch (SecurityException se){\n\t\t\t\t\tdir=\"\";\n\t\t\t\t} \n\t\t\t} \n\t\t}\n\t\turi=new URI(base,id);\n\t} catch (URI.MalformedURIException e){\n\t} \n}", "r10": "public static String expandSystemId(String systemId,String baseSystemId){\n\tif(systemId == null || systemId.length() == 0){\n\t\treturn systemId;\n\t}\n\tString id=fixURI(systemId);\n\tURI base=null;\n\tURI uri=null;\n\ttry {\n\t\turi=new URI(base,id);\n\t} catch (URI.MalformedURIException e){\n\t} \n\treturn uri.toString();\n}", "r20": "public static String expandSystemId(String systemId,String baseSystemId){\n\tString id=fixURI(systemId);\n\tURI base=null;\n\tURI uri=null;\n\ttry {\n\t\tif(baseSystemId == null || baseSystemId.length() == 0 || baseSystemId.equals(systemId)){\n\t\t\tString dir;\n\t\t\tbase=new URI(\"file\",\"\",dir,null,null);\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tbase=new URI(fixURI(baseSystemId));\n\t\t\t} catch (URI.MalformedURIException e){\n\t\t\t\tString dir;\n\t\t\t\ttry {\n\t\t\t\t\tdir=fixURI(System.getProperty(\"user.dir\"));\n\t\t\t\t} catch (SecurityException se){\n\t\t\t\t\tdir=\"\";\n\t\t\t\t} \n\t\t\t} \n\t\t}\n\t\turi=new URI(base,id);\n\t} catch (URI.MalformedURIException e){\n\t} \n\treturn uri.toString();\n}"}, "reduction": "r50%", "time": 31, "answer": "fda", "type": "T3", "method": 1}, "10": {"code": "public static String expandSystemId(String systemId,String baseSystemId){\n\tif(systemId == null || systemId.length() == 0){\n\t\treturn systemId;\n\t}\n\ttry {\n\t\tURI uri=new URI(systemId);\n\t\tif(uri != null){\n\t\t\treturn systemId;\n\t\t}\n\t} catch (URI.MalformedURIException e){\n\t} \n\tString id=fixURI(systemId);\n\tURI base=null;\n\tURI uri=null;\n\ttry {\n\t\tif(baseSystemId == null || baseSystemId.length() == 0 || baseSystemId.equals(systemId)){\n\t\t\tString dir;\n\t\t\ttry {\n\t\t\t\tdir=fixURI(System.getProperty(\"user.dir\"));\n\t\t\t} catch (SecurityException se){\n\t\t\t\tdir=\"\";\n\t\t\t} \n\t\t\tif(!dir.endsWith(\"/\")){\n\t\t\t\tdir=dir + \"/\";\n\t\t\t}\n\t\t\tbase=new URI(\"file\",\"\",dir,null,null);\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tbase=new URI(fixURI(baseSystemId));\n\t\t\t} catch (URI.MalformedURIException e){\n\t\t\t\tString dir;\n\t\t\t\ttry {\n\t\t\t\t\tdir=fixURI(System.getProperty(\"user.dir\"));\n\t\t\t\t} catch (SecurityException se){\n\t\t\t\t\tdir=\"\";\n\t\t\t\t} \n\t\t\t\tif(baseSystemId.indexOf(':') != -1){\n\t\t\t\t\tbase=new URI(\"file\",\"\",fixURI(baseSystemId),null,null);\n\t\t\t\t} else {\n\t\t\t\t\tif(!dir.endsWith(\"/\")){\n\t\t\t\t\t\tdir=dir + \"/\";\n\t\t\t\t\t}\n\t\t\t\t\tdir=dir + fixURI(baseSystemId);\n\t\t\t\t\tbase=new URI(\"file\",\"\",dir,null,null);\n\t\t\t\t}\n\t\t\t} \n\t\t}\n\t\turi=new URI(base,id);\n\t} catch (URI.MalformedURIException e){\n\t} \n\tif(uri == null){\n\t\treturn systemId;\n\t}\n\treturn uri.toString();\n}", "reduction": "r10", "time": 7, "answer": "dd", "type": "T3", "method": 0}, "13": {"code": "static Object createObject(String factoryId,String propertiesFilename,String fallbackClassName) throws ConfigurationError {\n\tif(DEBUG)\n\t\tdebugPrintln(\"debug is on\");\n\tSecuritySupport ss=SecuritySupport.getInstance();\n\tClassLoader cl=findClassLoader();\n\ttry {\n\t\tString systemProp=ss.getSystemProperty(factoryId);\n\t\tif(systemProp != null){\n\t\t\tif(DEBUG)\n\t\t\t\tdebugPrintln(\"found system property, value=\" + systemProp);\n\t\t\treturn newInstance(systemProp,cl,true);\n\t\t}\n\t} catch (SecurityException se){\n\t} \n\tString factoryClassName=null;\n\tif(propertiesFilename == null){\n\t\tFile propertiesFile=null;\n\t\tboolean propertiesFileExists=false;\n\t\ttry {\n\t\t\tString javah=ss.getSystemProperty(\"java.home\");\n\t\t\tpropertiesFilename=javah + File.separator + \"lib\"+ File.separator+ DEFAULT_PROPERTIES_FILENAME;\n\t\t\tpropertiesFile=new File(propertiesFilename);\n\t\t\tpropertiesFileExists=ss.getFileExists(propertiesFile);\n\t\t} catch (SecurityException e){\n\t\t\tfLastModified=-1;\n\t\t\tfXercesProperties=null;\n\t\t} \n\t\tsynchronized (ObjectFactory.class){\n\t\t\tboolean loadProperties=false;\n\t\t\ttry {\n\t\t\t\tif(fLastModified >= 0){\n\t\t\t\t\tif(propertiesFileExists && (fLastModified < (fLastModified=ss.getLastModified(propertiesFile)))){\n\t\t\t\t\t\tloadProperties=true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif(!propertiesFileExists){\n\t\t\t\t\t\t\tfLastModified=-1;\n\t\t\t\t\t\t\tfXercesProperties=null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif(propertiesFileExists){\n\t\t\t\t\t\tloadProperties=true;\n\t\t\t\t\t\tfLastModified=ss.getLastModified(propertiesFile);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(loadProperties){\n\t\t\t\t\tfXercesProperties=new Properties();\n\t\t\t\t\tFileInputStream fis=ss.getFileInputStream(propertiesFile);\n\t\t\t\t\tfXercesProperties.load(fis);\n\t\t\t\t\tfis.close();\n\t\t\t\t}\n\t\t\t} catch (Exception x){\n\t\t\t\tfXercesProperties=null;\n\t\t\t\tfLastModified=-1;\n\t\t\t} \n\t\t}\n\t\tif(fXercesProperties != null){\n\t\t\tfactoryClassName=fXercesProperties.getProperty(factoryId);\n\t\t}\n\t} else {\n\t\ttry {\n\t\t\tFileInputStream fis=ss.getFileInputStream(new File(propertiesFilename));\n\t\t\tProperties props=new Properties();\n\t\t\tprops.load(fis);\n\t\t\tfis.close();\n\t\t\tfactoryClassName=props.getProperty(factoryId);\n\t\t} catch (Exception x){\n\t\t} \n\t}\n\tif(factoryClassName != null){\n\t\tif(DEBUG)\n\t\t\tdebugPrintln(\"found in \" + propertiesFilename + \", value=\"+ factoryClassName);\n\t\treturn newInstance(factoryClassName,cl,true);\n\t}\n\tObject provider=findJarServiceProvider(factoryId);\n\tif(provider != null){\n\t\treturn provider;\n\t}\n\tif(fallbackClassName == null){\n\t\tthrow new ConfigurationError(\"Provider for \" + factoryId + \" cannot be found\",null);\n\t}\n\tif(DEBUG)\n\t\tdebugPrintln(\"using fallback, value=\" + fallbackClassName);\n\treturn newInstance(fallbackClassName,cl,true);\n}", "reduction": "r20", "time": 4, "answer": "daf", "type": "T3", "method": 0}, "12": {"code": {"r50%": "public static String expandSystemId(String systemId,String baseSystemId){\n\tString id=fixURI(systemId);\n\tURI base=null;\n\tURI uri=null;\n\ttry {\n\t\tif(baseSystemId == null || baseSystemId.length() == 0 || baseSystemId.equals(systemId)){\n\t\t\tString dir;\n\t\t\tbase=new URI(\"file\",\"\",dir,null,null);\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tbase=new URI(fixURI(baseSystemId));\n\t\t\t} catch (URI.MalformedURIException e){\n\t\t\t\tString dir;\n\t\t\t\ttry {\n\t\t\t\t\tdir=fixURI(System.getProperty(\"user.dir\"));\n\t\t\t\t} catch (SecurityException se){\n\t\t\t\t\tdir=\"\";\n\t\t\t\t} \n\t\t\t\tif(baseSystemId.indexOf(':') != -1){\n\t\t\t\t\tbase=new URI(\"file\",\"\",fixURI(baseSystemId),null,null);\n\t\t\t\t} else {\n\t\t\t\t\tdir=dir + fixURI(baseSystemId);\n\t\t\t\t\tbase=new URI(\"file\",\"\",dir,null,null);\n\t\t\t\t}\n\t\t\t} \n\t\t}\n\t\turi=new URI(base,id);\n\t} catch (URI.MalformedURIException e){\n\t} \n\treturn uri.toString();\n}", "r10": "public static String expandSystemId(String systemId,String baseSystemId){\n\ttry {\n\t\tif(baseSystemId == null || baseSystemId.length() == 0 || baseSystemId.equals(systemId)){\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tbase=new URI(fixURI(baseSystemId));\n\t\t\t} catch (URI.MalformedURIException e){\n\t\t\t\tString dir;\n\t\t\t} \n\t\t}\n\t\turi=new URI(base,id);\n\t} catch (URI.MalformedURIException e){\n\t} \n}", "r20": "public static String expandSystemId(String systemId,String baseSystemId){\n\tURI base=null;\n\tURI uri=null;\n\ttry {\n\t\tif(baseSystemId == null || baseSystemId.length() == 0 || baseSystemId.equals(systemId)){\n\t\t\tString dir;\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tbase=new URI(fixURI(baseSystemId));\n\t\t\t} catch (URI.MalformedURIException e){\n\t\t\t\tString dir;\n\t\t\t\tif(baseSystemId.indexOf(':') != -1){\n\t\t\t\t\tbase=new URI(\"file\",\"\",fixURI(baseSystemId),null,null);\n\t\t\t\t} else {\n\t\t\t\t\tdir=dir + fixURI(baseSystemId);\n\t\t\t\t\tbase=new URI(\"file\",\"\",dir,null,null);\n\t\t\t\t}\n\t\t\t} \n\t\t}\n\t\turi=new URI(base,id);\n\t} catch (URI.MalformedURIException e){\n\t} \n\treturn uri.toString();\n}"}, "reduction": "r20", "time": 15, "answer": "ddaf", "type": "T3", "method": 2}, "15": {"code": {"r50%": "static Object createObject(String factoryId,String propertiesFilename,String fallbackClassName) throws ConfigurationError {\n\tClassLoader cl=findClassLoader();\n\ttry {\n\t\tString systemProp=ss.getSystemProperty(factoryId);\n\t\tif(systemProp != null){\n\t\t\treturn newInstance(systemProp,cl,true);\n\t\t}\n\t} catch (SecurityException se){\n\t} \n\tString factoryClassName=null;\n\tif(propertiesFilename == null){\n\t\tFile propertiesFile=null;\n\t\tboolean propertiesFileExists=false;\n\t\ttry {\n\t\t\tpropertiesFilename=javah + File.separator + \"lib\"+ File.separator+ DEFAULT_PROPERTIES_FILENAME;\n\t\t\tpropertiesFile=new File(propertiesFilename);\n\t\t\tpropertiesFileExists=ss.getFileExists(propertiesFile);\n\t\t} catch (SecurityException e){\n\t\t} \n\t\tsynchronized (ObjectFactory.class){\n\t\t\ttry {\n\t\t\t\tif(fLastModified >= 0){\n\t\t\t\t} else {\n\t\t\t\t}\n\t\t\t\tif(loadProperties){\n\t\t\t\t\tfXercesProperties=new Properties();\n\t\t\t\t\tFileInputStream fis=ss.getFileInputStream(propertiesFile);\n\t\t\t\t\tfXercesProperties.load(fis);\n\t\t\t\t\tfis.close();\n\t\t\t\t}\n\t\t\t} catch (Exception x){\n\t\t\t\tfXercesProperties=null;\n\t\t\t} \n\t\t}\n\t} else {\n\t\ttry {\n\t\t\tFileInputStream fis=ss.getFileInputStream(new File(propertiesFilename));\n\t\t\tProperties props=new Properties();\n\t\t\tprops.load(fis);\n\t\t\tfis.close();\n\t\t\tfactoryClassName=props.getProperty(factoryId);\n\t\t} catch (Exception x){\n\t\t} \n\t}\n\tObject provider=findJarServiceProvider(factoryId);\n\treturn newInstance(fallbackClassName,cl,true);\n}", "r10": "static Object createObject(String factoryId,String propertiesFilename,String fallbackClassName) throws ConfigurationError {\n\tif(propertiesFilename == null){\n\t\ttry {\n\t\t\tpropertiesFilename=javah + File.separator + \"lib\"+ File.separator+ DEFAULT_PROPERTIES_FILENAME;\n\t\t\tpropertiesFile=new File(propertiesFilename);\n\t\t\tpropertiesFileExists=ss.getFileExists(propertiesFile);\n\t\t} catch (SecurityException e){\n\t\t} \n\t\tsynchronized (ObjectFactory.class){\n\t\t}\n\t} else {\n\t}\n}", "r20": "static Object createObject(String factoryId,String propertiesFilename,String fallbackClassName) throws ConfigurationError {\n\tif(propertiesFilename == null){\n\t\tFile propertiesFile=null;\n\t\ttry {\n\t\t\tpropertiesFilename=javah + File.separator + \"lib\"+ File.separator+ DEFAULT_PROPERTIES_FILENAME;\n\t\t\tpropertiesFile=new File(propertiesFilename);\n\t\t\tpropertiesFileExists=ss.getFileExists(propertiesFile);\n\t\t} catch (SecurityException e){\n\t\t} \n\t\tsynchronized (ObjectFactory.class){\n\t\t\ttry {\n\t\t\t\tif(fLastModified >= 0){\n\t\t\t\t} else {\n\t\t\t\t}\n\t\t\t\tif(loadProperties){\n\t\t\t\t\tFileInputStream fis=ss.getFileInputStream(propertiesFile);\n\t\t\t\t\tfXercesProperties.load(fis);\n\t\t\t\t}\n\t\t\t} catch (Exception x){\n\t\t\t} \n\t\t}\n\t} else {\n\t}\n}"}, "reduction": "r20", "time": 3, "answer": "dasf", "type": "T3", "method": 2}, "14": {"code": {"r50%": "static Object createObject(String factoryId,String propertiesFilename,String fallbackClassName) throws ConfigurationError {\n\tif(DEBUG)\n\t\tdebugPrintln(\"debug is on\");\n\tSecuritySupport ss=SecuritySupport.getInstance();\n\tClassLoader cl=findClassLoader();\n\tString factoryClassName=null;\n\tif(propertiesFilename == null){\n\t\tFile propertiesFile=null;\n\t\tboolean propertiesFileExists=false;\n\t\ttry {\n\t\t\tString javah=ss.getSystemProperty(\"java.home\");\n\t\t\tpropertiesFilename=javah + File.separator + \"lib\"+ File.separator+ DEFAULT_PROPERTIES_FILENAME;\n\t\t\tpropertiesFile=new File(propertiesFilename);\n\t\t\tpropertiesFileExists=ss.getFileExists(propertiesFile);\n\t\t} catch (SecurityException e){\n\t\t\tfLastModified=-1;\n\t\t\tfXercesProperties=null;\n\t\t} \n\t\tsynchronized (ObjectFactory.class){\n\t\t\tboolean loadProperties=false;\n\t\t\ttry {\n\t\t\t\tif(loadProperties){\n\t\t\t\t\tfXercesProperties=new Properties();\n\t\t\t\t\tFileInputStream fis=ss.getFileInputStream(propertiesFile);\n\t\t\t\t\tfXercesProperties.load(fis);\n\t\t\t\t\tfis.close();\n\t\t\t\t}\n\t\t\t} catch (Exception x){\n\t\t\t\tfXercesProperties=null;\n\t\t\t\tfLastModified=-1;\n\t\t\t} \n\t\t}\n\t} else {\n\t\ttry {\n\t\t\tFileInputStream fis=ss.getFileInputStream(new File(propertiesFilename));\n\t\t\tProperties props=new Properties();\n\t\t\tprops.load(fis);\n\t\t\tfis.close();\n\t\t\tfactoryClassName=props.getProperty(factoryId);\n\t\t} catch (Exception x){\n\t\t} \n\t}\n\tObject provider=findJarServiceProvider(factoryId);\n\tif(DEBUG)\n\treturn newInstance(fallbackClassName,cl,true);\n}", "r10": "static Object createObject(String factoryId,String propertiesFilename,String fallbackClassName) throws ConfigurationError {\n\tif(DEBUG)\n\t\tdebugPrintln(\"debug is on\");\n\tSecuritySupport ss=SecuritySupport.getInstance();\n\tClassLoader cl=findClassLoader();\n\tString factoryClassName=null;\n\tif(factoryClassName != null){\n\t}\n\tObject provider=findJarServiceProvider(factoryId);\n\tif(DEBUG)\n\t\tdebugPrintln(\"using fallback, value=\" + fallbackClassName);\n}", "r20": "static Object createObject(String factoryId,String propertiesFilename,String fallbackClassName) throws ConfigurationError {\n\tif(DEBUG)\n\t\tdebugPrintln(\"debug is on\");\n\tSecuritySupport ss=SecuritySupport.getInstance();\n\tClassLoader cl=findClassLoader();\n\ttry {\n\t\tString systemProp=ss.getSystemProperty(factoryId);\n\t\tif(systemProp != null){\n\t\t\treturn newInstance(systemProp,cl,true);\n\t\t}\n\t} catch (SecurityException se){\n\t} \n\tString factoryClassName=null;\n\tif(factoryClassName != null){\n\t\tif(DEBUG)\n\t\t\tdebugPrintln(\"found in \" + propertiesFilename + \", value=\"+ factoryClassName);\n\t\treturn newInstance(factoryClassName,cl,true);\n\t}\n\tObject provider=findJarServiceProvider(factoryId);\n\tif(DEBUG)\n\t\tdebugPrintln(\"using fallback, value=\" + fallbackClassName);\n\treturn newInstance(fallbackClassName,cl,true);\n}"}, "reduction": "r20", "time": 3, "answer": "dafa", "type": "T3", "method": 1}, "17": {"code": {"r50%": "protected void copy(){\n\tString link;\n\tString raw;\n\tString name;\n\tFile file;\n\tFile dir;\n\tURL source;\n\tbyte[] data;\n\tInputStream in;\n\tFileOutputStream out;\n\tint read;\n\tlink=(String)mImages.remove(0);\n\tmCopied.add(link);\n\tif(getCaptureResources()){\n\t\tfile=new File(getTarget(),name);\n\t\tSystem.out.println(\"copying \" + link + \" to \"+ file.getAbsolutePath());\n\t\tdir=file.getParentFile();\n\t\ttry {\n\t\t\tsource=new URL(link);\n\t\t\tdata=new byte[TRANSFER_SIZE];\n\t\t} catch (MalformedURLException murle){\n\t\t\tmurle.printStackTrace();\n\t\t} catch (IOException ioe){\n\t\t\tioe.printStackTrace();\n\t\t} \n\t}\n}", "r10": "protected void copy(){\n\tString link;\n\tString raw;\n\tString name;\n\tFile file;\n\tFile dir;\n\tURL source;\n\tbyte[] data;\n\tInputStream in;\n\tFileOutputStream out;\n\tlink=(String)mImages.remove(0);\n}", "r20": "protected void copy(){\n\tString link;\n\tString raw;\n\tString name;\n\tFile file;\n\tFile dir;\n\tURL source;\n\tbyte[] data;\n\tInputStream in;\n\tFileOutputStream out;\n\tint read;\n\tlink=(String)mImages.remove(0);\n\tif(getCaptureResources()){\n\t\traw=makeLocalLink(link,\"\");\n\t\tname=decode(raw);\n\t\tfile=new File(getTarget(),name);\n\t\tSystem.out.println(\"copying \" + link + \" to \"+ file.getAbsolutePath());\n\t\tdir=file.getParentFile();\n\t\tif(!dir.exists())\n\t\t\tdir.mkdirs();\n\t}\n}"}, "reduction": "r20", "time": 3, "answer": "adfas", "type": "T3", "method": 1}, "16": {"code": "protected void copy(){\n\tString link;\n\tString raw;\n\tString name;\n\tFile file;\n\tFile dir;\n\tURL source;\n\tbyte[] data;\n\tInputStream in;\n\tFileOutputStream out;\n\tint read;\n\tlink=(String)mImages.remove(0);\n\tmCopied.add(link);\n\tif(getCaptureResources()){\n\t\traw=makeLocalLink(link,\"\");\n\t\tname=decode(raw);\n\t\tfile=new File(getTarget(),name);\n\t\tSystem.out.println(\"copying \" + link + \" to \"+ file.getAbsolutePath());\n\t\tdir=file.getParentFile();\n\t\tif(!dir.exists())\n\t\t\tdir.mkdirs();\n\t\ttry {\n\t\t\tsource=new URL(link);\n\t\t\tdata=new byte[TRANSFER_SIZE];\n\t\t\ttry {\n\t\t\t\tin=source.openStream();\n\t\t\t\ttry {\n\t\t\t\t\tout=new FileOutputStream(file);\n\t\t\t\t\ttry {\n\t\t\t\t\t\twhile(-1 != (read=in.read(data,0,data.length)))\n\t\t\t\t\t\t\tout.write(data,0,read);\n\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tout.close();\n\t\t\t\t\t} \n\t\t\t\t} catch (FileNotFoundException fnfe){\n\t\t\t\t\tfnfe.printStackTrace();\n\t\t\t\t} finally {\n\t\t\t\t\tin.close();\n\t\t\t\t} \n\t\t\t} catch (FileNotFoundException fnfe){\n\t\t\t\tSystem.err.println(\"broken link \" + fnfe.getMessage() + \" ignored\");\n\t\t\t} \n\t\t} catch (MalformedURLException murle){\n\t\t\tmurle.printStackTrace();\n\t\t} catch (IOException ioe){\n\t\t\tioe.printStackTrace();\n\t\t} \n\t}\n}", "reduction": "r20", "time": 3, "answer": "ddd", "type": "T3", "method": 0}, "19": {"code": "protected void process(NodeFilter filter) throws ParserException {\n\tString url;\n\tint bookmark;\n\tNodeList list;\n\tNodeList robots;\n\tMetaTag robot;\n\tString content;\n\tFile file;\n\tFile dir;\n\tPrintWriter out;\n\turl=(String)mPages.remove(0);\n\tSystem.out.println(\"processing \" + url);\n\tmFinished.add(url);\n\ttry {\n\t\tbookmark=mPages.size();\n\t\tmParser.setURL(url);\n\t\ttry {\n\t\t\tlist=new NodeList();\n\t\t\tfor (NodeIterator e=mParser.elements(); e.hasMoreNodes(); )\n\t\t\t\tlist.add(e.nextNode());\n\t\t} catch (EncodingChangeException ece){\n\t\t\tmParser.reset();\n\t\t\tlist=new NodeList();\n\t\t\tfor (NodeIterator e=mParser.elements(); e.hasMoreNodes(); )\n\t\t\t\tlist.add(e.nextNode());\n\t\t} \n\t\trobots=list.extractAllNodesThatMatch(new AndFilter(new NodeClassFilter(MetaTag.class),new HasAttributeFilter(\"name\",\"robots\")),true);\n\t\tif(0 != robots.size()){\n\t\t\trobot=(MetaTag)robots.elementAt(0);\n\t\t\tcontent=robot.getAttribute(\"content\").toLowerCase();\n\t\t\tif((-1 != content.indexOf(\"none\")) || (-1 != content.indexOf(\"nofollow\")))\n\t\t\t\tfor (int i=bookmark; i < mPages.size(); i++)\n\t\t\t\t\tmPages.remove(i);\n\t\t\tif((-1 != content.indexOf(\"none\")) || (-1 != content.indexOf(\"noindex\")))\n\t\t\t\treturn;\n\t\t}\n\t\tif(null != filter)\n\t\t\tlist.keepAllNodesThatMatch(filter,true);\n\t\tfile=new File(getTarget(),makeLocalLink(url,\"\"));\n\t\tdir=file.getParentFile();\n\t\tif(!dir.exists())\n\t\t\tdir.mkdirs();\n\t\telse if(!dir.isDirectory()){\n\t\t\tdir=new File(dir.getParentFile(),dir.getName() + \".content\");\n\t\t\tif(!dir.exists())\n\t\t\t\tdir.mkdirs();\n\t\t\tfile=new File(dir,file.getName());\n\t\t}\n\t\ttry {\n\t\t\tout=new PrintWriter(new FileOutputStream(file));\n\t\t\tfor (int i=0; i < list.size(); i++)\n\t\t\t\tout.print(list.elementAt(i).toHtml());\n\t\t\tout.close();\n\t\t} catch (FileNotFoundException fnfe){\n\t\t\tfnfe.printStackTrace();\n\t\t} \n\t} catch (ParserException pe){\n\t\tString message;\n\t\tmessage=pe.getMessage();\n\t\tif((null != message) && (message.endsWith(\"does not contain text\"))){\n\t\t\tif(!mCopied.contains(url))\n\t\t\t\tif(!mImages.contains(url))\n\t\t\t\t\tmImages.add(url);\n\t\t\tmFinished.remove(url);\n\t\t} else \n\t\t\tthrow pe;\n\t} \n}", "reduction": "r20", "time": 11, "answer": "dadfas", "type": "T3", "method": 0}, "18": {"code": {"r50%": "protected void copy(){\n\tString link;\n\tString raw;\n\tFile file;\n\tFile dir;\n\tbyte[] data;\n\tInputStream in;\n\tint read;\n\tif(getCaptureResources()){\n\t\ttry {\n\t\t\tdata=new byte[TRANSFER_SIZE];\n\t\t\ttry {\n\t\t\t\tin=source.openStream();\n\t\t\t\ttry {\n\t\t\t\t\ttry {\n\t\t\t\t\t\twhile(-1 != (read=in.read(data,0,data.length)))\n\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tout.close();\n\t\t\t\t\t} \n\t\t\t\t} catch (FileNotFoundException fnfe){\n\t\t\t\t} finally {\n\t\t\t\t\tin.close();\n\t\t\t\t} \n\t\t\t} catch (FileNotFoundException fnfe){\n\t\t\t} \n\t\t} catch (MalformedURLException murle){\n\t\t} catch (IOException ioe){\n\t\t} \n\t}\n}", "r10": "protected void copy(){\n\tif(getCaptureResources()){\n\t\ttry {\n\t\t\ttry {\n\t\t\t\ttry {\n\t\t\t\t} catch (FileNotFoundException fnfe){\n\t\t\t\t} finally {\n\t\t\t\t} \n\t\t\t} catch (FileNotFoundException fnfe){\n\t\t\t} \n\t\t} catch (MalformedURLException murle){\n\t\t} catch (IOException ioe){\n\t\t} \n\t}\n}", "r20": "protected void copy(){\n\tString link;\n\tFile file;\n\tbyte[] data;\n\tif(getCaptureResources()){\n\t\ttry {\n\t\t\tdata=new byte[TRANSFER_SIZE];\n\t\t\ttry {\n\t\t\t\tin=source.openStream();\n\t\t\t\ttry {\n\t\t\t\t\ttry {\n\t\t\t\t\t\twhile(-1 != (read=in.read(data,0,data.length)))\n\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tout.close();\n\t\t\t\t\t} \n\t\t\t\t} catch (FileNotFoundException fnfe){\n\t\t\t\t} finally {\n\t\t\t\t\tin.close();\n\t\t\t\t} \n\t\t\t} catch (FileNotFoundException fnfe){\n\t\t\t} \n\t\t} catch (MalformedURLException murle){\n\t\t} catch (IOException ioe){\n\t\t} \n\t}\n}"}, "reduction": "r20", "time": 9, "answer": "fffdasdf", "type": "T3", "method": 2}, "20": {"code": {"r50%": "protected void process(NodeFilter filter) throws ParserException {\n\tString url;\n\tint bookmark;\n\tNodeList list;\n\tNodeList robots;\n\tMetaTag robot;\n\tString content;\n\tFile file;\n\tFile dir;\n\ttry {\n\t\tmParser.setURL(url);\n\t\ttry {\n\t\t\tlist=new NodeList();\n\t\t\tfor (NodeIterator e=mParser.elements(); e.hasMoreNodes(); )\n\t\t\t\tlist.add(e.nextNode());\n\t\t} catch (EncodingChangeException ece){\n\t\t\tmParser.reset();\n\t\t\tlist=new NodeList();\n\t\t\tfor (NodeIterator e=mParser.elements(); e.hasMoreNodes(); )\n\t\t\t\tlist.add(e.nextNode());\n\t\t} \n\t\trobots=list.extractAllNodesThatMatch(new AndFilter(new NodeClassFilter(MetaTag.class),new HasAttributeFilter(\"name\",\"robots\")),true);\n\t\tif(null != filter)\n\t\t\tlist.keepAllNodesThatMatch(filter,true);\n\t\tfile=new File(getTarget(),makeLocalLink(url,\"\"));\n\t\tdir=file.getParentFile();\n\t} catch (ParserException pe){\n\t\tString message;\n\t\tmessage=pe.getMessage();\n\t\tif((null != message) && (message.endsWith(\"does not contain text\"))){\n\t\t\tif(!mCopied.contains(url))\n\t\t\t\tif(!mImages.contains(url))\n\t\t\t\t\tmImages.add(url);\n\t\t\tmFinished.remove(url);\n\t\t} else \n\t\t\tthrow pe;\n\t} \n}", "r10": "protected void process(NodeFilter filter) throws ParserException {\n\tString url;\n\tint bookmark;\n\tNodeList list;\n\tNodeList robots;\n\tMetaTag robot;\n\tString content;\n\tFile file;\n\tFile dir;\n\tPrintWriter out;\n\turl=(String)mPages.remove(0);\n}", "r20": "protected void process(NodeFilter filter) throws ParserException {\n\tString url;\n\tint bookmark;\n\tNodeList list;\n\tNodeList robots;\n\tMetaTag robot;\n\tString content;\n\tFile file;\n\tFile dir;\n\tPrintWriter out;\n\turl=(String)mPages.remove(0);\n\tSystem.out.println(\"processing \" + url);\n\ttry {\n\t\tbookmark=mPages.size();\n\t\tmParser.setURL(url);\n\t\trobots=list.extractAllNodesThatMatch(new AndFilter(new NodeClassFilter(MetaTag.class),new HasAttributeFilter(\"name\",\"robots\")),true);\n\t\tif(null != filter)\n\t\t\tlist.keepAllNodesThatMatch(filter,true);\n\t\tfile=new File(getTarget(),makeLocalLink(url,\"\"));\n\t\tdir=file.getParentFile();\n\t} catch (ParserException pe){\n\t} \n}"}, "reduction": "r20", "time": 5, "answer": "dddfsfasdf", "type": "T3", "method": 1}, "1": {"codes": ["public void run(){\n\tURL link;\n\tint original;\n\tint index;\n\tString href;\n\tURL[][] urls;\n\twhile(true){\n\t\ttry {\n\t\t\tlink=null;\n\t\t\toriginal=-1;\n\t\t\tsynchronized (mUrls){\n\t\t\t\tif(0 != mUrls.size()){\n\t\t\t\t\toriginal=mUrls.size();\n\t\t\t\t\tindex=(int)(Math.random() * original);\n\t\t\t\t\tlink=mUrls.remove(index);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(null != link){\n\t\t\t\tupdateQueueSize(original,mUrls.size());\n\t\t\t\thref=link.toString();\n\t\t\t\tsetCurrentURL(href);\n\t\t\t\tmVisited.put(href,link);\n\t\t\t\tupdateVisitedSize(mVisited.size() - 1,mVisited.size());\n\t\t\t\turls=getImageLinks(link);\n\t\t\t\tfetch(urls[0]);\n\t\t\t\tappend(filter(urls[1]));\n\t\t\t} else \n\t\t\t\tThread.sleep(100);\n\t\t\tif(!mActive)\n\t\t\t\tsynchronized (mUrls){\n\t\t\t\t\tmUrls.wait();\n\t\t\t\t}\n\t\t} catch (Throwable t){\n\t\t\tt.printStackTrace();\n\t\t} \n\t}\n}", "public static void main(String[] argv) throws IOException, SAXException {\n\tint optind=getopts(options,argv);\n\tif(hasOption(options,\"--help\")){\n\t\tdoHelp();\n\t\treturn;\n\t}\n\tif(hasOption(options,\"--version\")){\n\t\tSystem.err.println(\"TagSoup version 1.2.1\");\n\t\treturn;\n\t}\n\tif(argv.length == optind){\n\t\tprocess(\"\",System.out);\n\t} else if(hasOption(options,\"--files\")){\n\t\tfor (int i=optind; i < argv.length; i++){\n\t\t\tString src=argv[i];\n\t\t\tString dst;\n\t\t\tint j=src.lastIndexOf('.');\n\t\t\tif(j == -1)\n\t\t\t\tdst=src + \".xhtml\";\n\t\t\telse if(src.endsWith(\".xhtml\"))\n\t\t\t\tdst=src + \"_\";\n\t\t\telse \n\t\t\t\tdst=src.substring(0,j) + \".xhtml\";\n\t\t\tSystem.err.println(\"src: \" + src + \" dst: \"+ dst);\n\t\t\tOutputStream os=new FileOutputStream(dst);\n\t\t\tprocess(src,os);\n\t\t}\n\t} else {\n\t\tfor (int i=optind; i < argv.length; i++){\n\t\t\tSystem.err.println(\"src: \" + argv[i]);\n\t\t\tprocess(argv[i],System.out);\n\t\t}\n\t}\n}", "protected void process(NodeFilter filter) throws ParserException {\n\tString url;\n\tint bookmark;\n\tNodeList list;\n\tNodeList robots;\n\tMetaTag robot;\n\tString content;\n\tFile file;\n\tFile dir;\n\tPrintWriter out;\n\turl=(String)mPages.remove(0);\n\tSystem.out.println(\"processing \" + url);\n\tmFinished.add(url);\n\ttry {\n\t\tbookmark=mPages.size();\n\t\tmParser.setURL(url);\n\t\ttry {\n\t\t\tlist=new NodeList();\n\t\t\tfor (NodeIterator e=mParser.elements(); e.hasMoreNodes(); )\n\t\t\t\tlist.add(e.nextNode());\n\t\t} catch (EncodingChangeException ece){\n\t\t\tmParser.reset();\n\t\t\tlist=new NodeList();\n\t\t\tfor (NodeIterator e=mParser.elements(); e.hasMoreNodes(); )\n\t\t\t\tlist.add(e.nextNode());\n\t\t} \n\t\trobots=list.extractAllNodesThatMatch(new AndFilter(new NodeClassFilter(MetaTag.class),new HasAttributeFilter(\"name\",\"robots\")),true);\n\t\tif(0 != robots.size()){\n\t\t\trobot=(MetaTag)robots.elementAt(0);\n\t\t\tcontent=robot.getAttribute(\"content\").toLowerCase();\n\t\t\tif((-1 != content.indexOf(\"none\")) || (-1 != content.indexOf(\"nofollow\")))\n\t\t\t\tfor (int i=bookmark; i < mPages.size(); i++)\n\t\t\t\t\tmPages.remove(i);\n\t\t\tif((-1 != content.indexOf(\"none\")) || (-1 != content.indexOf(\"noindex\")))\n\t\t\t\treturn;\n\t\t}\n\t\tif(null != filter)\n\t\t\tlist.keepAllNodesThatMatch(filter,true);\n\t\tfile=new File(getTarget(),makeLocalLink(url,\"\"));\n\t\tdir=file.getParentFile();\n\t\tif(!dir.exists())\n\t\t\tdir.mkdirs();\n\t\telse if(!dir.isDirectory()){\n\t\t\tdir=new File(dir.getParentFile(),dir.getName() + \".content\");\n\t\t\tif(!dir.exists())\n\t\t\t\tdir.mkdirs();\n\t\t\tfile=new File(dir,file.getName());\n\t\t}\n\t\ttry {\n\t\t\tout=new PrintWriter(new FileOutputStream(file));\n\t\t\tfor (int i=0; i < list.size(); i++)\n\t\t\t\tout.print(list.elementAt(i).toHtml());\n\t\t\tout.close();\n\t\t} catch (FileNotFoundException fnfe){\n\t\t\tfnfe.printStackTrace();\n\t\t} \n\t} catch (ParserException pe){\n\t\tString message;\n\t\tmessage=pe.getMessage();\n\t\tif((null != message) && (message.endsWith(\"does not contain text\"))){\n\t\t\tif(!mCopied.contains(url))\n\t\t\t\tif(!mImages.contains(url))\n\t\t\t\t\tmImages.add(url);\n\t\t\tmFinished.remove(url);\n\t\t} else \n\t\t\tthrow pe;\n\t} \n}", "protected Node parsePI(int start) throws ParserException {\n\tboolean done;\n\tchar ch;\n\tint state;\n\tVector attributes;\n\tint code;\n\tdone=false;\n\tstate=0;\n\tcode=0;\n\tattributes=new Vector();\n\twhile(!done){\n\t\tch=mPage.getCharacter(mCursor);\n\t\tswitch (state){\n\t\tcase 0: \n\t\t\tswitch (ch){\n\t\t\tcase '?': \n\t\t\t\tcode=mCursor.getPosition();\n\t\t\t\tattributes.addElement(new PageAttribute(mPage,start + 1,code,-1,-1,(char)0));\n\t\t\t\tstate=1;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tdone=true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 1: \n\t\t\tswitch (ch){\n\t\t\tcase Page.EOF: \n\t\t\tcase '>': \n\t\t\t\tdone=true;\n\t\t\t\tbreak;\n\t\t\tcase '\\'': \n\t\t\tcase '\"': \n\t\t\t\tstate=ch;\n\t\t\t\tbreak;\n\t\t\tcase '?': \n\t\t\t\tstate=2;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 2: \n\t\t\tswitch (ch){\n\t\t\tcase Page.EOF: \n\t\t\t\tdone=true;\n\t\t\t\tbreak;\n\t\t\tcase '>': \n\t\t\t\tstate=3;\n\t\t\t\tdone=true;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tstate=1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase '\"': \n\t\t\tswitch (ch){\n\t\t\tcase Page.EOF: \n\t\t\t\tdone=true;\n\t\t\t\tbreak;\n\t\t\tcase '\"': \n\t\t\t\tstate=1;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase '\\'': \n\t\t\tswitch (ch){\n\t\t\tcase Page.EOF: \n\t\t\t\tdone=true;\n\t\t\t\tbreak;\n\t\t\tcase '\\'': \n\t\t\t\tstate=1;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new IllegalStateException(\"Somehow managed to get into invalid state  \" + state);\n\t\t}\n\t}\n\tif(3 == state){\n\t\tif(0 != code){\n\t\t\tstate=mCursor.getPosition() - 2;\n\t\t\tattributes.addElement(new PageAttribute(mPage,code,state,-1,-1,(char)0));\n\t\t\tattributes.addElement(new PageAttribute(mPage,state,state + 1,-1,-1,(char)0));\n\t\t} else \n\t\t\tthrow new IllegalStateException(\"processing instruction with no content\");\n\t} else \n\t\treturn (parseString(start,true));\n\treturn (makeTag(start,mCursor.getPosition(),attributes));\n}", "protected void doSAX(Node node) throws ParserException, SAXException {\n\tTag tag;\n\tTag end;\n\tif(node instanceof Remark){\n\t\tString text=mParser.getLexer().getPage().getText(node.getStartPosition(),node.getEndPosition());\n\t\tmContentHandler.ignorableWhitespace(text.toCharArray(),0,text.length());\n\t} else if(node instanceof Text){\n\t\tString text=mParser.getLexer().getPage().getText(node.getStartPosition(),node.getEndPosition());\n\t\ttext=Translate.decode(text);\n\t\tmContentHandler.characters(text.toCharArray(),0,text.length());\n\t} else if(node instanceof Tag){\n\t\ttag=(Tag)node;\n\t\tif(mNameSpaces)\n\t\t\tmSupport.processName(tag.getTagName(),mParts,false);\n\t\telse {\n\t\t\tmParts[0]=\"\";\n\t\t\tmParts[1]=\"\";\n\t\t}\n\t\tif(mNameSpacePrefixes)\n\t\t\tmParts[2]=tag.getTagName();\n\t\telse if(mNameSpaces)\n\t\t\tmParts[2]=\"\";\n\t\telse \n\t\t\tmParts[2]=tag.getTagName();\n\t\tmContentHandler.startElement(mParts[0],mParts[1],mParts[2],new Attributes(tag,mSupport,mParts));\n\t\tNodeList children=tag.getChildren();\n\t\tif(null != children)\n\t\t\tfor (int i=0; i < children.size(); i++)\n\t\t\t\tdoSAX(children.elementAt(i));\n\t\tend=tag.getEndTag();\n\t\tif(null != end){\n\t\t\tif(mNameSpaces)\n\t\t\t\tmSupport.processName(end.getTagName(),mParts,false);\n\t\t\telse {\n\t\t\t\tmParts[0]=\"\";\n\t\t\t\tmParts[1]=\"\";\n\t\t\t}\n\t\t\tif(mNameSpacePrefixes)\n\t\t\t\tmParts[2]=end.getTagName();\n\t\t\telse if(mNameSpaces)\n\t\t\t\tmParts[2]=\"\";\n\t\t\telse \n\t\t\t\tmParts[2]=end.getTagName();\n\t\t\tmContentHandler.endElement(mParts[0],mParts[1],mParts[2]);\n\t\t}\n\t}\n}"], "doc": "The main processing loop. Pull suspect URLs off the queue one at a time, fetch and parse it, request images and enqueue further links.", "reduction": "r10", "time": 4, "answer": "0", "type": "T1", "method": 0}, "3": {"codes": ["public void run(){\n\tint original;\n\tString href;\n\tURL[][] urls;\n\twhile(true){\n\t\ttry {\n\t\t\tsynchronized (mUrls){\n\t\t\t}\n\t\t\tif(null != link){\n\t\t\t\tupdateQueueSize(original,mUrls.size());\n\t\t\t\tmVisited.put(href,link);\n\t\t\t\tupdateVisitedSize(mVisited.size() - 1,mVisited.size());\n\t\t\t\turls=getImageLinks(link);\n\t\t\t\tfetch(urls[0]);\n\t\t\t} else \n\t\t\tif(!mActive)\n\t\t} catch (Throwable t){\n\t\t} \n\t}\n}", "public static void main(String[] argv) throws IOException, SAXException {\n\tint optind=getopts(options,argv);\n\tif(argv.length == optind){\n\t} else if(hasOption(options,\"--files\")){\n\t\tfor (int i=optind; i < argv.length; i++){\n\t\t\tString src=argv[i];\n\t\t\tString dst;\n\t\t\tint j=src.lastIndexOf('.');\n\t\t\tif(j == -1)\n\t\t\t\tdst=src + \".xhtml\";\n\t\t\telse if(src.endsWith(\".xhtml\"))\n\t\t\telse \n\t\t\t\tdst=src.substring(0,j) + \".xhtml\";\n\t\t\tOutputStream os=new FileOutputStream(dst);\n\t\t}\n\t} else {\n\t}\n}", "protected void process(NodeFilter filter) throws ParserException {\n\tString url;\n\tFile file;\n\tFile dir;\n\ttry {\n\t\tbookmark=mPages.size();\n\t\ttry {\n\t\t\tfor (NodeIterator e=mParser.elements(); e.hasMoreNodes(); )\n\t\t} catch (EncodingChangeException ece){\n\t\t\tfor (NodeIterator e=mParser.elements(); e.hasMoreNodes(); )\n\t\t} \n\t\trobots=list.extractAllNodesThatMatch(new AndFilter(new NodeClassFilter(MetaTag.class),new HasAttributeFilter(\"name\",\"robots\")),true);\n\t\tif(0 != robots.size()){\n\t\t\tif((-1 != content.indexOf(\"none\")) || (-1 != content.indexOf(\"nofollow\")))\n\t\t\t\tfor (int i=bookmark; i < mPages.size(); i++)\n\t\t\tif((-1 != content.indexOf(\"none\")) || (-1 != content.indexOf(\"noindex\")))\n\t\t\t\treturn;\n\t\t}\n\t\tif(null != filter)\n\t\t\tlist.keepAllNodesThatMatch(filter,true);\n\t\tfile=new File(getTarget(),makeLocalLink(url,\"\"));\n\t\tdir=file.getParentFile();\n\t\tif(!dir.exists())\n\t\telse if(!dir.isDirectory()){\n\t\t\tdir=new File(dir.getParentFile(),dir.getName() + \".content\");\n\t\t\tfile=new File(dir,file.getName());\n\t\t}\n\t\ttry {\n\t\t\tfor (int i=0; i < list.size(); i++)\n\t\t} catch (FileNotFoundException fnfe){\n\t\t} \n\t} catch (ParserException pe){\n\t\tif((null != message) && (message.endsWith(\"does not contain text\"))){\n\t\t\tif(!mCopied.contains(url))\n\t\t\t\tif(!mImages.contains(url))\n\t\t\t\t\tmImages.add(url);\n\t\t} else \n\t} \n}", "protected Node parsePI(int start) throws ParserException {\n\tboolean done;\n\tchar ch;\n\tint state;\n\tVector attributes;\n\tint code;\n\twhile(!done){\n\t\tch=mPage.getCharacter(mCursor);\n\t\tswitch (state){\n\t\tcase 0: \n\t\t\tswitch (ch){\n\t\t\tcase '?': \n\t\t\t\tcode=mCursor.getPosition();\n\t\t\t\tattributes.addElement(new PageAttribute(mPage,start + 1,code,-1,-1,(char)0));\n\t\t\t\tstate=1;\n\t\t\t}\n\t\tcase 1: \n\t\t\tswitch (ch){\n\t\t\tcase Page.EOF: \n\t\t\tcase '>': \n\t\t\tcase '\\'': \n\t\t\tcase '\"': \n\t\t\tcase '?': \n\t\t\t}\n\t\tcase '\"': \n\t\t\tswitch (ch){\n\t\t\tcase Page.EOF: \n\t\t\t\tbreak;\n\t\t\tcase '\"': \n\t\t\t}\n\t\tcase '\\'': \n\t\t\tswitch (ch){\n\t\t\tcase Page.EOF: \n\t\t\t\tbreak;\n\t\t\tcase '\\'': \n\t\t\t}\n\t\t}\n\t}\n\tif(3 == state){\n\t\tif(0 != code){\n\t\t\tstate=mCursor.getPosition() - 2;\n\t\t\tattributes.addElement(new PageAttribute(mPage,code,state,-1,-1,(char)0));\n\t\t\tattributes.addElement(new PageAttribute(mPage,state,state + 1,-1,-1,(char)0));\n\t\t} else \n\t} else \n\t\treturn (parseString(start,true));\n\treturn (makeTag(start,mCursor.getPosition(),attributes));\n}", "protected void doSAX(Node node) throws ParserException, SAXException {\n\tif(node instanceof Remark){\n\t\tString text=mParser.getLexer().getPage().getText(node.getStartPosition(),node.getEndPosition());\n\t\tmContentHandler.ignorableWhitespace(text.toCharArray(),0,text.length());\n\t} else if(node instanceof Text){\n\t\tString text=mParser.getLexer().getPage().getText(node.getStartPosition(),node.getEndPosition());\n\t\ttext=Translate.decode(text);\n\t\tmContentHandler.characters(text.toCharArray(),0,text.length());\n\t} else if(node instanceof Tag){\n\t\tmContentHandler.startElement(mParts[0],mParts[1],mParts[2],new Attributes(tag,mSupport,mParts));\n\t\tNodeList children=tag.getChildren();\n\t\tif(null != children)\n\t\t\tfor (int i=0; i < children.size(); i++)\n\t\t\t\tdoSAX(children.elementAt(i));\n\t\tif(null != end){\n\t\t\tif(mNameSpacePrefixes)\n\t\t\t\tmParts[2]=end.getTagName();\n\t\t\telse if(mNameSpaces)\n\t\t\telse \n\t\t\t\tmParts[2]=end.getTagName();\n\t\t\tmContentHandler.endElement(mParts[0],mParts[1],mParts[2]);\n\t\t}\n\t}\n}"], "doc": "The main processing loop. Pull suspect URLs off the queue one at a time, fetch and parse it, request images and enqueue further links.", "reduction": "r10", "time": 4, "answer": "1", "type": "T1", "method": 2}, "2": {"codes": ["public void run(){\n\tURL link;\n\tint original;\n\tint index;\n\tString href;\n\tURL[][] urls;\n\twhile(true){\n\t\ttry {\n\t\t\tif(null != link){\n\t\t\t\turls=getImageLinks(link);\n\t\t\t\tfetch(urls[0]);\n\t\t\t\tappend(filter(urls[1]));\n\t\t\t} else \n\t\t\t\tThread.sleep(100);\n\t\t\tif(!mActive)\n\t\t} catch (Throwable t){\n\t\t\tt.printStackTrace();\n\t\t} \n\t}\n}", "public static void main(String[] argv) throws IOException, SAXException {\n\tint optind=getopts(options,argv);\n\tif(hasOption(options,\"--version\")){\n\t\tSystem.err.println(\"TagSoup version 1.2.1\");\n\t\treturn;\n\t}\n\tif(argv.length == optind){\n\t\tprocess(\"\",System.out);\n\t} else if(hasOption(options,\"--files\")){\n\t\tfor (int i=optind; i < argv.length; i++){\n\t\t\tString src=argv[i];\n\t\t\tString dst;\n\t\t\tint j=src.lastIndexOf('.');\n\t\t\tSystem.err.println(\"src: \" + src + \" dst: \"+ dst);\n\t\t}\n\t} else {\n\t}\n}", "protected void process(NodeFilter filter) throws ParserException {\n\tString url;\n\tint bookmark;\n\tNodeList list;\n\tNodeList robots;\n\tMetaTag robot;\n\tString content;\n\tFile file;\n\tFile dir;\n\ttry {\n\t\tmParser.setURL(url);\n\t\ttry {\n\t\t\tlist=new NodeList();\n\t\t\tfor (NodeIterator e=mParser.elements(); e.hasMoreNodes(); )\n\t\t\t\tlist.add(e.nextNode());\n\t\t} catch (EncodingChangeException ece){\n\t\t\tmParser.reset();\n\t\t\tlist=new NodeList();\n\t\t\tfor (NodeIterator e=mParser.elements(); e.hasMoreNodes(); )\n\t\t\t\tlist.add(e.nextNode());\n\t\t} \n\t\trobots=list.extractAllNodesThatMatch(new AndFilter(new NodeClassFilter(MetaTag.class),new HasAttributeFilter(\"name\",\"robots\")),true);\n\t\tif(null != filter)\n\t\t\tlist.keepAllNodesThatMatch(filter,true);\n\t\tfile=new File(getTarget(),makeLocalLink(url,\"\"));\n\t\tdir=file.getParentFile();\n\t} catch (ParserException pe){\n\t\tString message;\n\t\tmessage=pe.getMessage();\n\t\tif((null != message) && (message.endsWith(\"does not contain text\"))){\n\t\t\tif(!mCopied.contains(url))\n\t\t\t\tif(!mImages.contains(url))\n\t\t\t\t\tmImages.add(url);\n\t\t\tmFinished.remove(url);\n\t\t} else \n\t\t\tthrow pe;\n\t} \n}", "protected Node parsePI(int start) throws ParserException {\n\tboolean done;\n\tchar ch;\n\tint state;\n\tVector attributes;\n\tint code;\n\tdone=false;\n\tstate=0;\n\tcode=0;\n\tattributes=new Vector();\n\twhile(!done){\n\t\tch=mPage.getCharacter(mCursor);\n\t\tswitch (state){\n\t\tcase 0: \n\t\t\tbreak;\n\t\tcase 1: \n\t\t\tbreak;\n\t\tcase 2: \n\t\t\tswitch (ch){\n\t\t\tcase '>': \n\t\t\t\tstate=3;\n\t\t\t\tdone=true;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tstate=1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase '\"': \n\t\t\tswitch (ch){\n\t\t\tcase Page.EOF: \n\t\t\t\tdone=true;\n\t\t\t\tbreak;\n\t\t\tcase '\"': \n\t\t\t\tstate=1;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase '\\'': \n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new IllegalStateException(\"Somehow managed to get into invalid state  \" + state);\n\t\t}\n\t}\n\treturn (makeTag(start,mCursor.getPosition(),attributes));\n}", "protected void doSAX(Node node) throws ParserException, SAXException {\n\tTag tag;\n\tTag end;\n\tif(node instanceof Remark){\n\t\tString text=mParser.getLexer().getPage().getText(node.getStartPosition(),node.getEndPosition());\n\t\tmContentHandler.ignorableWhitespace(text.toCharArray(),0,text.length());\n\t} else if(node instanceof Text){\n\t\tString text=mParser.getLexer().getPage().getText(node.getStartPosition(),node.getEndPosition());\n\t\ttext=Translate.decode(text);\n\t\tmContentHandler.characters(text.toCharArray(),0,text.length());\n\t} else if(node instanceof Tag){\n\t\ttag=(Tag)node;\n\t\tif(mNameSpacePrefixes)\n\t\t\tmParts[2]=tag.getTagName();\n\t\telse if(mNameSpaces)\n\t\t\tmParts[2]=\"\";\n\t\telse \n\t\t\tmParts[2]=tag.getTagName();\n\t\tNodeList children=tag.getChildren();\n\t\tif(null != children)\n\t\t\tfor (int i=0; i < children.size(); i++)\n\t\t\t\tdoSAX(children.elementAt(i));\n\t}\n}"], "doc": "The main processing loop. Pull suspect URLs off the queue one at a time, fetch and parse it, request images and enqueue further links.", "reduction": "r10", "time": 19, "answer": "0", "type": "T1", "method": 1}, "5": {"answer": "option 0", "Alternatives": ["Method A mactches Description A, Mehtod B mactches Description B.", "Method A mactches Description B, Mehtod A mactches Description B.", "Impossible to decide."], "reduction": "r10", "codeA": "public Tag scan(Tag tag,Lexer lexer,NodeList stack) throws ParserException {\n\tNode content;\n\tint position;\n\tNode node;\n\tAttribute attribute;\n\tVector vector;\n\tcontent=lexer.parseCDATA();\n\tposition=lexer.getPosition();\n\tnode=lexer.nextNode(false);\n\tif(null != node)\n\t\tif(!(node instanceof Tag) || !(((Tag)node).isEndTag() && ((Tag)node).getTagName().equals(tag.getIds()[0]))){\n\t\t\tlexer.setPosition(position);\n\t\t}\n\tnode.setParent(tag);\n\treturn (tag);\n}", "codeB": "public Tag scan(Tag tag,Lexer lexer,NodeList stack) throws ParserException {\n\tString language;\n\tString code;\n\tNode content;\n\tint position;\n\tNode node;\n\tAttribute attribute;\n\tVector vector;\n\tcontent=lexer.parseCDATA(!STRICT);\n\tposition=lexer.getPosition();\n\tnode=lexer.nextNode(false);\n\tif(null != node)\n\t\tif(!(node instanceof Tag) || !(((Tag)node).isEndTag() && ((Tag)node).getTagName().equals(tag.getIds()[0]))){\n\t\t\tlexer.setPosition(position);\n\t\t\tnode=null;\n\t\t}\n\ttag.setEndTag((Tag)node);\n\tnode.setParent(tag);\n\ttag.doSemanticAction();\n\treturn (tag);\n}", "time": 3, "docB": "Scan for script. Accumulates text from the page, until &lt;/[a-zA-Z] is encountered.", "docA": "Scan for style definitions. Accumulates text from the page, until &lt;/[a-zA-Z] is encountered.", "type": "T2", "method": 1}, "4": {"answer": "option 0", "Alternatives": ["Method A mactches Description A, Mehtod B mactches Description B.", "Method A mactches Description B, Mehtod A mactches Description B.", "Impossible to decide."], "reduction": "r10", "codeA": "public Tag scan(Tag tag,Lexer lexer,NodeList stack) throws ParserException {\n\tNode content;\n\tint position;\n\tNode node;\n\tAttribute attribute;\n\tVector vector;\n\tcontent=lexer.parseCDATA();\n\tposition=lexer.getPosition();\n\tnode=lexer.nextNode(false);\n\tif(null != node)\n\t\tif(!(node instanceof Tag) || !(((Tag)node).isEndTag() && ((Tag)node).getTagName().equals(tag.getIds()[0]))){\n\t\t\tlexer.setPosition(position);\n\t\t\tnode=null;\n\t\t}\n\tif(null == node){\n\t\tattribute=new Attribute(\"/style\",null);\n\t\tvector=new Vector();\n\t\tvector.addElement(attribute);\n\t\tnode=lexer.getNodeFactory().createTagNode(lexer.getPage(),position,position,vector);\n\t}\n\ttag.setEndTag((Tag)node);\n\tif(null != content){\n\t\ttag.setChildren(new NodeList(content));\n\t\tcontent.setParent(tag);\n\t}\n\tnode.setParent(tag);\n\ttag.doSemanticAction();\n\treturn (tag);\n}", "codeB": "public Tag scan(Tag tag,Lexer lexer,NodeList stack) throws ParserException {\n\tString language;\n\tString code;\n\tNode content;\n\tint position;\n\tNode node;\n\tAttribute attribute;\n\tVector vector;\n\tif(tag instanceof ScriptTag){\n\t\tlanguage=((ScriptTag)tag).getLanguage();\n\t\tif((null != language) && (language.equalsIgnoreCase(\"JScript.Encode\") || language.equalsIgnoreCase(\"VBScript.Encode\"))){\n\t\t\tcode=ScriptDecoder.Decode(lexer.getPage(),lexer.getCursor());\n\t\t\t((ScriptTag)tag).setScriptCode(code);\n\t\t}\n\t}\n\tcontent=lexer.parseCDATA(!STRICT);\n\tposition=lexer.getPosition();\n\tnode=lexer.nextNode(false);\n\tif(null != node)\n\t\tif(!(node instanceof Tag) || !(((Tag)node).isEndTag() && ((Tag)node).getTagName().equals(tag.getIds()[0]))){\n\t\t\tlexer.setPosition(position);\n\t\t\tnode=null;\n\t\t}\n\tif(null == node){\n\t\tattribute=new Attribute(\"/script\",null);\n\t\tvector=new Vector();\n\t\tvector.addElement(attribute);\n\t\tnode=lexer.getNodeFactory().createTagNode(lexer.getPage(),position,position,vector);\n\t}\n\ttag.setEndTag((Tag)node);\n\tif(null != content){\n\t\ttag.setChildren(new NodeList(content));\n\t\tcontent.setParent(tag);\n\t}\n\tnode.setParent(tag);\n\ttag.doSemanticAction();\n\treturn (tag);\n}", "time": 9, "docB": "Scan for script. Accumulates text from the page, until &lt;/[a-zA-Z] is encountered.", "docA": "Scan for style definitions. Accumulates text from the page, until &lt;/[a-zA-Z] is encountered.", "type": "T2", "method": 0}, "7": {"answer": "option 0", "Alternatives": ["Method A mactches Description A, Mehtod B mactches Description B.", "Method A mactches Description B, Mehtod A mactches Description B.", "Impossible to decide."], "reduction": "r10", "codeA": "public String extractImageLocn(){\n\tVector attributes;\n\tint size;\n\tAttribute attribute;\n\tString string;\n\tString data;\n\tint state;\n\tString name;\n\tString ret;\n\tret=\"\";\n\tstate=0;\n\tattributes=getAttributesEx();\n\tsize=attributes.size();\n\tfor (int i=0; (i < size) && (state < 3); i++){\n\t\tattribute=(Attribute)attributes.elementAt(i);\n\t\tstring=attribute.getName();\n\t\tdata=attribute.getValue();\n\t\tswitch (state){\n\t\tcase 0: \n\t\t\tif(null != string){\n\t\t\t\tname=string.toUpperCase(Locale.ENGLISH);\n\t\t\t\tif(name.equals(\"SRC\")){\n\t\t\t\t\tstate=1;\n\t\t\t\t\tif(null != data){\n\t\t\t\t\t\tif(\"\".equals(data))\n\t\t\t\t\t\t\tstate=2;\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tret=data;\n\t\t\t\t\t\t\ti=size;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if(name.startsWith(\"SRC\")){\n\t\t\t\t\tstring=string.substring(3);\n\t\t\t\t\tif(string.startsWith(\"\\\"\") && string.endsWith(\"\\\"\") && (1 < string.length()))\n\t\t\t\t\t\tstring=string.substring(1,string.length() - 1);\n\t\t\t\t\tif(string.startsWith(\"'\") && string.endsWith(\"'\") && (1 < string.length()))\n\t\t\t\t\t\tstring=string.substring(1,string.length() - 1);\n\t\t\t\t\tret=string;\n\t\t\t\t\tstate=0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 1: \n\t\t\tif(null != string){\n\t\t\t\tif(string.startsWith(\"=\")){\n\t\t\t\t\tstate=2;\n\t\t\t\t\tif(1 < string.length()){\n\t\t\t\t\t\tret=string.substring(1);\n\t\t\t\t\t\tstate=0;\n\t\t\t\t\t} else if(null != data){\n\t\t\t\t\t\tret=string.substring(1);\n\t\t\t\t\t\tstate=0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 2: \n\t\t\tif(null != string){\n\t\t\t\tif(null == data)\n\t\t\t\t\tret=string;\n\t\t\t\tstate=0;\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new IllegalStateException(\"we're not supposed to in state \" + state);\n\t\t}\n\t}\n\tret=ParserUtils.removeChars(ret,'\\n');\n\tret=ParserUtils.removeChars(ret,'\\r');\n\treturn (ret);\n}", "codeB": "protected URL[][] extractImageLinks(final Lexer lexer,final URL docbase) throws IOException, ParserException {\n\tHashMap<String,URL> images;\n\tHashMap<String,URL> links;\n\tboolean ina;\n\tNode node;\n\tTag tag;\n\tString name;\n\tTag startatag;\n\tTag imgtag;\n\tString href;\n\tString src;\n\tURL url;\n\tURL[][] ret;\n\timages=new HashMap<String,URL>();\n\tlinks=new HashMap<String,URL>();\n\tina=false;\n\tstartatag=null;\n\timgtag=null;\n\twhile(null != (node=lexer.nextNode())){\n\t\tif(node instanceof Tag){\n\t\t\ttag=(Tag)node;\n\t\t\tname=tag.getTagName();\n\t\t\tif(\"A\".equals(name)){\n\t\t\t\tif(tag.isEndTag()){\n\t\t\t\t\tina=false;\n\t\t\t\t\tif(null != imgtag){\n\t\t\t\t\t\thref=startatag.getAttribute(\"HREF\");\n\t\t\t\t\t\tif(null != href){\n\t\t\t\t\t\t\tif(isImage(href)){\n\t\t\t\t\t\t\t\tsrc=imgtag.getAttribute(\"SRC\");\n\t\t\t\t\t\t\t\tif(null != src)\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\turl=new URL(docbase,href);\n\t\t\t\t\t\t\t\t\t\thref=url.toString();\n\t\t\t\t\t\t\t\t\t\tif(!images.containsKey(href))\n\t\t\t\t\t\t\t\t\t\t\timages.put(href,url);\n\t\t\t\t\t\t\t\t\t} catch (MalformedURLException murle){\n\t\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tstartatag=tag;\n\t\t\t\t\timgtag=null;\n\t\t\t\t\tina=true;\n\t\t\t\t\thref=startatag.getAttribute(\"HREF\");\n\t\t\t\t\tif(null != href){\n\t\t\t\t\t\tif(!isImage(href))\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\turl=new URL(docbase,href);\n\t\t\t\t\t\t\t\thref=url.toString();\n\t\t\t\t\t\t\t\tif(!links.containsKey(href))\n\t\t\t\t\t\t\t\t\tlinks.put(href,url);\n\t\t\t\t\t\t\t} catch (MalformedURLException murle){\n\t\t\t\t\t\t\t} \n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if(ina && \"IMG\".equals(name))\n\t\t\t\timgtag=tag;\n\t\t}\n\t}\n\tret=new URL[2][];\n\tret[0]=new URL[images.size()];\n\timages.values().toArray(ret[0]);\n\tret[1]=new URL[links.size()];\n\tlinks.values().toArray(ret[1]);\n\treturn (ret);\n}", "time": 3, "docB": "Get the links of an element of a document. Only gets the links on IMG elements that reference another image. The latter is based on suffix (.jpg, .gif and .png).", "docA": "Extract the location of the image Given the tag (with attributes), and the url of the html page in which this tag exists, perform best effort to extract the 'intended' URL. Attempts to handle such attributes as: <pre> &lt;IMG SRC=http://www.redgreen.com&gt; - normal &lt;IMG SRC =http://www.redgreen.com&gt; - space between attribute name and equals sign &lt;IMG SRC= http://www.redgreen.com&gt; - space between equals sign and attribute value &lt;IMG SRC = http://www.redgreen.com&gt; - space both sides of equals sign </pre>\n", "type": "T2", "method": 0}, "6": {"answer": "option 0", "Alternatives": ["Method A mactches Description A, Mehtod B mactches Description B.", "Method A mactches Description B, Mehtod A mactches Description B.", "Impossible to decide."], "reduction": "r10", "codeA": "public Tag scan(Tag tag,Lexer lexer,NodeList stack) throws ParserException {\n\tNode content;\n\tint position;\n\tAttribute attribute;\n\tVector vector;\n\tif(null != node)\n\t\tif(!(node instanceof Tag) || !(((Tag)node).isEndTag() && ((Tag)node).getTagName().equals(tag.getIds()[0]))){\n\t\t\tlexer.setPosition(position);\n\t\t\tnode=null;\n\t\t}\n\tif(null == node){\n\t\tattribute=new Attribute(\"/style\",null);\n\t\tvector.addElement(attribute);\n\t\tnode=lexer.getNodeFactory().createTagNode(lexer.getPage(),position,position,vector);\n\t}\n}", "codeB": "public Tag scan(Tag tag,Lexer lexer,NodeList stack) throws ParserException {\n\tString language;\n\tString code;\n\tNode content;\n\tint position;\n\tAttribute attribute;\n\tVector vector;\n\tcontent=lexer.parseCDATA(!STRICT);\n\tif(null != node)\n\t\tif(!(node instanceof Tag) || !(((Tag)node).isEndTag() && ((Tag)node).getTagName().equals(tag.getIds()[0]))){\n\t\t\tlexer.setPosition(position);\n\t\t\tnode=null;\n\t\t}\n\tif(null == node){\n\t\tattribute=new Attribute(\"/script\",null);\n\t\tvector=new Vector();\n\t\tvector.addElement(attribute);\n\t\tnode=lexer.getNodeFactory().createTagNode(lexer.getPage(),position,position,vector);\n\t}\n\ttag.doSemanticAction();\n}", "time": 5, "docB": "Scan for script. Accumulates text from the page, until &lt;/[a-zA-Z] is encountered.", "docA": "Scan for style definitions. Accumulates text from the page, until &lt;/[a-zA-Z] is encountered.", "type": "T2", "method": 2}, "9": {"answer": "option 1", "Alternatives": ["Method A mactches Description A, Mehtod B mactches Description B.", "Method A mactches Description B, Mehtod A mactches Description B.", "Impossible to decide."], "reduction": "r10", "codeA": "public String extractImageLocn(){\n\tVector attributes;\n\tint size;\n\tAttribute attribute;\n\tString string;\n\tString data;\n\tint state;\n\tString name;\n\tString ret;\n\tret=\"\";\n\tstate=0;\n\tsize=attributes.size();\n\tfor (int i=0; (i < size) && (state < 3); i++){\n\t\tswitch (state){\n\t\tcase 0: \n\t\t\tif(null != string){\n\t\t\t\tname=string.toUpperCase(Locale.ENGLISH);\n\t\t\t\tif(name.equals(\"SRC\")){\n\t\t\t\t\tstate=1;\n\t\t\t\t} else if(name.startsWith(\"SRC\")){\n\t\t\t\t\tstring=string.substring(3);\n\t\t\t\t\tif(string.startsWith(\"\\\"\") && string.endsWith(\"\\\"\") && (1 < string.length()))\n\t\t\t\t\t\tstring=string.substring(1,string.length() - 1);\n\t\t\t\t\tif(string.startsWith(\"'\") && string.endsWith(\"'\") && (1 < string.length()))\n\t\t\t\t\t\tstring=string.substring(1,string.length() - 1);\n\t\t\t\t\tret=string;\n\t\t\t\t\tstate=0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new IllegalStateException(\"we're not supposed to in state \" + state);\n\t\t}\n\t}\n\treturn (ret);\n}", "codeB": "protected URL[][] extractImageLinks(final Lexer lexer,final URL docbase) throws IOException, ParserException {\n\tString href;\n\twhile(null != (node=lexer.nextNode())){\n\t\tif(node instanceof Tag){\n\t\t\tif(\"A\".equals(name)){\n\t\t\t\tif(tag.isEndTag()){\n\t\t\t\t\tif(null != imgtag){\n\t\t\t\t\t\tif(null != href){\n\t\t\t\t\t\t\tif(isImage(href)){\n\t\t\t\t\t\t\t\tsrc=imgtag.getAttribute(\"SRC\");\n\t\t\t\t\t\t\t\tif(null != src)\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\turl=new URL(docbase,href);\n\t\t\t\t\t\t\t\t\t\thref=url.toString();\n\t\t\t\t\t\t\t\t\t\tif(!images.containsKey(href))\n\t\t\t\t\t\t\t\t\t\t\timages.put(href,url);\n\t\t\t\t\t\t\t\t\t} catch (MalformedURLException murle){\n\t\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\thref=startatag.getAttribute(\"HREF\");\n\t\t\t\t\tif(null != href){\n\t\t\t\t\t\tif(!isImage(href))\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\turl=new URL(docbase,href);\n\t\t\t\t\t\t\t\thref=url.toString();\n\t\t\t\t\t\t\t\tif(!links.containsKey(href))\n\t\t\t\t\t\t\t} catch (MalformedURLException murle){\n\t\t\t\t\t\t\t} \n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if(ina && \"IMG\".equals(name))\n\t\t}\n\t}\n}", "time": 32, "docB": "Get the links of an element of a document. Only gets the links on IMG elements that reference another image. The latter is based on suffix (.jpg, .gif and .png).", "docA": "Extract the location of the image Given the tag (with attributes), and the url of the html page in which this tag exists, perform best effort to extract the 'intended' URL. Attempts to handle such attributes as: <pre> &lt;IMG SRC=http://www.redgreen.com&gt; - normal &lt;IMG SRC =http://www.redgreen.com&gt; - space between attribute name and equals sign &lt;IMG SRC= http://www.redgreen.com&gt; - space between equals sign and attribute value &lt;IMG SRC = http://www.redgreen.com&gt; - space both sides of equals sign </pre>\n", "type": "T2", "method": 2}, "8": {"answer": "option 1", "Alternatives": ["Method A mactches Description A, Mehtod B mactches Description B.", "Method A mactches Description B, Mehtod A mactches Description B.", "Impossible to decide."], "reduction": "r10", "codeA": "public String extractImageLocn(){\n\tVector attributes;\n\tint size;\n\tAttribute attribute;\n\tString string;\n\tString data;\n\tint state;\n\tString name;\n\tString ret;\n\tret=\"\";\n\tstate=0;\n\tattributes=getAttributesEx();\n\tsize=attributes.size();\n\tfor (int i=0; (i < size) && (state < 3); i++){\n\t\tattribute=(Attribute)attributes.elementAt(i);\n\t\tstring=attribute.getName();\n\t\tdata=attribute.getValue();\n\t\tswitch (state){\n\t\tcase 0: \n\t\t\tbreak;\n\t\tcase 1: \n\t\t\tbreak;\n\t\tcase 2: \n\t\t\tif(null != string){\n\t\t\t\tif(null == data)\n\t\t\t\t\tret=string;\n\t\t\t\tstate=0;\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new IllegalStateException(\"we're not supposed to in state \" + state);\n\t\t}\n\t}\n\tret=ParserUtils.removeChars(ret,'\\n');\n\treturn (ret);\n}", "codeB": "protected URL[][] extractImageLinks(final Lexer lexer,final URL docbase) throws IOException, ParserException {\n\tHashMap<String,URL> images;\n\tHashMap<String,URL> links;\n\tboolean ina;\n\tNode node;\n\tTag tag;\n\tString name;\n\tTag startatag;\n\tTag imgtag;\n\tString href;\n\tString src;\n\tURL url;\n\tURL[][] ret;\n\timages=new HashMap<String,URL>();\n\tlinks=new HashMap<String,URL>();\n\tina=false;\n\tstartatag=null;\n\timgtag=null;\n\twhile(null != (node=lexer.nextNode())){\n\t\tif(node instanceof Tag){\n\t\t\ttag=(Tag)node;\n\t\t\tname=tag.getTagName();\n\t\t\tif(\"A\".equals(name)){\n\t\t\t} else if(ina && \"IMG\".equals(name))\n\t\t\t\timgtag=tag;\n\t\t}\n\t}\n\tret=new URL[2][];\n\tret[0]=new URL[images.size()];\n\timages.values().toArray(ret[0]);\n\tret[1]=new URL[links.size()];\n\tlinks.values().toArray(ret[1]);\n\treturn (ret);\n}", "time": 15, "docB": "Get the links of an element of a document. Only gets the links on IMG elements that reference another image. The latter is based on suffix (.jpg, .gif and .png).", "docA": "Extract the location of the image Given the tag (with attributes), and the url of the html page in which this tag exists, perform best effort to extract the 'intended' URL. Attempts to handle such attributes as: <pre> &lt;IMG SRC=http://www.redgreen.com&gt; - normal &lt;IMG SRC =http://www.redgreen.com&gt; - space between attribute name and equals sign &lt;IMG SRC= http://www.redgreen.com&gt; - space between equals sign and attribute value &lt;IMG SRC = http://www.redgreen.com&gt; - space both sides of equals sign </pre>\n", "type": "T2", "method": 1}, "21": {"code": {"r50%": "protected void process(NodeFilter filter) throws ParserException {\n\tString url;\n\tFile file;\n\tFile dir;\n\ttry {\n\t\tbookmark=mPages.size();\n\t\ttry {\n\t\t\tfor (NodeIterator e=mParser.elements(); e.hasMoreNodes(); )\n\t\t} catch (EncodingChangeException ece){\n\t\t\tfor (NodeIterator e=mParser.elements(); e.hasMoreNodes(); )\n\t\t} \n\t\trobots=list.extractAllNodesThatMatch(new AndFilter(new NodeClassFilter(MetaTag.class),new HasAttributeFilter(\"name\",\"robots\")),true);\n\t\tif(0 != robots.size()){\n\t\t\tif((-1 != content.indexOf(\"none\")) || (-1 != content.indexOf(\"nofollow\")))\n\t\t\t\tfor (int i=bookmark; i < mPages.size(); i++)\n\t\t\tif((-1 != content.indexOf(\"none\")) || (-1 != content.indexOf(\"noindex\")))\n\t\t\t\treturn;\n\t\t}\n\t\tif(null != filter)\n\t\t\tlist.keepAllNodesThatMatch(filter,true);\n\t\tfile=new File(getTarget(),makeLocalLink(url,\"\"));\n\t\tdir=file.getParentFile();\n\t\tif(!dir.exists())\n\t\telse if(!dir.isDirectory()){\n\t\t\tdir=new File(dir.getParentFile(),dir.getName() + \".content\");\n\t\t\tfile=new File(dir,file.getName());\n\t\t}\n\t\ttry {\n\t\t\tfor (int i=0; i < list.size(); i++)\n\t\t} catch (FileNotFoundException fnfe){\n\t\t} \n\t} catch (ParserException pe){\n\t\tif((null != message) && (message.endsWith(\"does not contain text\"))){\n\t\t\tif(!mCopied.contains(url))\n\t\t\t\tif(!mImages.contains(url))\n\t\t\t\t\tmImages.add(url);\n\t\t} else \n\t} \n}", "r10": "protected void process(NodeFilter filter) throws ParserException {\n\ttry {\n\t\ttry {\n\t\t\tfor (NodeIterator e=mParser.elements(); e.hasMoreNodes(); )\n\t\t} catch (EncodingChangeException ece){\n\t\t} \n\t\tif(0 != robots.size()){\n\t\t}\n\t\ttry {\n\t\t\tfor (int i=0; i < list.size(); i++)\n\t\t} catch (FileNotFoundException fnfe){\n\t\t} \n\t} catch (ParserException pe){\n\t} \n}", "r20": "protected void process(NodeFilter filter) throws ParserException {\n\tString url;\n\ttry {\n\t\ttry {\n\t\t\tfor (NodeIterator e=mParser.elements(); e.hasMoreNodes(); )\n\t\t} catch (EncodingChangeException ece){\n\t\t\tfor (NodeIterator e=mParser.elements(); e.hasMoreNodes(); )\n\t\t} \n\t\tif(0 != robots.size()){\n\t\t\tif((-1 != content.indexOf(\"none\")) || (-1 != content.indexOf(\"nofollow\")))\n\t\t\t\tfor (int i=bookmark; i < mPages.size(); i++)\n\t\t}\n\t\tif(null != filter)\n\t\tif(!dir.exists())\n\t\telse \n\t\ttry {\n\t\t\tfor (int i=0; i < list.size(); i++)\n\t\t} catch (FileNotFoundException fnfe){\n\t\t} \n\t} catch (ParserException pe){\n\t\tif((null != message) && (message.endsWith(\"does not contain text\"))){\n\t\t\tif(!mCopied.contains(url))\n\t\t\t\tif(!mImages.contains(url))\n\t\t} else \n\t} \n}"}, "reduction": "r20", "time": 5, "answer": "dafdsafas", "type": "T3", "method": 2}}}